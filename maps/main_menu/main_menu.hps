#include "interfaces/Map_Interface.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_player.hps"
#include "inputhandler_types.hps"
#include "helpers/helper_imgui_options.hps"
#include "custom/helpers/helper_menu.hps"
#include "helpers/helper_sequences.hps"

//-----------------------------------------

class cScrMap : iScrMap
{

	//-------------------------------------------------------
	
	/////////////////////////////////////////
	// MAIN CALLBACKS
	/////////////////////////////////////////
	
	//-------------------------------------------------------
	
	tString menuMusic = "artroom_menu.ogg";
	
	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		//----DEBUG----//
		if(cLux_ScriptDebugOn())
		{
			//Add any debug stuff here
		}
		
		//Preload sounds
	}

	//-------------------------------------------------------

	void Setup()
	{
		GetBase().SetDisplayNameEntry("main-menu");
	}
	
	void PreloadData()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		////////////////////////
		// Set rich presence
		RichPresence_SetCurrent(eRichPresence_MainMenu);
		
		////////////////
		// Set static camera
		CameraAnimation_Begin("CameraAnimation", "", false);
				
		//////////////////////////
		// Disable pause menu and show main menu
		PauseMenu_Enabled(false);
		cLux_SetGamePaused(false, true, true, true);
		MainMenu_Show(true);
		cLux_GetGuiHandler().SetGameHudInputFocus(true);
		
		///////////////
		// fade
		Effect_Fade_In(5.0f);
		//Sound_FadeGlobalVolume(0.f, 0.0f, eSoundEntryType_All);
		Sound_FadeGlobalVolume(1.f, 0.f, eSoundEntryType_All);
		
		if(Platform_IsConsole() == false)
		{
			///////////////
			// Achievement
			cConfigFile@ pUserFile = cLux_GetUserConfig();
			cConfigFile@ pStatsFile = cLux_GetStatsConfig();
			bool bUserNope = pUserFile !is null && pUserFile.GetBool("Game", "Nope", false);
			bool bStatsNope = pStatsFile !is null && pStatsFile.GetBool("Game", "Nope", false);
			if (bUserNope || bStatsNope) 
				Achievement_Unlock(eAchievement_Nope);
			/////////////////////////////////////
			// We're moving this over to the stats config. Make sure it doesn't break people's game.
			if (bUserNope && bStatsNope==false)
				pStatsFile.SetBool("Game", "Nope", true);
		}
		
		/////////////
		// Player setup
		Player_ShowCrossHairIcons(false);
		Player_SetGravityEnabled(false);
		Player_SetNightVisionEnabled(false);
		
		////////////////
		// Setup bombing effect
		BombingHandler_SetActive(false);
		
		///////////////////
		// Setup save game info hint
		SaveRoom_SetSaveHintActive(false);
		
		///////////////////
		// Blood splatter
		Decal_SetDynamicVisible("blood_splatter_group_*", false);
		
		/////////////////////
		// Setup stalker events
		cConfigFile@ pUserConfig = cLux_GetUserConfig();
		cConfigFile@ pStatsConfig = cLux_GetStatsConfig();
		if (pUserConfig !is null || pStatsConfig!is null)
		{
			int lUserEscl = pUserConfig.GetInt("Game", "MainMenuStage", 0);
			int lStatsEscl = pStatsConfig.GetInt("Game", "MainMenuStage", 0);
			mlEscalation = cMath_Max(lUserEscl, lStatsEscl);
			/////////////////////////////////////
			// We're moving this over to the stats config. Make sure it doesn't break people's game.
			if (mlEscalation > lStatsEscl)
				pStatsConfig.SetInt("Game", "MainMenuStage", mlEscalation);
			
			cLux_AddDebugMessage("[MainMenu] Level Progression: " + mlEscalation);
		}
		
		mfHandEmergeTimeThresholdMax = 40.f;
		mfHandEmergeTimeThresholdMin = 30.f;
		mfMaxTimeBetweenEvents = 15.f;
		mfMinTimeBetweenEvents = 10.f;
		
		if (mlEscalation > 0)
		{
			if (mlEscalation == 1)
			{
				mfHandEmergeTimeThresholdMax = 30.f;
				mfHandEmergeTimeThresholdMin = 15.f;
				mfMaxTimeBetweenEvents = 10.f;
				mfMinTimeBetweenEvents = 8.f;
				
				Decal_SetDynamicVisible("blood_splatter_group_1_*", true);
			}
			else if (mlEscalation == 2)
			{
				mfHandEmergeTimeThresholdMax = 16.f;
				mfHandEmergeTimeThresholdMin = 8.f;
				mfMaxTimeBetweenEvents = 8.f;
				mfMinTimeBetweenEvents = 6.f;
				
				Decal_SetDynamicVisible("blood_splatter_group_1_*", true);
				Decal_SetDynamicVisible("blood_splatter_group_2_*", true);
			}
			else if (mlEscalation >= 3)
			{
				mfHandEmergeTimeThresholdMax = 5.f;
				mfHandEmergeTimeThresholdMin = 3.f;
				mfMaxTimeBetweenEvents = 4.f;
				mfMinTimeBetweenEvents = 2.f;
				
				Decal_SetDynamicVisible("blood_splatter_group_*", true);
			}
		}
		
		/////////////////
		// Setup stalker
		iLuxEntity@ pStalker = Map_GetEntity("Stalker_Rigid_1", eLuxEntityType_Prop);
		if (pStalker !is null)
			pStalker.StopAllAnimations(0.f);
		
		////////////////////
		// Debug
		/*
		{
			float fTestMul = 0.01;
			mfHandEmergeTimeThresholdMax *= fTestMul;
			mfHandEmergeTimeThresholdMin *= fTestMul;
			mfMaxTimeBetweenEvents *= fTestMul;
			mfMinTimeBetweenEvents *= fTestMul;
		}*/
		
		//////////////
		// Convert to minutes
		mfHandEmergeTimeThresholdMax *= 60.f;
		mfHandEmergeTimeThresholdMin *= 60.f;
		mfMaxTimeBetweenEvents *= 60.f;
		mfMinTimeBetweenEvents *= 60.f;
		cLux_AddDebugMessage("[MainMenu] mfHandEmergeTimeThresholdMax " + mfHandEmergeTimeThresholdMax + ", mfHandEmergeTimeThresholdMin " + mfHandEmergeTimeThresholdMin + ", mfMaxTimeBetweenEvents " + mfMaxTimeBetweenEvents + ", mfMinTimeBetweenEvents " + mfMinTimeBetweenEvents + ".");
		
		////////////////
		// Start the events loop
		Map_AddTimer("Timer_StartStalkerPresence", cMath_RandRectf(mfMinTimeBetweenEvents, mfMaxTimeBetweenEvents), "OnTimer_StartStalkerPresenceSequence");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
		Player_SetNightVisionEnabled(true);
		Player_ShowCrossHairIcons(true);
		Music_Stop(3.0f, eMusicPrio_BgAmb);
	}
	
	//-------------------------------------------------------
	
	void OnAction(int alAction, bool abPressed)
	{
		if(abPressed==false) return;
		
		if (alAction == eAction_Test0)
		{
			MainMenu_SetGameCompletedOnce(!MainMenu_GetGameCompletedOnce());
		}
		
		if (alAction == eAction_Test1)
		{
			MainMenu_Show(!MainMenu_IsShowing());
			GameStats_SetGuiActive(!GameStats_GetGuiActive());
		}
			
		if (alAction == eAction_Test2)
		{
			Sound_CreateAtEntity("StalkerSound", "creatures/stalker/tunnel_warning", "Area_HolePosition");
			tString sAnim =  GetRandomStalkerHandAnimation();
			Entity_SetActive("stalker_rigid_1", true);
			Entity_PlayAnimation("stalker_rigid_1", sAnim, 0.1, false, false, "");
		}
		
		if (alAction == eAction_Test9)
		{
			int lGoal = cLux_GetStatsConfig().GetInt("Game", "MainMenuStage", 0) == 0 ? 3 : 0;
			cLux_GetStatsConfig().SetInt("Game", "MainMenuStage", lGoal);
			cLux_GetStatsConfig().Save();
		}
	}
	
	//-------------------------------------------------------
	
	/////////////////////////////////////////
	// HELPERS
	/////////////////////////////////////////
	
	//---------------------------------------------------------

	/////////////////////////////////////////
	// GUI
	/////////////////////////////////////////
	
	//---------------------------------------------------------

	/*void OnGui(float afTimeStep)
	{
		// Rendering done in MenuHandler script
	}*/

	//------------------------------------------------------

	bool mbSceneVisibilityActive = false;

	void VariableUpdate(float afDeltaTime)
	{
		mfHandEmergeTimer += afDeltaTime;
		
		/////////////////////
		// Turn On the Lights
		if (!mbSceneVisibilityActive && MainMenu_GetMainMenuVisible())
		{
			mbSceneVisibilityActive = true;
			Music_PlayExt(menuMusic, true, 0.08f, 1.0f, 15.0f, 1.0f, eMusicPrio_BgAmb, true);
			Map_AddTimer("Timer_TurnOnTheLight", 0.25f, "OnTimer_TurnOnTheLight");
		}
	}
	
	//------------------------------------------------------
	
	/////////////////////////////////////////
	// EVENTS
	/////////////////////////////////////////
	
	//------------------------------------------------------
	
	array<tString> mvAnims = {"stalker_hole_reach_out_1", "stalker_hole_reach_out_2"}; //, "stalker_hole_reach_out_3"};
	float mfMaxTimeBetweenEvents = 60.f;
	float mfMinTimeBetweenEvents = 30.f;
	int mlEscalation = 0;
	float mfHandEmergeTimer = 0.f;
	float mfHandEmergeTimeThresholdMax = 0.f;
	float mfHandEmergeTimeThresholdMin = 0.f;
	
	//------------------------------------------------------
	
	void OnTimer_StartStalkerPresenceSequence(const tString&in asTimer)
	{
		Seq_StalkerPresence("");
	}
	
	//------------------------------------------------------
	
	void OnTimer_TurnOnTheLight(const tString&in asTimer)
	{
		Lamp_SetLit("Lamp_PowerSwitch_3_10", true, true);
		Map_AddTimer("Timer_SetLampFlickerActive", 5, "OnTimer_SetLampFlickerActive");
	}
	
	//------------------------------------------------------
	
	void OnTimer_SetLampFlickerActive(const tString&in asTimer)
	{
		Lamp_SetFlickerActive("Lamp_PowerSwitch_3_10", true);
	}
	
	//------------------------------------------------------
	
	tString GetRandomStalkerHandAnimation()
	{
		return mvAnims[cMath_RandRectl(0,mvAnims.size()-1)];
	}
	
	//------------------------------------------------------
	
	void OnAnimEnd_SeqStalkerPresenceResume(const tString &in asEntity, const tString &in asAnim)
	{
		cLux_AddDebugMessage("[MainMenu] Resume the sequence.");
		SequenceStates_Resume("Seq_StalkerPresence");
	}
	
	//------------------------------------------------------
	
	cSequenceStatesData mSequenceStalkerPresence;
	void Seq_StalkerPresence(const tString&in asTimer)
	{
		Sequence_Begin("Seq_StalkerPresence", mSequenceStalkerPresence);
		if (Sequence_DoStepAndWait(cMath_RandRectf(5, 10)))
		{
			Lamp_SetupFlicker("Lamp_PowerSwitch_*", 1.0, 2.0, 0.25, 0.5, true, "", "", "", "", 0.5f, 0.7f);
			Sound_CreateAtEntity("StalkerSoundLoop", "creatures/stalker/tunnel_breathe_loop", "Area_HolePosition");
			
			ParticleSystem_CreateAtEntity("StalkerDustPS", "ghoul_hole_dust_trap_one_shot", "Area_HolePosition", false);
		}
		else if (Sequence_DoStepAndWait(5.5))
		{
			Sound_Stop("StalkerSoundLoop", 1.f);
			
			if (mfHandEmergeTimer < cMath_RandRectf(mfHandEmergeTimeThresholdMin, mfHandEmergeTimeThresholdMax))
				Sequence_SkipNextStep();
		}
		else if (Sequence_DoStepAndPause(0))
		{
			Lamp_SetupFlicker("Lamp_PowerSwitch_*", 0.015, 0.15, 0.25, 1.0, true, "", "", "", "", 0.2f, 0.5f);
			Sound_CreateAtEntity("StalkerSound", "creatures/stalker/tunnel_warning", "Area_HolePosition");
			tString sAnim =  GetRandomStalkerHandAnimation();
			
			//Entity_SetActive("stalker_rigid_1", true);
			Prop_SetActiveAndFade("stalker_rigid_1", true, 0.5);
			Entity_PlayAnimation("stalker_rigid_1", sAnim, 0.1, false, false, "OnAnimEnd_SeqStalkerPresenceResume");
			
			ParticleSystem_CreateAtEntity("StalkerEmergeDustPS", "ghoul_hole_dust_pre_emerge", "Area_HolePosition", false);
			
			mfHandEmergeTimer = 0.f;
		}
		else if (Sequence_DoStepAndWait(cMath_RandRectf(2, 8)))
		{
			Entity_SetActive("stalker_rigid_1", false);
			Lamp_SetupFlicker("Lamp_PowerSwitch_*", 1.0, 2.0, 0.25, 0.5, true, "", "", "", "", 0.5f, 0.7f);
		}
		else if (Sequence_DoStepAndWait(3))
		{
			Lamp_SetupFlicker("Lamp_PowerSwitch_*", 5, 10, 0.1, 0.25, true, "", "", "", "", 0.7f, 0.9f);
			Map_AddTimer("Timer_StartStalkerPresence", cMath_RandRectf(mfMinTimeBetweenEvents, mfMaxTimeBetweenEvents), "OnTimer_StartStalkerPresenceSequence");
		}
		else if (Sequence_DoStepAndContinue())
		{
			
		}
		Sequence_End();
	}
	
	//------------------------------------------------------
}