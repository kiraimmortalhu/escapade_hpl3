#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"

//Unique escapade includes:
#include "escapade_custom/helpers/helper_music_control.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("greenhouse");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		// Preload maps
        
        {
            Map_Preload("escapade_entrance.hpm");
            Map_Preload("escapade_library.hpm");
        }
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
			Entity_SetActive("debugitem_*", true);
			Item_SetCurrentSlotsCount(15);
			Item_AddToInventory("Lighter");
			Item_AddToInventory("DynamoLantern");
			
			cScript_SetGlobalVarBool("scaredByStalker", true);
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		///////////////////////
		// Setup player body
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
		
		Music_PlayExt_Save("conservatory_exploration", true, 0.2f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
		
		SetupGenerator();
        
        Entity_SetConnectionStateChangeCallback("lever*", "lever_portculis_OnConnectionStateChange");
		
        // Generator off, set levers off
        if(Generator_GetFuelTimeLeft() == 0){
            // Skip lever numbers that do not depend on generator
            for(int t = 1; t <= 10; t++){
                if(t != 3){
                    Lever_SetStuckState("lever"+t+"_portculis", 1, true);
                }
            }
            
        }
        
		
		if(cScript_GetGlobalVarBool("entrance_alt_unlocked")){ 
			SetupColorgrading_EntranceAlt();
		}
		
		SetupStalkerAppearance();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
        Sound_Stop("Sound_GeneratorStop",0.f);
		
		Music_Stalker_StopDeaggroSongChecks();
	}
	
       
    bool OnCollide_CloseExitDoors(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            //SwingDoor_SetAutoClose("door_exit_*", true);
            //SwingDoor_SetOpenAmount("door_exit_entrance", 0.0f);
            cLux_AddDebugMessage("START CLOSE");
            SwingDoor_SetClosed("door_exit_*", true, true);
            Map_AddTimer("doorg", 0.05f, "OnTimer_PreventDoorGlitch");
        }
        return true;
    }
    
    void OnTimer_PreventDoorGlitch(const tString &in asTimer){
        cLux_AddDebugMessage("CLOSE");
        SwingDoor_SetOpenAmount("door_exit_*", 0.0f);
    }
    
    bool OnTrigger_Player_Transfer_Entrance_One(const tString &in asParent, const tString &in asChild, int alState)
	{
		
        if(cScript_GetGlobalVarBool("entrance_alt_unlocked") ){
            Game_DoMapChange("escapade_entrance_alt.hpm", "MapTransfer_EntranceGreenhouse_1");
            
        }else{

            Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceGreenhouse_1");
        
        }
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Entrance_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
		if(cScript_GetGlobalVarBool("entrance_alt_unlocked") ){
            Game_DoMapChange("escapade_entrance_alt.hpm", "MapTransfer_EntranceGreenhouse_2");
            
        }else{

            Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceGreenhouse_2");
        
        }
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Library_Three(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_library.hpm", "MapTransfer_LibraryGreenhouse");
		return true;
	}
	//-------------------------------------------------------
    
    bool CanUse_Lever(const tString &in asItemType, const tString &in asItemID, const tString &in asPickedEntity){
        return asPickedEntity == "Trigger_LeverPlacement";
    }
    
    bool OnUse_Lever(const tString &in asItemType, const tString &in asItemID, const tString &in asTargetEntity, const tString &in asItemEntity, float afTimeElapsed, float afTimeStep){
        Entity_SetActive("lever3_mount", false);
        Entity_SetActive("Trigger_LeverPlacement", false);
        Entity_SetActive("lever3_portculis", true);
        
        
        Item_Unequip(ItemType_GetFirstInInventory("Lever"));
        Map_AddTimer("remove_lever", 1.0f, "OnTimer_RemoveLever");
        
        return true;
    }
    
    void OnTimer_RemoveLever(const tString &in asTimer){
        cLux_AddDebugMessage("UNEQUIPPED, REMOVE");
        Item_RemoveFromInventory(ItemType_GetFirstInInventory("Lever"));
        PlayerBody_PlayAnimation("tool_torch_holster", ePlayerBodyAnimationLayer_RightArm, false, false, true);
    }
    
	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
        if (cLux_ScriptDebugOn())
		{
			if (alAction == eAction_Test7)
			{
				Entity_SetActive("Trigger_KillGenerator", false);
				Generator_SetFuelAmount(0);
				Generator_SetRunForever(false);
				Generator_ChangeState(eGeneratorState_Off);
				cLux_AddDebugMessage("Generator Off");
			}
		
			if (alAction == eAction_Test8)
			{
				Entity_SetActive("Trigger_KillGenerator", true);
				Generator_AddFuel(2);
				Generator_ChangeState(eGeneratorState_On);
				Generator_SetRunForever(true);
				cLux_AddDebugMessage("Generator On");
			}
		}
        
		if (alAction == eAction_Flashlight)
		{
			OnAction_CustomizedLightSources();
		}
	}
	
	// Hold F for lantern, press F for lighter/crafted torch

	void OnAction_CustomizedLightSources() {
	
		tString sItemID = ItemType_GetFirstInInventory("Lighter");
		if (sItemID != "") {
			if (Item_GetHeldType(eItemHandlerHand_Left) == "DynamoLantern" && Item_IsLightSourceActive()) {
				Item_PutAway(eItemHandlerHand_Left);
			}
			sItemID = ItemType_GetFirstInInventory("Torch");
			if (sItemID != "") {
				Item_ToggleHeldItem("Torch");
			} else {
				Item_ToggleHeldItem("Lighter");
			}
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	/////////////////////////
	//// Generator
	
	void SetupGenerator()
	{
		Generator_SetupEntities("", "", "", "", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
		Generator_EndSetup();
	}
	
	void OnStateChange_Generator(int alState)
	{		
		///////////////////
		// Generator Sounds
		if (alState!=1) {
			Sound_Play("Sound_GeneratorOff", 0.f);
			
            // Generator off, set levers off
        
            // Skip lever numbers that do not depend on generator
            for(int t = 1; t <= 10; t++){
                if(t != 3){
                    Lever_SetStuckState("lever"+t+"_portculis", 1, true);
                }
            }
            
        
		}
	}
	
	////////////////////////////////
	
	//////////////////
	/// Stalker
	//////////////////
	
	void SetupStalkerAppearance() {
		if (cScript_GetGlobalVarBool("scaredByStalker") && !cScript_GetGlobalVarBool("entrance_alt_unlocked")) {
			Entity_SetActive("stalker_growth_1", true);
			Music_Stalker_AddDeaggroSongTime("stalker_growth_1", cScript_GetGlobalVarString("music_to_play"), cScript_GetGlobalVarFloat("music_to_play_volume"), 8.0f);
			//Stalker_SetEmergeAllowed("stalker_growth_1", true);
			cLux_AddDebugMessage("Stalker is now ENABLED");
		}
	}
	
	////////////////////////////////
	
	void lever_portculis_OnConnectionStateChange(const tString &in asEntity, int alState)
	{
		if (alState == -1) {
            cLux_AddDebugMessage("STATE CHANGED: -1");
			if (Generator_GetFuelTimeLeft() >0 || asEntity == "lever3_portculis")
			{
                cLux_AddDebugMessage("MOVE DOOR UP");
				MoveObject_SetState(asEntity + "_door", 1);
				Lever_SetStuckState(asEntity, -1, true);
			} else {
                
				Lever_SetStuckState(asEntity, 1, true);
			}
		}
        if(alState == 1){
            MoveObject_SetState(asEntity + "_door", 0);
        }
	}
    
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		/*Put any functions that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE X 
	
	void SetupColorgrading_EntranceAlt() {
        //Debug: test enable entrance_alt
        //cScript_SetGlobalVarBool("entrance_alt_unlocked", true);

            // Set ToneMapping values to match entrance_alt
            float afKey = 0.1f;
            float afGammaCorrection = 0.5f;
            float afFilmGrainIntensity = 1.0f;
            float afBrightPass = 0.75f;
            float afBloomWidth = 128.0;
            cColor avBloomTint;
            avBloomTint.a = 1.0f;
            avBloomTint.r = 1.0f;
            avBloomTint.g = 1.0f;
            avBloomTint.b = 1.0f;
            float afBloomFalloff = 0.5f;
            cLux_GetViewport().GetToneMappingEffect().SetParams(afKey, afGammaCorrection, afFilmGrainIntensity, afBrightPass, afBloomWidth, avBloomTint, afBloomFalloff);
            cLux_GetViewport().GetToneMappingEffect().SetGradingTexture(1, "bunker_prototype_01.dds", 1.0f);
            
            cLux_GetViewport().GetToneMappingEffect().SetActive(true);
            cLux_GetViewport().GetToneMappingEffect().SetColorGradingActive(true);
            cLux_GetViewport().GetToneMappingEffect().FadeWindowExposure(0.f, 3.25f);
            cLux_GetViewport().GetToneMappingEffect().SetBloomActive(true);
            
            cLux_AddDebugMessage("CHANGED TONEMAPPING");
            
            //Fog change

			cColor fogColor;
			fogColor.a = 1.0f;
			fogColor.r = 0.193f;
			fogColor.b = 0.263f;
			fogColor.g = 0.179f;
			
			cColor secondaryFogColor;
			secondaryFogColor.a = 1.0f;
			secondaryFogColor.r = 0.204f;
			secondaryFogColor.g = 0.081f;
			secondaryFogColor.b = 0.051f;
			
			Map_SetFogProperties(0.f, 100.0f, 2.0f, fogColor, false);
			Map_SetSecondaryFogProperties(10.0f, 50.0f, 1.5f, secondaryFogColor);
        
        
        cLux_GetViewport().GetToneMappingEffect().GetParams(afKey, afGammaCorrection, afFilmGrainIntensity, afBrightPass, afBloomWidth, avBloomTint, afBloomFalloff);
        
        /*cLux_AddDebugMessage("afKey: "+ afKey);
        cLux_AddDebugMessage("afBloomFalloff: "+ afBloomFalloff);
        cLux_AddDebugMessage("afFilmGrainIntensity: "+ afFilmGrainIntensity);
        cLux_AddDebugMessage("afBrightPass: "+ afBrightPass);
        cLux_AddDebugMessage("afBloomWidth: "+ afBloomWidth);
        cLux_AddDebugMessage("avBloomTint A: "+ avBloomTint.a);
        cLux_AddDebugMessage("avBloomTint R: "+ avBloomTint.r);
        cLux_AddDebugMessage("avBloomTint G: "+ avBloomTint.g);
        cLux_AddDebugMessage("avBloomTint B: "+ avBloomTint.b);
        cLux_AddDebugMessage("afBloomFalloff: "+ afBloomFalloff);
        
        cLux_AddDebugMessage("EXPOSURE: "+ cLux_GetViewport().GetToneMappingEffect().GetExposure());*/
	}
}