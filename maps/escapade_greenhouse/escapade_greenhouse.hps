#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"

//Unique escapade includes:
#include "escapade_custom/helpers/helper_music_control.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("greenhouse");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
        //////////////
		// Preload entity
		Entity_Preload("player_rebirth_ghoul.ent");
		//PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		// Preload maps
        
        /*{
            Map_Preload("escapade_entrance.hpm");
            Map_Preload("escapade_library.hpm");
        }*/
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
			Entity_SetActive("debugitem_*", true);
			Item_SetCurrentSlotsCount(15);
			Item_AddToInventory("Lighter");
			Item_AddToInventory("DynamoLantern");
			
            
            //Rat_EmergeToWander("enemy_rat_king_1");
			//cScript_SetGlobalVarBool("scaredByStalker", true);
            Map_AddTimer("debugt", 0.0f, "OnTimer_Debug");
		} else {
			Entity_SetActive("debugitem_*", false);
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
        
		///////////////////////
		// Setup player body
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
		
        
        if(cLux_ScriptDebugOn()){
            //Blackboard_SetDebugMode(true);
            //Blackboard_ShowDebug(true);
            
            Item_SetCurrentSlotsCount(50);
			if (ItemType_GetCountInInventory("Gun") == 0)
			{
				Item_AddToInventory("Gun");
				Item_AddManyToInventory("Ammunition", 20);
			}
            if (ItemType_GetCountInInventory("Shotgun") == 0)
			{
				Item_AddToInventory("Shotgun");
				Item_AddManyToInventory("ShotgunAmmunition", 20);
			}
            Item_AddToInventory("MolotovCocktail");
            
            // Test
            //tID ratKID = Map_GetEntityID("enemy_rat_king_1");
            //cLux_AddDebugMessage("RAT KING HITBOXES: "+cLux_ID_Agent(ratKID).GetHitboxBodyNum());
            //for(int t=0; t < cLux_ID_Agent(ratKID).GetHitboxBodyNum(); t++){
            //    cLux_ID_Agent(ratKID).GetHitboxBody(t).SetActive(false);
            //}
            //cLux_AddDebugMessage("HITBOX DISABLED");
        }
        
		SetupMusicAmbienceBasedOnGen();
		
        ///////////////////////
		// Setup stalker
		Blackboard_DoStalkerMapTransfer("stalker_growth_1");
        if(Entity_IsActive("stalker_growth_1")){
            Music_Stalker_AddDeaggroSongTime("stalker_growth_1", cScript_GetGlobalVarString("music_to_play"), cScript_GetGlobalVarFloat("music_to_play_volume"), 8.0f);
        }
        
        
		SetupGenerator();
        
        Entity_SetConnectionStateChangeCallback("lever*", "lever_portculis_OnConnectionStateChange");
		
        // Generator off, set levers off
        if(Generator_GetState() == eGeneratorState_Off){
			Entity_SetActive("Zoom_1", false);
			Entity_SetActive("Zoom_3", false);
            
            for(int t = 1; t <= 3; t++){
                
                Lever_SetStuckState("lever"+t+"_portculis", 1, true);
                
            }
            
        } else {
			Entity_SetActive("Zoom_1", true);
			Entity_SetActive("Zoom_3", true);
		}
        
		
		if(cScript_GetGlobalVarBool("entrance_alt_unlocked")){ 
			SetupColorgrading_EntranceAlt();
		}
		
		//SetupStalkerAppearance();
        
        // Enable rat king health timer if he's undefeated
        if(!cScript_GetGlobalVarBool("ChurchKeyGreenhouseDropped") && !Map_TimerExists("ratKhealthtimer")){
            Map_AddTimer("ratKhealthtimer", 0.0f, "OnTimer_UpdateRatKHealth");
        } else{
            Entity_SetActive("enemy_rat_king_1", false);
        }
        
        Game_SetupAfterMapChange();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
        Sound_Stop("Sound_GeneratorStop",0.f);
		
		Music_Stalker_StopDeaggroSongChecks();
	}
	
    void OnInteract_DebugRat(const tString &in asEntity)
    {
        //cScrAgentRat pRatK = cast<cScrAgentRat>( cLux_ID_Agent(Map_GetEntity("enemy_rat_king_1").GetID() ));
        //cLux_ID_Agent(Map_GetEntity("enemy_rat_king_1").GetID()).Dead_ActivateDeathState();
        //pRatK.Dead_ActivateDeathState();
    }
    
    void OnTimer_Debug(const tString &in asTimer){
        
        cLux_AddDebugMessage("RAT STATE: "+ StateMachine_GetCurrentStateName("enemy_rat_king_1"), true);
        //Agent_SetSensesActive("enemy_rat_king_1", true);
        //Rat_Attack("enemy_rat_king_1", true, false);
        //Rat_ResetHungerTimer("enemy_rat_king_1");
        //cLux_AddDebugMessage("GENERATOR STATE: " + Generator_GetState());
        //cLux_AddDebugMessage("GENERATOR TIME: "+ Generator_GetFuelTimeLeft(), true);
        //cLux_AddDebugMessage("GENERATOR RUN FOREVER: "+ Generator_GetRunForever(), true);
        //Map_RestartCurrentTimer(0.2f);
    }
       
    bool OnCollide_CloseExitDoors(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            //SwingDoor_SetAutoClose("door_exit_*", true);
            //SwingDoor_SetOpenAmount("door_exit_entrance", 0.0f);
            cLux_AddDebugMessage("START CLOSE");
            SwingDoor_SetClosed("door_exit_*", true, true);
            Map_AddTimer("doorg", 0.05f, "OnTimer_PreventDoorGlitch");
        }
        return true;
    }
    
    void OnTimer_PreventDoorGlitch(const tString &in asTimer){
        cLux_AddDebugMessage("CLOSE");
        SwingDoor_SetOpenAmount("door_exit_*", 0.0f);
    }
    
    bool OnTrigger_Player_Transfer_Entrance_One(const tString &in asParent, const tString &in asChild, int alState)
	{
		
        if(cScript_GetGlobalVarBool("entrance_alt_unlocked") ){
            Stalker_SetTenacity("stalker_growth_1", 1.f);
            Stalker_SetEmergeAllowed("stalker_growth_1", false);
            
            Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
            Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));
            
            Game_DoMapChange("escapade_entrance_alt.hpm", "MapTransfer_EntranceGreenhouse_1");
            
        }else{
            Stalker_SetTenacity("stalker_growth_1", 1.f);
            Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
            Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));
            
            Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceGreenhouse_1");
        
        }
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Entrance_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
		if(cScript_GetGlobalVarBool("entrance_alt_unlocked") ){
            Stalker_SetTenacity("stalker_growth_1", 1.f);
            Stalker_SetEmergeAllowed("stalker_growth_1", false);
            
            Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
            Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));
            
            Game_DoMapChange("escapade_entrance_alt.hpm", "MapTransfer_EntranceGreenhouse_2");
            
        }else{
            Stalker_SetTenacity("stalker_growth_1", 1.f);
            Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
            Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));
            
            Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceGreenhouse_2");
        
        }
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Library_Three(const tString &in asParent, const tString &in asChild, int alState)
	{
        Stalker_SetTenacity("stalker_growth_1", 1.f);
        Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
        Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));
        
		Game_DoMapChange("escapade_library.hpm", "MapTransfer_LibraryGreenhouse");
		return true;
	}
	//-------------------------------------------------------
    
    bool CanUse_Lever(const tString &in asItemType, const tString &in asItemID, const tString &in asPickedEntity){
        return asPickedEntity == "Trigger_LeverPlacement";
    }
    
    bool OnUse_Lever(const tString &in asItemType, const tString &in asItemID, const tString &in asTargetEntity, const tString &in asItemEntity, float afTimeElapsed, float afTimeStep){
        
        Entity_SetActive("Trigger_LeverPlacement", false);
		Entity_SetActive("Description_Lever", false);
        
        PlayerBody_SetUnequipItemsOnCutscene(false, true);
        PlayerBody_PlayAnimation("tool_torch_holster", ePlayerBodyAnimationLayer_Arms, false, false, true);
        Map_AddTimer("remove_lever", 1.4f, "OnTimer_RemoveLever");
        
        //PlayerBody_PlayCutsceneAnimation("tool_torch_holster", false, 0.3f);
        //Item_Unequip(ItemType_GetFirstInInventory("LeverCustom"));
        //Map_AddTimer("remove_lever", 1.0f, "OnTimer_RemoveLever");
        
        return true;
    }
    
    void OnTimer_RemoveLever(const tString &in asTimer){
        cLux_AddDebugMessage("UNEQUIPPED, REMOVE");
        Item_Unequip(ItemType_GetFirstInInventory("LeverCustom"));
        Item_RemoveFromInventory(ItemType_GetFirstInInventory("LeverCustom"), eInventoryInstance_Player, false, true);
        
        Entity_SetActive("lever3_mount", false);
        Entity_SetActive("lever3_portculis", true);
        //PlayerBody_PlayAnimation("tool_torch_holster", ePlayerBodyAnimationLayer_RightArm, false, false, true);
    }
    
	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
        if (cLux_ScriptDebugOn())
		{
			if (alAction == eAction_Test7)
			{
				Entity_SetActive("Trigger_KillGenerator", false);
				Generator_SetFuelAmount(0);
				Generator_SetRunForever(false);
				Generator_ChangeState(eGeneratorState_Off);
				cLux_AddDebugMessage("Generator Off");
			}
		
			if (alAction == eAction_Test8)
			{
				Entity_SetActive("Trigger_KillGenerator", true);
				Generator_AddFuel(2);
				Generator_ChangeState(eGeneratorState_On);
				Generator_SetRunForever(true);
				cLux_AddDebugMessage("Generator On");
			}
		}
        
		else if (alAction == eAction_Flashlight)
		{
			OnAction_CustomizedLightSources();
		}
	}
	
	// Hold F for lantern, press F for lighter/crafted torch

	void OnAction_CustomizedLightSources() {
	
		tString sItemID = ItemType_GetFirstInInventory("Lighter");
		if (sItemID != "") {
			if (Item_GetHeldType(eItemHandlerHand_Left) == "DynamoLantern" && Item_IsLightSourceActive()) {
				Item_PutAway(eItemHandlerHand_Left);
			}
			sItemID = ItemType_GetFirstInInventory("Torch");
			if (sItemID != "") {
				Item_ToggleHeldItem("Torch");
			} else {
				Item_ToggleHeldItem("Lighter");
			}
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	/////////////////////////
	//// Generator
	
	void SetupGenerator()
	{
		Generator_SetupEntities("", "", "", "", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
		Generator_EndSetup();
	}
	
	void OnStateChange_Generator(int alState)
	{		
		SetupMusicAmbienceBasedOnGen();
		///////////////////
		// Generator Sounds
		if (alState!=1) {
            //Sound_Play("Sound_GeneratorOff", 0.f);
			Entity_SetActive("Zoom_1", false);
			Entity_SetActive("Zoom_3", false);
            // Generator off, set levers off
            for(int t = 1; t <= 3; t++){
                
                Lever_SetStuckState("lever"+t+"_portculis", 1, true);
                
            }
        
		} else {
			Entity_SetActive("Zoom_1", true);
			Entity_SetActive("Zoom_3", true);
		}
	}
	
	////////////////////////////////
	
	//////////////////
	/// Stalker
	//////////////////
	
	void SetupStalkerAppearance() {
		if (cScript_GetGlobalVarBool("scaredByStalker") && !cScript_GetGlobalVarBool("entrance_alt_unlocked")) {
			//Enable god mode in case player spawns there, so that stalker pushes you
            //cLux_SetGodModeActivated(true);
            //Map_AddTimer("Timer_DisableGodMode", 2.0f, "OnTimer_DisableGodMode");
            
            Entity_SetActive("stalker_growth_1", true);
			Music_Stalker_AddDeaggroSongTime("stalker_growth_1", cScript_GetGlobalVarString("music_to_play"), cScript_GetGlobalVarFloat("music_to_play_volume"), 8.0f);
			//Stalker_SetEmergeAllowed("stalker_growth_1", true);
			cLux_AddDebugMessage("Stalker is now ENABLED");
		}
	}
    /*
    bool OnCollide_StalkerDisableArea(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            cLux_AddDebugMessage("STALKER DISABLE CHECK TO SPAWN");
            Map_RemoveTimer("Timer_UpdateStalkerSpawn");
            Entity_SetActive("stalker_growth_1", false);
            Music_Stalker_StopDeaggroSongChecks(); 
        }
        
        if(alState == -1){
            cLux_AddDebugMessage("STALKER CHECK TO SPAWN ACTIVE");
            Map_AddTimer("Timer_UpdateStalkerSpawn", 0.0f, "OnTimer_UpdateStalkerSpawn");
        }
        
        return true;
    }
    
    // Check if stalker is out of player's sight and also far enough
    void OnTimer_UpdateStalkerSpawn(const tString &in asTimer){
        cLux_AddDebugMessage("Quick timer, checking for stalker spawn");
        tID stalkerID = Map_GetEntityID("stalker_growth_1");
        if(!Entity_IsInPlayerFOV("stalker_growth_1") && cLux_ID_Agent(stalkerID).GetDistanceToPlayer2D() > 1.5f){
            
            SetupStalkerAppearance();
        }else{
            Map_RestartCurrentTimer(0.1f);
        }
    }
    
    void OnTimer_DisableGodMode(const tString &in asTimer){
        cLux_SetGodModeActivated(false);
    }
	*/
	///////////////
	///// Music events
	///////////////
	
	void SetupMusicAmbienceBasedOnGen() {
		if (Generator_GetState() == eGeneratorState_Off) {
			Music_PlayExt_Save("conservatory_exploration", true, 0.2f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
		} else {
			Music_PlayExt_Save("conservatory_exploration_alt", true, 0.3f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
		}
	}
	
    bool OnCollide_RatKingRetreat(const tString &in asParent, const tString &in asChild, int alState)
    {
        cLux_AddDebugMessage("RAT KING RETREATING");
        Rat_Retreat(asChild, true, true, false);
        return true;
    }
    
	bool OnTrigger_LabMusic(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1) {
            cLux_AddDebugMessage("TRIGGERED LAB MUSIC");
			Music_PlayExt_Save("conservatory_lab_ambience", true, 0.25f, 1, 3.0f, 0, eMusicPrio_BgAmb, true);
			
            Generator_SetRunForever(true);
            
            Map_AddTimer("Trigger_LabMusic_*", 0.5f, "OnTimer_DisableCollideArea");
            
            if(!Map_TimerExists("update_stalker_hole_reached") && Entity_IsActive("stalker_growth_1")){
                Stalker_Retreat("stalker_growth_1");
            
                Map_AddTimer("update_stalker_hole_reached", 0.0f, "OnTimer_UpdateStalkerHoleReach");
            }
                
            Stalker_SetEmergeAllowed("stalker_growth_1", false);
            //OnCollide_StalkerDisableArea("", "", 1);
            
            Entity_SetActive("stalker_path_area_blocker*", false);
		}
		
        
        
		return true;
	}
	
    void OnTimer_UpdateStalkerHoleReach(const tString &in asTimer){
        if(Stalker_GetIsInsideWalls("stalker_growth_1")){
            cLux_AddDebugMessage("STALKER DISABLED", true);
            //Entity_SetActive("stalker_growth_1", false);
            Agent_SetSensesActive("stalker_growth_1", false);
            Stalker_SetMode("stalker_growth_1", eStalkerMode_Passive);
        }
        else{
            cLux_AddDebugMessage("STALKER INSIDE WALLS CHECK", true);
            Map_RestartCurrentTimer(0.1f);
        }
        
    }
    
	bool OnTrigger_LabMusicStop(const tString &in asParent, const tString &in asChild, int alState)
	{
        
		if (alState == 1) {
            cLux_AddDebugMessage("TRIGGERED MUSIC STOP");
            
			if (Music_IsSongPlaying("conservatory_swarm")) {
				Music_Stop(4.0f, eMusicPrio_OverrideAll);
				//Agent_ResetPlayerDetectionState("enemy_rat_king_1");
				//Agent_SetAutoDisableWhenOutOfSightActive("enemy_rat_king_1", true, 5.0f);
				Stalker_SetEmergeAllowed("stalker_growth_1", true);
			}
			Music_Stop(5.0f, eMusicPrio_BgAmb);
			SetupMusicAmbienceBasedOnGen();
            
            Map_AddTimer("Trigger_LabMusic_*", 0.5f, "OnTimer_EnableCollideArea");
			//Entity_SetActive("Trigger_LabMusic_*", true);
            Entity_SetActive("stalker_path_area_blocker*", true);
            // Exited softlock room
            Stalker_SetEmergeAllowed("stalker_growth_1", true);
            //OnCollide_StalkerDisableArea("", "", -1);
            Agent_SetSensesActive("stalker_growth_1", true);
            Stalker_SetMode("stalker_growth_1", eStalkerMode_Active);
            
            Generator_SetRunForever(false);
            
            
		}
		return true;
	}
	
    void OnTimer_DisableCollideArea(const tString &in asTimer){
        Entity_SetActive(asTimer, false);
    }
    
    void OnTimer_EnableCollideArea(const tString &in asTimer){
        Entity_SetActive(asTimer, true);
    }
    
    // Drop key on low health and retreat
    void OnTimer_UpdateRatKHealth(const tString &in asTimer){
            tID ratKID = Map_GetEntityID("enemy_rat_king_1");
            //cLux_AddDebugMessage("RATK HEALTH: "+ cLux_ID_Agent(ratKID).GetHealth(), true);
            
            if(cLux_ID_Agent(ratKID).GetHealth() <= 4.5f){
                cLux_AddDebugMessage("HITBOX DISABLED. RETREAT AND DROP KEY");
                for(int t=0; t < cLux_ID_Agent(ratKID).GetHitboxBodyNum(); t++){
                    
                    cLux_ID_Agent(ratKID).GetHitboxBody(t).SetActive(false);
                }
                
                Rat_Retreat("enemy_rat_king_1", true, true, false);
                if(!cScript_GetGlobalVarBool("ChurchKeyGreenhouseDropped")){
                    Entity_CreateAtEntity("church_key", "church_key.ent", "enemy_rat_king_1", false);
                }
                
                cScript_SetGlobalVarBool("ChurchKeyGreenhouseDropped", true);
                
                Map_AddTimer("addimpulsetokey", 0.2f, "OnTimer_KeyDroppedImpulse");
                Map_AddTimer("ratKDisable", 0.0f, "OnTimer_RatKingDisable");
            }else{
                
                Map_RestartCurrentTimer(0.2f);
            }
            
    }
    
    void OnTimer_KeyDroppedImpulse(const tString &in asTimer){
        Map_GetProp("church_key").GetMainBody().AddImpulse(cVector3f(0.5f, 0.5f, 0.5f));
    }
    
    void OnTimer_RatKingDisable(const tString &in asTimer){
        // Wait until rat king is inside hole, then move it and the feed areas away
        if(StateMachine_GetCurrentStateName("enemy_rat_king_1") == ""){
            Map_GetEntity("GhoulHole_5").SetPosition(cVector3f(28.465f, 1.0f, 142.0f ));
            //Map_GetEntity("RatFeed_1").SetPosition(cVector3f(29.465f, 1.0f, 142.0f ));
            Map_GetEntity("RatFeed_2").SetPosition(cVector3f(27.465f, 1.0f, 142.0f ));
            //Map_GetEntity("RatFeed_3").SetPosition(cVector3f(26.465f, 1.0f, 142.0f ));
        }else{
            Map_RestartCurrentTimer(0.1f);
        }
    }	
	
	////////////////////////////////
	
	void lever_portculis_OnConnectionStateChange(const tString &in asEntity, int alState)
	{
		if (alState == -1) {
            cLux_AddDebugMessage("STATE CHANGED: -1");
			if (Generator_GetState() == eGeneratorState_On)
			{
                cLux_AddDebugMessage("MOVE DOOR UP");
				MoveObject_SetState(asEntity + "_door", 1);
				Lever_SetStuckState(asEntity, -1, true);
                Entity_SetActive(asEntity + "_blockbox", false);
                
			} else {
                
				Lever_SetStuckState(asEntity, 1, true);
			}
		}
        if(alState == 1){
            Entity_SetActive(asEntity + "_blockbox", true);
            MoveObject_SetState(asEntity + "_door", 0);
        }
	}
    
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	 
		/////////////////////////////////////////
		// Event *Acting Rat King + Lockdown*
		//{//////////////////////////////////////

	// Labrat triggered
	void gas_mask_pickup_1_OnPlayerInteract(const tString &in asEntity)
	{
		Music_PlayExt("conservatory_swarm", true, 0.4f, 1, 3.0f, 0, eMusicPrio_OverrideAll, true);
		
        //Move hole to lab (in order to enable it)
        //28.465 1 81.25 
        Map_GetEntity("GhoulHole_5").SetPosition(cVector3f(28.465f, 1.0f, 82.0f));
        
        
        // Enable rat king
        tID ratKHoleID = Map_GetEntityID("GhoulHole_5");
        tID feedID = Map_GetEntityID("RatFeed_2");
        Rat_EmergeToFood("enemy_rat_king_1", ratKHoleID, feedID);
		
		// to-do, could be set to inactive
		//Stalker_Retreat("stalker_growth_1");
		//Stalker_SetEmergeAllowed("stalker_growth_1", false);
		
		//Agent_RevealPlayerPosition("enemy_rat_king_1", true);
		
		if (!cScript_GetGlobalVarBool("survivedLockScareEvent")) {
			RatLockDown();
		}
	}
	
	void RatLockDown() {
		Generator_ChangeState(eGeneratorState_Off);
				
		Sound_PlayGui("officer_hub/generator/off_stinger", 1.0f);
		Entity_SetActive("lever*_portculis_blockbox", true);
		
		Entity_SetInteractionDisabled("lever3", false);
		Prop_SetStaticPhysics("lever3", false);
		
		Map_AddTimer("Timer_RatLockDown", 4.0f, "OnTimer_RatLockDown");
	}
	
	void OnTimer_RatLockDown(const tString &in asTimer) {
		Generator_ChangeState(eGeneratorState_On);
		Sound_Play("Sound_GeneratorStart", 0);
		
		Entity_SetActive("Description_Lever", true);
		// assuming you don't die huh
		cScript_SetGlobalVarBool("survivedLockScareEvent", true);
	}

		//} END Event *Name Of Event*
	 
	//} END SCENE X 
	
	void SetupColorgrading_EntranceAlt() {
        //Debug: test enable entrance_alt
        //cScript_SetGlobalVarBool("entrance_alt_unlocked", true);

            // Set ToneMapping values to match entrance_alt
            float afKey = 0.1f;
            float afGammaCorrection = 0.5f;
            float afFilmGrainIntensity = 1.0f;
            float afBrightPass = 0.75f;
            float afBloomWidth = 128.0;
            cColor avBloomTint;
            avBloomTint.a = 1.0f;
            avBloomTint.r = 1.0f;
            avBloomTint.g = 1.0f;
            avBloomTint.b = 1.0f;
            float afBloomFalloff = 0.5f;
            cLux_GetViewport().GetToneMappingEffect().SetParams(afKey, afGammaCorrection, afFilmGrainIntensity, afBrightPass, afBloomWidth, avBloomTint, afBloomFalloff);
            cLux_GetViewport().GetToneMappingEffect().SetGradingTexture(1, "bunker_prototype_01.dds", 1.0f);
            
            cLux_GetViewport().GetToneMappingEffect().SetActive(true);
            cLux_GetViewport().GetToneMappingEffect().SetColorGradingActive(true);
            cLux_GetViewport().GetToneMappingEffect().FadeWindowExposure(0.f, 3.25f);
            cLux_GetViewport().GetToneMappingEffect().SetBloomActive(true);
            
            cLux_AddDebugMessage("CHANGED TONEMAPPING");
            
            //Fog change

			cColor fogColor;
			fogColor.a = 1.0f;
			fogColor.r = 0.193f;
			fogColor.b = 0.263f;
			fogColor.g = 0.179f;
			
			cColor secondaryFogColor;
			secondaryFogColor.a = 1.0f;
			secondaryFogColor.r = 0.204f;
			secondaryFogColor.g = 0.081f;
			secondaryFogColor.b = 0.051f;
			
			Map_SetFogProperties(0.f, 100.0f, 2.0f, fogColor, false);
			Map_SetSecondaryFogProperties(10.0f, 50.0f, 1.5f, secondaryFogColor);
        
        
        cLux_GetViewport().GetToneMappingEffect().GetParams(afKey, afGammaCorrection, afFilmGrainIntensity, afBrightPass, afBloomWidth, avBloomTint, afBloomFalloff);
        
        /*cLux_AddDebugMessage("afKey: "+ afKey);
        cLux_AddDebugMessage("afBloomFalloff: "+ afBloomFalloff);
        cLux_AddDebugMessage("afFilmGrainIntensity: "+ afFilmGrainIntensity);
        cLux_AddDebugMessage("afBrightPass: "+ afBrightPass);
        cLux_AddDebugMessage("afBloomWidth: "+ afBloomWidth);
        cLux_AddDebugMessage("avBloomTint A: "+ avBloomTint.a);
        cLux_AddDebugMessage("avBloomTint R: "+ avBloomTint.r);
        cLux_AddDebugMessage("avBloomTint G: "+ avBloomTint.g);
        cLux_AddDebugMessage("avBloomTint B: "+ avBloomTint.b);
        cLux_AddDebugMessage("afBloomFalloff: "+ afBloomFalloff);
        
        cLux_AddDebugMessage("EXPOSURE: "+ cLux_GetViewport().GetToneMappingEffect().GetExposure());*/
	}
}