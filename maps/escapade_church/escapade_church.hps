#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"

//Unique escapade includes:
#include "escapade_custom/helpers/helper_music_control.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("church");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		// Preload maps
        /*{
            Map_Preload("escapade_entrance.hpm");
            Map_Preload("escapade_storage.hpm");
        }*/
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
			Entity_SetActive("debugitem_*", true);
			//Item_AddToInventory("DynamoLantern");
			//cScript_SetGlobalVarBool("scaredByStalker", true); 
		} else {
			Entity_SetActive("debugitem_*", false);
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		///////////////////////
		// Setup player body
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
		
		Music_PlayExt_Save("bethesda_foyer", true, 0.5f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
		
		SetupGenerator();
        
		// Disable lever dependant on generator
        if(Generator_GetFuelTimeLeft() == 0){
            Lever_SetStuckState("lever_portcuils", 1, true);
            
            //Enable path blocking areas
            Entity_SetActive("gate_path_area_blocker*", true);
        }
		//cScript_SetGlobalVarBool("entrance_alt_unlocked", true);
		
		if(cScript_GetGlobalVarBool("entrance_alt_unlocked")){ 
			SetupColorgrading_EntranceAlt();
		}
		
		//SetupStalkerAppearance();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
        Sound_Stop("Sound_GeneratorStop",0.f);
		
		Music_Stalker_StopDeaggroSongChecks();
        
        Music_Stop(1.0f, eMusicPrio_BgAmb);
	}
    
    bool OnCollide_CloseExitDoors(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            //SwingDoor_SetAutoClose("door_exit_*", true);
            //SwingDoor_SetOpenAmount("door_exit_entrance", 0.0f);
            cLux_AddDebugMessage("START CLOSE");
            SwingDoor_SetClosed("door_exit_*", true, true);
            Map_AddTimer("doorg", 0.05f, "OnTimer_PreventDoorGlitch");
        }
        return true;
    }
    
    
    
    void OnTimer_PreventDoorGlitch(const tString &in asTimer){
        cLux_AddDebugMessage("CLOSE");
        SwingDoor_SetOpenAmount("door_exit_*", 0.0f);
    }
    
    bool OnTrigger_Player_Transfer_Entrance(const tString &in asParent, const tString &in asChild, int alState)
	{
        if(cScript_GetGlobalVarBool("entrance_alt_unlocked") ){
            
            Game_DoMapChange("escapade_entrance_alt.hpm", "MapTransfer_EntranceChurch");
            
        }else{

            Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceChurch");
            
        }
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Generator(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_storage.hpm", "MapTransfer_StorageChurch");
		return true;
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
        if (cLux_ScriptDebugOn())
		{
			if (alAction == eAction_Test7)
			{
				Entity_SetActive("Trigger_KillGenerator", false);
				Generator_SetFuelAmount(0);
				Generator_SetRunForever(false);
				Generator_ChangeState(eGeneratorState_Off);
				cLux_AddDebugMessage("Generator Off");
			}
		
			if (alAction == eAction_Test8)
			{
				Entity_SetActive("Trigger_KillGenerator", true);
				Generator_AddFuel(2);
				Generator_ChangeState(eGeneratorState_On);
				Generator_SetRunForever(true);
				cLux_AddDebugMessage("Generator On");
			}
		}
        
		if (alAction == eAction_Flashlight)
		{
			OnAction_CustomizedLightSources();
		}
	}
	
	// Hold F for lantern, press F for lighter/crafted torch

	void OnAction_CustomizedLightSources() {
	
		tString sItemID = ItemType_GetFirstInInventory("Lighter");
		if (sItemID != "") {
			if (Item_GetHeldType(eItemHandlerHand_Left) == "DynamoLantern" && Item_IsLightSourceActive()) {
				Item_PutAway(eItemHandlerHand_Left);
			}
			sItemID = ItemType_GetFirstInInventory("Torch");
			if (sItemID != "") {
				Item_ToggleHeldItem("Torch");
			} else {
				Item_ToggleHeldItem("Lighter");
			}
		}
	}
	
	//-------------------------------------------------------
	void OnLookAt_SaveLamp(const tString &in asEntity, int alState)
	{
		tString sHint = GameDifficulty_GetSaveHint();
		if(alState == 1)
		{
			if (Hint_GetCurrentEntry() != sHint)
			{
				Hint_StopHint();
				if (GameDifficulty_GetSettingValueByID_Int(eGameDifficultySetting_SaveSystem) == eDifficultySettingValue_SaveSystem_SavingCostsFuel)
					Hint_RemoveFromGiven("Hints", sHint);
				Hint_ShowHint_Hold("Hints", sHint, true, 1.5f, true, 15.f, true, true);
			}
		}
		else
		{
			if (Hint_GetCurrentEntry() == sHint)
				Hint_StopHint();
		}
	}
	
	void OnInteract_SaveLamp(const tString &in asEntity)
	{
		////////////////
		// About to get lit!
		if (Lamp_GetLit(asEntity) == false)
			SaveGameProgress();
		else
			Map_AddTimer(asEntity, 1.f, "OnTimer_SaveGameProgress");
	}
	
	void OnTimer_SaveGameProgress(const tString&in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
		SaveGameProgress();
	}
	
	void SaveGameProgress()
	{
		/////////////////
		// Save game
		SaveRoom_SaveGame(true, true);
		
		////////////////
		// Hints
		if (Hint_GetCurrentEntry() == GameDifficulty_GetSaveHint())
			Hint_StopHint();
		
		GameStats_IncreaseEntryAmount(eHeroStats_TimesSaved);
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
 	/////////////////////////
	//// Generator
	
	void SetupGenerator()
	{
		Generator_SetupEntities("", "", "", "", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
		Generator_EndSetup();
	}
	
	void OnStateChange_Generator(int alState)
	{		
		///////////////////
		// Generator Sounds
		if (alState!=1) {
			Sound_Play("Sound_GeneratorOff", 0.f);
			Lever_SetStuckState("lever_portcuils", 1, true);
			Entity_SetActive("gate_path_area_blocker*", true);
		}
	}
	
	//////////////////// Generator end
	
	////////////////////////////////
	
	//////////////////
	/// Stalker
	//////////////////
	
	void SetupStalkerAppearance() {
		if (cScript_GetGlobalVarBool("scaredByStalker") && !cScript_GetGlobalVarBool("entrance_alt_unlocked")) {
			cLux_AddDebugMessage("ATTEMPTING TO MAKE STALKER APPEAR");cLux_AddDebugMessage("STALKER ENABLED");
            cLux_SetGodModeActivated(true);
            Map_AddTimer("Timer_DisableGodMode", 2.0f, "OnTimer_DisableGodMode");
            
            Entity_SetActive("stalker_growth_1", true);
			Music_Stalker_AddDeaggroSongTime("stalker_growth_1", cScript_GetGlobalVarString("music_to_play"), cScript_GetGlobalVarFloat("music_to_play_volume"), 8.0f);
			//Stalker_SetEmergeAllowed("stalker_growth_1", true);
			cLux_AddDebugMessage("Stalker is now ENABLED");
		}
	}
	
    bool OnCollide_StalkerDisableArea(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            cLux_AddDebugMessage("STALKER DISABLE CHECK TO SPAWN");
            Map_RemoveTimer("Timer_UpdateStalkerSpawn");
            Entity_SetActive("stalker_growth_1", false);
            Music_Stalker_StopDeaggroSongChecks(); 
        }
        
        if(alState == -1){
            cLux_AddDebugMessage("STALKER CHECK TO SPAWN ACTIVE");
            Map_AddTimer("Timer_UpdateStalkerSpawn", 0.0f, "OnTimer_UpdateStalkerSpawn");
        }
        
        return true;
    }
	///////////////
	///// Music events
	///////////////
	
	bool OnTrigger_CageStorageMusic(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1) {
			Music_PlayExt_Save("storehouse_genison_alt", true, 0.35f, 1, 4.0f, 0, eMusicPrio_SceneAmb, true);
			Entity_SetActive("Trigger_CageStorageMusic_*", false);
		}
		
		return true;
	}
	
	bool Trigger_StopCageStorageMusic(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1) {
			Music_Stop(4.0f, eMusicPrio_SceneAmb);
			Entity_SetActive("Trigger_CageStorageMusic_*", true);
            Generator_SetRunForever(false);
            cLux_AddDebugMessage("GENERATOR RUN FOREVER OFF");
		}
		return true;
	}
    
    // Generator Run Forever will stop in same areas as music
    bool OnCollide_GeneratorRunForever(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            Generator_SetRunForever(true);
            cLux_AddDebugMessage("GENERATOR RUN FOREVER ON");
        }    
        
        return true;
    }
	
	bool OnTrigger_SafeRoomMusic(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1) {
			Music_PlayExt("safe_room_escapade", true, 0.4f, 1, 3.0f, 0, eMusicPrio_OverrideAll, true);
		} else {
			Music_Stop(3.0f, eMusicPrio_OverrideAll);
		}
		return true;
	}
	
	////////////////////////////////
	
	void lever_portcuils_OnConnectionStateChange(const tString &in asEntity, int alState)
	{
		if (alState == -1) {
			if (Generator_GetFuelTimeLeft() > 0) {
                cLux_AddDebugMessage("MOVED UP");
				//SlideDoor_SetOpenAmount("castle_portcullis_1", 1.0f, false);
				MoveObject_SetState("castle_portcullis_*", 1);
				Lever_SetStuckState(asEntity, -1, true);
				//Disable path blocking areas
                Entity_SetActive("gate_path_area_blocker*", false);

			} else {
                
				Lever_SetStuckState(asEntity, 1, true);
			}
		}
        else {
            cLux_AddDebugMessage("MOVED DOWN");
            MoveObject_SetState("castle_portcullis_*", 0);
        }
	}
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
	///////////////////////////////////
	/// Key to Church Safe Room event
	
	bool CanUse_ChurchKey(const tString& in asItemType, const tString& in asItemID, const tString& in asPickedEntity) {
		return asPickedEntity == "prison_section_1" || asPickedEntity == "door_lock_keyhole_base_1";
	}
	
	bool OnUse_ChurchKey(const tString& in asItemType, const tString& in asItemID, const tString& in asTargetEntity, const tString& in asItemEntity, float afTimeElapsed, float afTimeStep) {
		
		//Sound_CreateAtEntity("", "key_use_01.snt", asTargetEntity);
		//Item_RemoveFromInventory(ItemType_GetFirstInInventory(asItemType));
		
		PlayerBody_SetArmAnimationPitch(false, true, true);
	    PlayerBody_SetArmAnimationYaw(false, true, true);
		PlayerBody_SetUnequipItemsOnCutscene(true, false);
		PlayerBody_PlayCutsceneAtEntity("tool_key_use", "AnimPos_ChurchKey", false, 0.3);
	    
		Map_AddTimer("Timer_ChuchKeyUnlock", 1.75, "OnTimer_ChuchKeyUnlock");
		Map_AddTimer("Timer_ChuchKeyRelease", 2.65, "OnTimer_ChuchKeyRelease");
		
		return false;
	}
	
	void OnTimer_ChuchKeyUnlock(const tString &in asTimer)
	{
		MovingButton_SetDisabled("door_lock_keyhole_base_1", false, true);
		//SwingDoor_SetLocked("prison_section_1", false, true);
	}
	
	//-------------------------------------------------------
		
	void OnTimer_ChuchKeyRelease(const tString &in asTimer)
	{
		tString sHeld = Item_GetHeldEntity(eItemHandlerHand_Right);
		Entity_SetActive("UsedKey", true);
		Entity_PlaceAtEntity("UsedKey", sHeld, 0.f, true);
		
		Item_RemoveFromInventory(ItemType_GetFirstInInventory("ChurchKey"), eInventoryInstance_Player, false, true);
	}
 
	void door_lock_keyhole_base_1_OnConnectionStateChange(const tString &in asEntity, int alState)
	{
		if (alState == 1) {
			MovingButton_SetSwitchedOn("door_lock_keyhole_base_1", true, true);
			SwingDoor_SetLocked("prison_section_1", true, true);
			Light_FadeTo("Light_ChurchDoor", cColor_Red, 0.5, 1.0f);
		} else {
			MovingButton_SetSwitchedOn("door_lock_keyhole_base_1", false, true);
			SwingDoor_SetLocked("prison_section_1", false, true);
			Light_FadeTo("Light_ChurchDoor", cColor_Green, 0.5, 1.0f);
			// to-do, green disappears for some reason
		}
	}
	
	//////////////////////////
	/////// Stalker lock scene
	//////////////////////////
	
	//float GenFuelTimeLeft = 0;
	bool OnTrigger_GenScareEvent(const tString &in asParent, const tString &in asChild, int alState)
	{
	  if (alState == 1) {
		    //// Did you encounter another lock event in greenhouse?
			if (!cScript_GetGlobalVarBool("survivedLockScareEvent")) {
				//GenFuelTimeLeft = Generator_GetFuelTimeLeft();
				//Generator_SetRunForever(false);
				//Generator_SetFuelAmount(0);
				Generator_ChangeState(eGeneratorState_Off);
				
				Sound_PlayGui("officer_hub/generator/off_stinger", 1.0f);
				Map_SetFogActive(false);
				Map_SetSecondaryFogActive(false);
				Entity_SetActive("gate_path_area_blocker*", true);
				
				Entity_SetInteractionDisabled("electrical_box_lever_1", false);
				Prop_SetStaticPhysics("electrical_box_lever_1", false);
			}
			if (!cScript_GetGlobalVarBool("scaredByStalker")) {
				cScript_SetGlobalVarBool("scaredByStalker", true);
				Entity_SetActive("stalker_growth_1", true);
				Music_Stalker_AddDeaggroSongTime("stalker_growth_1", cScript_GetGlobalVarString("music_to_play"), cScript_GetGlobalVarFloat("music_to_play_volume"), 11.0f);
				//Stalker_SetEmergeAllowed("stalker_growth_1", true);
				cLux_AddDebugMessage("Stalker is now ENABLED");
			}
				Stalker_GoToHole("stalker_growth_1", "GhoulHole_2", true, false, eStalkerSpeed_Run);
				Map_AddTimer("Timer_StalkerScareScene", 2.0f, "OnTimer_StalkerScareScene");
				Map_AddTimer("Timer_StalkerScareScene2", 4.0f, "OnTimer_StalkerScareScene2");
				Map_AddTimer("Timer_StalkerScareScene3", 120.0f, "OnTimer_StalkerScareScene3");
			return false;
	  }
	  return true;
	}
	
	void OnTimer_StalkerScareScene(const tString &in asTimer) {
		Stalker_EmergeFromHole("stalker_growth_1", "GhoulHole_1", true);
		
	}
	
	void OnTimer_StalkerScareScene2(const tString &in asTimer) {
		Agent_RevealPlayerPosition("stalker_growth_1", false);
	}
	
	void OnTimer_StalkerScareScene3(const tString &in asTimer) {
		cLux_AddDebugMessage("Stalker couldn't find you, gonna open the path/retreat");
		if (Stalker_GetIsInsideWalls("stalker_growth_1")) {
			Stalker_EmergeFromHole("stalker_growth_1", "GhoulHole_4", true);
			Agent_RevealPlayerPosition("stalker_growth_1", false);
		} else {
			Stalker_GoToHole("stalker_growth_1", "GhoulHole_4", true, false, eStalkerSpeed_Run);
		}
	}
	
	void electrical_box_lever_1_OnConnectionStateChange(const tString &in asEntity, int alState)
	{
		if (alState == 1) {
			if (Map_TimerExists("Timer_StalkerScareScene3"))
			Map_RemoveTimer("Timer_StalkerScareScene3");
			
			/*if (GenFuelTimeLeft < 1) {
				Generator_SetFuelAmount(1);
				
			} else {
				Generator_SetFuelAmount(GenFuelTimeLeft);
			}*/
			//Generator_SetRunForever(true);
			Generator_ChangeState(eGeneratorState_On);
			
			Sound_PlayGui("level_entity_shared/levers/thatre_lever/lever_start", 1.0f);
			Sound_Play("Sound_GeneratorStart", 0);
			Map_SetFogActive(true);
			Map_SetSecondaryFogActive(true);
			
			Entity_SetInteractionDisabled("electrical_box_lever_1", true);
			Prop_SetStaticPhysics("electrical_box_lever_1", true);
			
			Lever_SetStuckState("lever_portcuils", -1, true);
			Entity_SetActive("gate_path_area_blocker*", false);
			
			cLux_AddDebugMessage("You can escape, doors are open");
			cScript_SetGlobalVarBool("survivedLockScareEvent", true);
		}
	}
	 
	//} END SCENE X 
	
	void SetupColorgrading_EntranceAlt() {
        //Debug: test enable entrance_alt
        //cScript_SetGlobalVarBool("entrance_alt_unlocked", true);

            // Set ToneMapping values to match entrance_alt
            float afKey = 0.1f;
            float afGammaCorrection = 0.5f;
            float afFilmGrainIntensity = 1.0f;
            float afBrightPass = 0.75f;
            float afBloomWidth = 128.0;
            cColor avBloomTint;
            avBloomTint.a = 1.0f;
            avBloomTint.r = 1.0f;
            avBloomTint.g = 1.0f;
            avBloomTint.b = 1.0f;
            float afBloomFalloff = 0.5f;
            cLux_GetViewport().GetToneMappingEffect().SetParams(afKey, afGammaCorrection, afFilmGrainIntensity, afBrightPass, afBloomWidth, avBloomTint, afBloomFalloff);
            cLux_GetViewport().GetToneMappingEffect().SetGradingTexture(1, "bunker_prototype_01.dds", 1.0f);
            
            cLux_GetViewport().GetToneMappingEffect().SetActive(true);
            cLux_GetViewport().GetToneMappingEffect().SetColorGradingActive(true);
            cLux_GetViewport().GetToneMappingEffect().FadeWindowExposure(0.f, 3.25f);
            cLux_GetViewport().GetToneMappingEffect().SetBloomActive(true);
            
            cLux_AddDebugMessage("CHANGED TONEMAPPING");
            
            //Fog change

			cColor fogColor;
			fogColor.a = 1.0f;
			fogColor.r = 0.193f;
			fogColor.b = 0.263f;
			fogColor.g = 0.179f;
			
			cColor secondaryFogColor;
			secondaryFogColor.a = 1.0f;
			secondaryFogColor.r = 0.204f;
			secondaryFogColor.g = 0.081f;
			secondaryFogColor.b = 0.051f;
			
			Map_SetFogProperties(0.f, 100.0f, 2.0f, fogColor, false);
			Map_SetSecondaryFogProperties(10.0f, 50.0f, 1.5f, secondaryFogColor);
        
        
        cLux_GetViewport().GetToneMappingEffect().GetParams(afKey, afGammaCorrection, afFilmGrainIntensity, afBrightPass, afBloomWidth, avBloomTint, afBloomFalloff);
        
        /*cLux_AddDebugMessage("afKey: "+ afKey);
        cLux_AddDebugMessage("afBloomFalloff: "+ afBloomFalloff);
        cLux_AddDebugMessage("afFilmGrainIntensity: "+ afFilmGrainIntensity);
        cLux_AddDebugMessage("afBrightPass: "+ afBrightPass);
        cLux_AddDebugMessage("afBloomWidth: "+ afBloomWidth);
        cLux_AddDebugMessage("avBloomTint A: "+ avBloomTint.a);
        cLux_AddDebugMessage("avBloomTint R: "+ avBloomTint.r);
        cLux_AddDebugMessage("avBloomTint G: "+ avBloomTint.g);
        cLux_AddDebugMessage("avBloomTint B: "+ avBloomTint.b);
        cLux_AddDebugMessage("afBloomFalloff: "+ afBloomFalloff);
        
        cLux_AddDebugMessage("EXPOSURE: "+ cLux_GetViewport().GetToneMappingEffect().GetExposure());*/
	}
}