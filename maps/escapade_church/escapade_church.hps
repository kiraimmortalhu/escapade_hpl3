#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("xx-xx-dummy-level");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		// Preload maps
        {
            Map_Preload("escapade_entrance.hpm");
            Map_Preload("escapade_storage.hpm");
        }
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
			Entity_SetActive("debugitem_*", true);
			Item_AddToInventory("DynamoLantern");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		///////////////////////
		// Setup player body
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
		
		SetupGenerator();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}
    
    bool OnCollide_CloseExitDoors(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            //SwingDoor_SetAutoClose("door_exit_*", true);
            //SwingDoor_SetOpenAmount("door_exit_entrance", 0.0f);
            cLux_AddDebugMessage("START CLOSE");
            SwingDoor_SetClosed("door_exit_*", true, true);
            Map_AddTimer("doorg", 0.05f, "OnTimer_PreventDoorGlitch");
        }
        return true;
    }
    
    void OnTimer_PreventDoorGlitch(const tString &in asTimer){
        cLux_AddDebugMessage("CLOSE");
        SwingDoor_SetOpenAmount("door_exit_*", 0.0f);
    }
    
    bool OnTrigger_Player_Transfer_Entrance(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceChurch");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Generator(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_storage.hpm", "MapTransfer_StorageChurch");
		return true;
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
		if (alAction == eAction_Test1)
		{
		}
	}
	//-------------------------------------------------------
	void OnLookAt_SaveLamp(const tString &in asEntity, int alState)
	{
		tString sHint = GameDifficulty_GetSaveHint();
		if(alState == 1)
		{
			if (Hint_GetCurrentEntry() != sHint)
			{
				Hint_StopHint();
				if (GameDifficulty_GetSettingValueByID_Int(eGameDifficultySetting_SaveSystem) == eDifficultySettingValue_SaveSystem_SavingCostsFuel)
					Hint_RemoveFromGiven("Hints", sHint);
				Hint_ShowHint_Hold("Hints", sHint, true, 1.5f, true, 15.f, true, true);
			}
		}
		else
		{
			if (Hint_GetCurrentEntry() == sHint)
				Hint_StopHint();
		}
	}
	
	void OnInteract_SaveLamp(const tString &in asEntity)
	{
		////////////////
		// About to get lit!
		if (Lamp_GetLit(asEntity) == false)
			SaveGameProgress();
		else
			Map_AddTimer(asEntity, 1.f, "OnTimer_SaveGameProgress");
	}
	
	void OnTimer_SaveGameProgress(const tString&in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
		SaveGameProgress();
	}
	
	void SaveGameProgress()
	{
		/////////////////
		// Save game
		SaveRoom_SaveGame(true, true);
		
		////////////////
		// Hints
		if (Hint_GetCurrentEntry() == GameDifficulty_GetSaveHint())
			Hint_StopHint();
		
		GameStats_IncreaseEntryAmount(eHeroStats_TimesSaved);
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
 	/////////////////////////
	//// Generator
	
	void SetupGenerator()
	{
		Generator_SetupEntities("", "", "", "", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
		Generator_EndSetup();
	}
	
	void OnStateChange_Generator(int alState)
	{		
		///////////////////
		// Generator Sounds
		if (alState!=1)
			Sound_Play("Sound_GeneratorOff", 0.f);		
	}
	
	//////////////////// Generator end
	
	///////////////////////////////////
	/// Key to Church Safe Room event
	
	bool CanUse_ChurchKey(const tString& in asItemType, const tString& in asItemID, const tString& in asPickedEntity) {
		return asPickedEntity == "prison_section_1" || asPickedEntity == "door_lock_keyhole_base_1";
	}
	
	bool OnUse_ChurchKey(const tString& in asItemType, const tString& in asItemID, const tString& in asTargetEntity, const tString& in asItemEntity, float afTimeElapsed, float afTimeStep) {
		
		//Sound_CreateAtEntity("", "key_use_01.snt", asTargetEntity);
		//Item_RemoveFromInventory(ItemType_GetFirstInInventory(asItemType));
		
		PlayerBody_SetArmAnimationPitch(false, true, true);
	    PlayerBody_SetArmAnimationYaw(false, true, true);
		PlayerBody_SetUnequipItemsOnCutscene(true, false);
		PlayerBody_PlayCutsceneAtEntity("tool_key_use", "AnimPos_ChurchKey", false, 0.3);
	    
		Map_AddTimer("Timer_ChuchKeyUnlock", 1.75, "OnTimer_ChuchKeyUnlock");
		Map_AddTimer("Timer_ChuchKeyRelease", 2.65, "OnTimer_ChuchKeyRelease");
		
		return false;
	}
	
	void OnTimer_ChuchKeyUnlock(const tString &in asTimer)
	{
		MovingButton_SetDisabled("door_lock_keyhole_base_1", false, true);
		//SwingDoor_SetLocked("prison_section_1", false, true);
	}
	
	//-------------------------------------------------------
		
	void OnTimer_ChuchKeyRelease(const tString &in asTimer)
	{
		tString sHeld = Item_GetHeldEntity(eItemHandlerHand_Right);
		Entity_SetActive("UsedKey", true);
		Entity_PlaceAtEntity("UsedKey", sHeld, 0.f, true);
		
		Item_RemoveFromInventory(ItemType_GetFirstInInventory("ChurchKey"), eInventoryInstance_Player, false, true);
	}
 
	void door_lock_keyhole_base_1_OnConnectionStateChange(const tString &in asEntity, int alState)
	{
		if (alState == 1) {
			MovingButton_SetSwitchedOn("door_lock_keyhole_base_1", true, true);
			SwingDoor_SetLocked("prison_section_1", true, true);
			Light_FadeTo("Light_ChurchDoor", cColor_Red, 0.5, 1.0f);
		} else {
			MovingButton_SetSwitchedOn("door_lock_keyhole_base_1", false, true);
			SwingDoor_SetLocked("prison_section_1", false, true);
			Light_FadeTo("Light_ChurchDoor", cColor_Green, 0.5, 1.0f);
			// to-do, green disappears for some reason
		}
	}
	
	////////////////////////////////
	
	void lever_portcuils_OnConnectionStateChange(const tString &in asEntity, int alState)
	{
		if (alState == -1) {
			if (Generator_GetFuelTimeLeft() > 0) {
				//SlideDoor_SetOpenAmount("castle_portcullis_1", 1.0f, false);
				MoveObject_SetState("castle_portcullis_*", 1);
				Lever_SetStuckState(asEntity, -1, true);
			} else {
				Lever_SetStuckState(asEntity, 1, true);
			}
		}
	}
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		/*Put any functions that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE X 
}