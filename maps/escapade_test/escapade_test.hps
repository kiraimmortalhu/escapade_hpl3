#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"
#include "helpers/helper_rotation.hps"


#include "helpers/helper_modules.hps"
#include "base/AchievementHandler_Types.hps"
#include "base/RichPresenceHandler_Types.hps"
#include "custom/modules/ModuleInterfaces_Custom.hps"
#include "helpers/helper_components_custom.hps"
#include "helpers/helper_modules_custom.hps"
#include "helpers/helper_player_custom.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
    int gfCombinationTest = Randomizer_GetCode("GeneratorLock");
    int gfDogtagCodeTest = Randomizer_GetCode("debugitem_dogtag_3397");
    int gfAuclairTest = Randomizer_GetCode("Auclair");
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("xx-xx-dummy-level");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
		
		/////////////////
		// Preload gui
		//ImGui_PreloadImage("some_image");

		///////////////
		// Preload particles
		//ParticleSystem_Preload("some_particle.ps");

		//////////////
		// Preload screen effects
		//Material_Preload("some_material.mat");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		//cScript_SetGlobalArgInt(0, cMath_RandRectl(1000, 9999));
        
        //Set random combination in global variable to be used
        cScript_SetGlobalVarInt("CombinationTest", cMath_RandRectl(0, 9999));
        
        //Set these in OnStart on the map containing either the combination or dogtag
        Dogtag_SetCombination("debugitem_dogtag_3397", cScript_GetGlobalVarInt("CombinationTest"));
        CombinationLock_SetCombination("GeneratorLock", cScript_GetGlobalVarInt("CombinationTest"));
        
        //Set these in OnStart in a map containing the fixed combination locker or dogtag
        Dogtag_SetCombination("debugitem_dogtag_FIXEDCOMBINATION", 1234);
        CombinationLock_SetCombination("GeneratorLock_FixedCombination", 1234);
        
        
        
		//Sound_FadeGlobalVolume(1,3);
		// tweak this later so we don't hear door sounds and such on load
		
		Item_SetCurrentSlotsCount(15);
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
			Item_AddToInventory("DynamoLantern");
			//StalkerActivationHandler();
		}
	}
    
	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		// this is needed for level transitions since apparently it deactivates the body
		if (PlayerBody_IsActive() == false)
		{
			// this order is needed so veins are also shown
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
		PlayerBody_SetRenderLayers(0, 1);
        //PlayerHands_SetVisible(false);
        //iLuxEntity@ pRatK = Map_GetEntity("dark_world_rat_black_1");
        //int hel = pRatK.GetHealth();
        //Map_GetEntity("dark_world_rat_black_1").
		SetupGenerator();
        
        Lever_SetStuckState("PowerSwitch_1", -1, true);
        Lever_SetStuckState("PowerSwitch_2", -1, true);
        Lever_SetStuckState("PowerSwitch_3", -1, true);
        
        
        //Code test
        cLux_AddDebugMessage("RANDOMIZER CODE: "+cScript_GetGlobalVarInt("CombinationTest"));
        
        /*
        cScript_SetGlobalArgInt(0, cMath_RandRectl(0, 9999));
        cLux_AddDebugMessage("TEST: "+cScript_GetGlobalArgInt(0));
        Dogtag_SetCombination("debugitem_dogtag_3397", cScript_GetGlobalArgInt(0));
        CombinationLock_SetCombination("GeneratorLock", cScript_GetGlobalArgInt(0));
        */
        
        
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		if (cLux_ScriptDebugOn())
		{
			if (alAction == eAction_Test7)
			{
				Entity_SetActive("Trigger_KillGenerator", false);
				Generator_SetFuelAmount(0);
				Generator_SetRunForever(false);
				Generator_ChangeState(eGeneratorState_Off);
				cLux_AddDebugMessage("Generator Off");
			}
		
			if (alAction == eAction_Test8)
			{
				Entity_SetActive("Trigger_KillGenerator", true);
				Generator_AddFuel(2);
				Generator_ChangeState(eGeneratorState_On);
				Generator_SetRunForever(true);
				cLux_AddDebugMessage("Generator On");
			}
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
    void OnInteract_PowerSwitch(const tString &in asEntity)
    {
        Map_AddTimer("lightend", 6.0f, "LightEnd");
    }
    void LightEnd(const tString &in asTimer){
        Entity_SetInteractionDisabled("PowerSwitch_1", true);
        Entity_SetInteractionDisabled("PowerSwitch_2", true);
        Entity_SetInteractionDisabled("PowerSwitch_3", true);
        Lever_SetStuckState("PowerSwitch_1", -1, true);
        Lever_SetStuckState("PowerSwitch_2", -1, true);
        Lever_SetStuckState("PowerSwitch_3", -1, true);
        
        Map_AddTimer("lightend2", 4.0f, "LightEnd2");
        
    }
    void LightEnd2(const tString &in asTimer){
        Entity_SetActive("Trigger_KillGenerator", false);
        Generator_SetFuelAmount(0);
        Generator_SetRunForever(false);
        Generator_ChangeState(eGeneratorState_Off);
        cLux_AddDebugMessage("Generator Off");
                
        Entity_SetActive("stalker_2", true);
        
    }
    
    void OnInteract_ChangeMapDebugTest(const tString &in asEntity)
    {
        Map_ChangeMap("escapade_underground.hpm", "Start_Test1", "", "");
        
    }
    
	bool OnCollide_ActivateStalker(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1) {
			Entity_SetActive("stalker_1", true);
			return false;
		}
		return true;
	}
	
	void revolver_pickup_1_OnPlayerInteract(const tString &in asEntity)
	{
        cLux_AddDebugMessage("Gun");
		Item_AddManyToInventory("Ammunition",14);
	}
	
	void trench_shotgun_shotgunner_pickup_1_OnPlayerInteract(const tString &in asEntity)
	{
        cLux_AddDebugMessage("Shotgun");
		Item_AddManyToInventory("ShotgunAmmunition",4);
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// GENERATOR 
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	bool mbHasAddedFuel = true;
	tString msUsedFuelItemID = "";
	tString msUsedFuelItemType = "";
	
	//-------------------------------------------------------
	
	void SetupGenerator()
	{
		Generator_SetupEntities("Generator", "Generator_PowerLamp", "Generator_Lever", "Generator_FuelGauge", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
        
        Generator_AddPowerSwitch("PowerSwitch_1", "", "", "Lamp_PowerSwitch_1_*", true);
        Generator_AddPowerSwitch("PowerSwitch_2", "", "", "Lamp_PowerSwitch_2_*", true);
        Generator_AddPowerSwitch("PowerSwitch_3", "", "", "Lamp_PowerSwitch_3_*", true);
		//Generator_AddPowerSwitch("PowerSwitch_Hub_1", "", "", "Lamp_PowerSwitch_1_*", true);
		//Generator_AddPowerSwitch("PowerSwitch_Hub_2", "", "", "Lamp_PowerSwitch_2_*", false);
		Generator_EndSetup();
	}
	
	//-------------------------------------------------------
	
	void OnLookAt_FuelHatch(const tString &in asEntity, int alState)
	{
		Entity_SetPlayerLookAtCallback(asEntity, "OnLookAt_FuelHatchAutoEquip", false, false, false, 2);
	}
	
	//-------------------------------------------------------
	
	void OnLookAt_FuelHatchAutoEquip(const tString &in asEntity, int alState)
	{
		if (alState == 1 && mbHasAddedFuel)
			OnTimer_AutoEquipFuel("");
		else
			Map_RemoveTimer("OnTimer_AutoEquipFuel");
	}
 
	//-------------------------------------------------------
	
	void OnTimer_AutoEquipFuel(const tString &in asTimer)
	{
		if (Item_IsHeld(eItemHandlerHand_Right))
		{
			Map_AddTimer("OnTimer_AutoEquipFuel", 0.5, "OnTimer_AutoEquipFuel");
			return;
		}
		
		tString sFuelType = "";
		if (ItemType_GetCountInInventory("Fuel") > 0)
		{
			sFuelType = "Fuel";
		}
		else if (ItemType_GetCountInInventory("FuelBottle") > 0)
		{
			sFuelType = "FuelBottle";
		}
		
		if (sFuelType == "") return;
		
		Item_Equip(ItemType_GetFirstInInventory(sFuelType));
	}
		
	//-------------------------------------------------------
		 
	bool CanUse_Fuel(const tString &in asItemType, const tString &in asItemID, const tString &in asPickedEntity)
	{
		return asPickedEntity == "Trigger_FuelHatch";
	}
		
	//-------------------------------------------------------
		 
	bool CanUse_FuelBottle(const tString &in asItemType, const tString &in asItemID, const tString &in asPickedEntity)
	{
		return CanUse_Fuel(asItemType, asItemID, asPickedEntity);
	}
		
	//-------------------------------------------------------
	
	bool OnUse_FuelBottle(const tString &in asItemType, const tString &in asItemID, const tString &in asTargetEntity, const tString &in asItemEntity, float afTimeElapsed, float afTimeStep)
	{
		return OnUse_Fuel(asItemType, asItemID, asTargetEntity, asItemEntity, afTimeElapsed, afTimeStep);
	}
	
    bool OnCollide_Test_Generator(const tString &in asParent, const tString &in asChild, int alState)
    {
        /*
        float fRYRotation = cMath_ToDeg(cMath_ACos(Map_GetEntity("Generator").GetBody(0).GetWorldMatrix().GetRight().y));
        float fRXRotation = cMath_ToDeg(cMath_ACos(Map_GetEntity("Generator").GetBody(0).GetWorldMatrix().GetRight().x));
        float fRZRotation = cMath_ToDeg(cMath_ACos(Map_GetEntity("Generator").GetBody(0).GetWorldMatrix().GetRight().z));
        
        cLux_AddDebugMessage("The entity is right by - "+fRYRotation);
        cLux_AddDebugMessage("The entity is right by - "+fRXRotation);
        cLux_AddDebugMessage("The entity is right by - "+fRZRotation);
        
        float fWYRotation = cMath_ToDeg(cMath_ACos(Map_GetEntity("Generator").GetBody(0).GetWorldMatrix().GetForward().y));
        float fWXRotation = cMath_ToDeg(cMath_ACos(Map_GetEntity("Generator").GetBody(0).GetWorldMatrix().GetForward().x));
        float fWZRotation = cMath_ToDeg(cMath_ACos(Map_GetEntity("Generator").GetBody(0).GetWorldMatrix().GetForward().z));
        
        cLux_AddDebugMessage("The entity is forward by - "+fWYRotation);
        cLux_AddDebugMessage("The entity is forward by - "+fWXRotation);
        cLux_AddDebugMessage("The entity is forward by - "+fWZRotation);
        
        float fUYRotation = cMath_ToDeg(cMath_ACos(Map_GetEntity("Generator").GetBody(0).GetWorldMatrix().GetUp().y));
        float fUXRotation = cMath_ToDeg(cMath_ACos(Map_GetEntity("Generator").GetBody(0).GetWorldMatrix().GetUp().x));
        float fUZRotation = cMath_ToDeg(cMath_ACos(Map_GetEntity("Generator").GetBody(0).GetWorldMatrix().GetUp().z));
        
        
        cLux_AddDebugMessage("The entity is up by - "+fUYRotation);
        cLux_AddDebugMessage("The entity is up by - "+fUXRotation);
        cLux_AddDebugMessage("The entity is up by - "+fUZRotation);
        */
        /*
        //Acurate to editor:
        cVector3f vGen = Entity_GetRotationEuler("Generator");
        cLux_AddDebugMessage("ROTATION X: "+ cMath_ToDeg(vGen.x));
        cLux_AddDebugMessage("ROTATION Y: "+ cMath_ToDeg(vGen.y));
        cLux_AddDebugMessage("ROTATION Z: "+ cMath_ToDeg(vGen.z));
        */
        /*////////
        cVector3f vGen = Entity_GetRotationEuler("Generator");
        cLux_AddDebugMessage("ROTATION X: "+ cMath_Abs(cMath_ToDeg(vGen.x)));
        cLux_AddDebugMessage("ROTATION Y: "+ cMath_ToDeg(vGen.y));
        cLux_AddDebugMessage("ROTATION Z: "+ cMath_Abs(cMath_ToDeg(vGen.z)));
        *////////
        /*
        cLux_AddDebugMessage("GENERATOR X: "+Map_GetEntity("Generator").GetMainBody().GetLocalPosition().x);
		cLux_AddDebugMessage("GENERATOR Y: "+Map_GetEntity("Generator").GetMainBody().GetLocalPosition().y);
		cLux_AddDebugMessage("GENERATOR Z: "+Map_GetEntity("Generator").GetMainBody().GetLocalPosition().z);
        
         */
        /*
        cLux_AddDebugMessage("GENERATOR X: "+Map_GetEntity("Generator").GetMainBody().GetWorldPosition().x);
		cLux_AddDebugMessage("GENERATOR Y: "+Map_GetEntity("Generator").GetMainBody().GetWorldPosition().y);
		cLux_AddDebugMessage("GENERATOR Z: "+Map_GetEntity("Generator").GetMainBody().GetWorldPosition().z);
        */
        
         
        /*
        cLuxAgent@ pAgent = cLux_ToAgent(cLux_GetCurrentMap().GetEntityByName("Generator"));
        if (pAgent is null) cLux_AddDebugMessage("NOT AGENT");
        */
        /*
        //Player coordinates:
        cLux_AddDebugMessage("PLAYER X: "+Map_GetEntity("player").GetMainBody().GetWorldPosition().x);
        cLux_AddDebugMessage("PLAYER Y: "+Map_GetEntity("player").GetMainBody().GetWorldPosition().y);
        cLux_AddDebugMessage("PLAYER Z: "+Map_GetEntity("player").GetMainBody().GetWorldPosition().z);
        */
        
        /*//////
        float fAngle;
        //cVector3f vGen = Entity_GetRotationEuler("Generator");
        fAngle = vGen.y;
        if(cMath_Round(cMath_ToDeg(vGen.y)) >= -5 && cMath_Round(cMath_ToDeg(vGen.y)) < 90 &&
            cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) < 190 && 
            cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z))) >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z))) < 190){
            
            fAngle = cMath_Pi;
            cLux_AddDebugMessage("ADJUSTING ANGLE: "+ cMath_ToDeg(fAngle));
        }
        
        cLux_AddDebugMessage("FINAL ANGLE: "+ cMath_ToDeg(fAngle));
        *////////
        //cLux_AddDebugMessage("RANDOMIZER CODE: "+gfCombinationTest);
        //cLux_AddDebugMessage("DOGTAG CODE: "+gfDogtagCodeTest);
        //cLux_AddDebugMessage("AUCLAIR CODE: "+gfAuclairTest);
        /*
        cScript_SetGlobalArgInt(0, cMath_RandRectl(0, 9999));
        cLux_AddDebugMessage("TEST: "+cScript_GetGlobalArgInt(0));
        Dogtag_SetCombination("debugitem_dogtag_3397", cScript_GetGlobalArgInt(0));
        CombinationLock_SetCombination("GeneratorLock", cScript_GetGlobalArgInt(0));
         */
        cLux_AddDebugMessage("TEST: "+cScript_GetGlobalVarInt("CombinationTest"));
        //ModEvent_AddListener(0);
        //ModEvent_Trigger(eModEvent_Hurt_Major);
        //Player_SetGravityEnabled(false);
        //Player_SetGravity(cVector3f(1, 0, 0));
        
        
        cVector3f pGrav;
        pGrav = Player_GetGravity();
        Player_SetGravity(cVector3f(0, 12, 0));
        cLux_AddDebugMessage("GRAV X: "+ pGrav.x);
        cLux_AddDebugMessage("GRAV Y: "+ pGrav.y);
        cLux_AddDebugMessage("GRAV Z: "+ pGrav.z);
        //cLux_AddDebugMessage("TEST: "+cMath_RandRectl(1000, 9999));
        
        
        return true;
    }
    
    bool OnCollide_ChangeGrav(const tString &in asParent, const tString &in asChild, int alState)
    {
        Player_SetGravity(cVector3f(0, -12, 0));
        return true;
    }
    
	//-------------------------------------------------------
	
	bool OnUse_Fuel(const tString &in asItemType, const tString &in asItemID, const tString &in asTargetEntity, const tString &in asItemEntity, float afTimeElapsed, float afTimeStep)
	{
		/////////////////
		// Check fullness
		if (Generator_GetFullness() > Generator_GetFullnessInteractLimit())
		{
			Hint_ShowPrompt("Hints", "HintGeneratorFull", false, 1.f, false);
			Item_StopUsing(eItemHandlerHand_Right);
			return true;
		}
		
		/////////////////
		// Play anims
		tString sPlayerAnim = asItemType == "Fuel" ? "player_generator_refuelling_cannister" : "player_generator_refuelling_bottle";
		
		// calculating position and angle for the fuel anim
		
		//cVector3f vPos(17.000f, -3.0f, -10.25f);
		// how about not a fix fking position but we actually calculate where the gen is
		
        /*
		float GenPosX = Map_GetEntity("Generator").GetPosition().x;
		float GenPosY = Map_GetEntity("Generator").GetPosition().y;
		float GenPosZ = Map_GetEntity("Generator").GetPosition().z;
		cVector3f vPos(GenPosX,GenPosY,GenPosZ);
        
        
		cLux_AddDebugMessage("vPos X: "+vPos.x);
		cLux_AddDebugMessage("vPos Z: "+vPos.z);
        
        float fAngle = 0.0f;
        */
        cLux_AddDebugMessage("GENERATOR X: "+Map_GetEntity("Generator").GetMainBody().GetLocalPosition().x);
		cLux_AddDebugMessage("GENERATOR Y: "+Map_GetEntity("Generator").GetMainBody().GetLocalPosition().y);
		cLux_AddDebugMessage("GENERATOR Z: "+Map_GetEntity("Generator").GetMainBody().GetLocalPosition().z);
        
        cVector3f vPos;
        float fAngle;
		CalculateFuelCutscenePosAngle(vPos, fAngle);
		
		// cutscene details
		PlayerBody_SetUnequipItemsOnCutscene(true, false);
		PlayerBody_PlayCutsceneAnimation(sPlayerAnim, false, 0.3f, "OnAnimEnd_RefillGenerator", 1.f, 0.f, true, vPos, fAngle);
		PlayerBody_SetArmAnimationPitch(true, true, asItemType == "Fuel");
		PlayerBody_SetArmAnimationYaw(false, true, true);
		PlayerBody_SetCutsceneMaxPitch(0.f);
		PlayerBody_SetCutsceneMaxYaw(0.f);
		
		if (asItemType == "Fuel")
			Entity_PlayAnimation(Item_GetHeldEntity(eItemHandlerHand_Right), "fuel_cannister_refuelling_generator", 0.3f, false);
		if (asItemType == "FuelBottle")
			Map_AddTimer("Timer_HideFuelBottleCork", 0.99f, "OnTimer_HideFuelBottleCork");
		
		/////////////////
		// Add fuel
		Map_AddTimer("Timer_AddGeneratorFuel", 1.f, "OnTimer_AddGeneratorFuel");	
		
		/////////////////
		// Store item data
		msUsedFuelItemID = asItemID;
		msUsedFuelItemType = asItemType;
		return false;
	}
	
	void CalculateFuelCutscenePosAngle(cVector3f &out vPos, float &out fAngle) {
		//Generator position coordinates
		vPos.x = Map_GetEntity("Generator").GetMainBody().GetWorldPosition().x;
		vPos.y = Map_GetEntity("Generator").GetMainBody().GetWorldPosition().y;
		vPos.z = Map_GetEntity("Generator").GetMainBody().GetWorldPosition().z;
		
        //Get generator rotation vector (not entirely accurate to the values seen in level editor. Example: in level editor -> (0, 180, 0) while this vector gets -> (180, 0, 180) which is equivalent)
        cVector3f vGen = Entity_GetRotationEuler("Generator");
        cLux_AddDebugMessage("ROUNDED UP ANGLE: "+ cMath_Round(cMath_ToDeg(vGen.y)));
        
        //Checks for approximated Y rotation: 0, 90, 180, 270. Then apply the proper coordinates offset.
        if(cMath_Round(cMath_ToDeg(vGen.y)) >= 0 && cMath_Round(cMath_ToDeg(vGen.y)) < 90 && 
        cMath_Round(cMath_ToDeg(vGen.x)) >= 0 && cMath_Round(cMath_ToDeg(vGen.x)) < 90 && 
        cMath_Round(cMath_ToDeg(vGen.z)) >= 0 && cMath_Round(cMath_ToDeg(vGen.z)) < 90){
            //Y rotation: 0
            cLux_AddDebugMessage("0");
            vPos.x = vPos.x - 0.664f;
            vPos.y = vPos.y - 1.127f;
            vPos.z = vPos.z + 0.974f;
        }
        else if(cMath_Round(cMath_ToDeg(vGen.y)) >= 90 && cMath_Round(cMath_ToDeg(vGen.y)) < 180){
            //Y rotation: 90
            cLux_AddDebugMessage("90");
            vPos.x = vPos.x + 0.974f;
            vPos.y = vPos.y - 1.127f;
            vPos.z = vPos.z + 0.664f;
        }
        else if(    (cMath_Round(cMath_ToDeg(vGen.y)) >= 175 && cMath_Round(cMath_ToDeg(vGen.y)) < 265) || 
        (cMath_Round(cMath_ToDeg(vGen.y)) >= -5 && cMath_Round(cMath_ToDeg(vGen.y)) < 90 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) < 190 && 
        cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z)))  >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z))) < 190)         ){
            //Y rotation: 180
            cLux_AddDebugMessage("180");
            vPos.x = vPos.x + 0.664f;
            vPos.y = vPos.y - 1.127f;
            vPos.z = vPos.z - 0.974f;
        }
        else if(cMath_Round(cMath_ToDeg(vGen.y)) >= -95 && cMath_Round(cMath_ToDeg(vGen.y)) < 5.f){
            //Y rotation: 270
            cLux_AddDebugMessage("270");
            vPos.x = vPos.x - 0.974f;
            vPos.y = vPos.y - 1.127f;
            vPos.z = vPos.z - 0.664f;
        }
        
        
		cLux_AddDebugMessage("vPos X: "+vPos.x);
		cLux_AddDebugMessage("vPos Y: "+vPos.y);
		cLux_AddDebugMessage("vPos Z: "+vPos.z);
        
        
        
        //fAngle = cMath_PiDiv2;
        
        fAngle = vGen.y;
        if(cMath_Round(cMath_ToDeg(vGen.y)) >= -5 && cMath_Round(cMath_ToDeg(vGen.y)) < 90 &&
        cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) < 190 && 
        cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z))) >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z))) < 190){
            
            fAngle = cMath_Pi;
            cLux_AddDebugMessage("ADJUSTING ANGLE: "+ cMath_ToDeg(fAngle));
        }
        
        cLux_AddDebugMessage("FINAL ANGLE: "+ cMath_ToDeg(fAngle));
		
		// to-do, make this working for all Y rotations of the gen
	}
	
	//-------------------------------------------------------
	
	void OnTimer_HideFuelBottleCork(const tString &in asTimer)
	{
		iLuxEntity@ pEnt = Map_GetEntity(Item_GetHeldEntity(eItemHandlerHand_Right), eLuxEntityType_Prop);
		cSubMeshEntity@ pSubMesh = pEnt !is null ? pEnt.GetMeshEntity().GetSubMeshEntityName("cork") : null;
		
		if (pEnt is null) return;
		if (pSubMesh is null) return;
		
		pSubMesh.SetVisible(false);
	}
	
	//-------------------------------------------------------
	
	void OnTimer_AddGeneratorFuel(const tString &in asTimer)
	{
		Generator_AddFuel(1);
		mbHasAddedFuel = true;
		GameStats_IncreaseEntryAmount(eHeroStats_GeneratorRefills);
		Sound_CreateAtEntity("Sound_FuelRefill", "officer_hub/generator/fuel_refill", "Trigger_FuelHatch");
	}
	
	//-------------------------------------------------------
	
	void OnAnimEnd_RefillGenerator(const tString &in asAnim)
	{
		Player_SetCrouching(false, true, true);
		
		/////////////////////
		// Remove from inventory if any
		Item_RemoveFromInventory(msUsedFuelItemID, eInventoryInstance_Player, false, true);
		
		bool bEquip = false;
		if (ItemType_GetCountInInventory(msUsedFuelItemType) > 0)
		{
			bEquip = true;
			Item_Equip(ItemType_GetFirstInInventory(msUsedFuelItemType));
		}
		else
		{
			tString sOtherType = msUsedFuelItemType == "Fuel" ? "FuelBottle" : "Fuel";
			
			if (ItemType_GetCountInInventory(sOtherType) > 0)
			{
				bEquip = true;
				Item_Equip(ItemType_GetFirstInInventory(sOtherType));
			}
		}
		
		if (bEquip == false)
		{
			PlayerBody_SetArmAnimationPitch(false, true, true);
			PlayerBody_SetArmAnimationYaw(false, true, true);
		}
	}
	
	//-------------------------------------------------------
	
	void OnConnectionState_PowerSwitch(const tString &in asEntity, int alState)
	{
        cLux_AddDebugMessage(asEntity);
		if (alState == 0) return;
		if (cLux_GetCurrentMap() is null) return;
		if (cLux_IsChangingMap()) return;
		if (Generator_GetIsSetupDone() == false) return;
		cLux_AddDebugMessage("POWERSWITCH");
		Generator_SetPowerSwitchOn(asEntity, alState == 1);
	}
	
	//-------------------------------------------------------
	
	//} END GENERATOR
	
	
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		/*Put any functions that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE X 
}