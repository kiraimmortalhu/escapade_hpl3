#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("xx-xx-dummy-level");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
	}
	
	//-------------------------------------------------------
    
	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		// Preload maps
        {
            Map_Preload("escapade_storage.hpm");
            Map_Preload("escapade_greenhouse.hpm");
            Map_Preload("escapade_library.hpm");
            Map_Preload("escapade_church.hpm");
        }
		
		// for storage door code locker, "if" for testing safety only so the code never gets overwritten
		if (cScript_GetGlobalVarInt("StorageCombination") == 0) {
			cScript_SetGlobalVarInt("StorageCombination", cMath_RandRectl(1, 9999));
		}
		
        
        ///////////////////
		// Setup saving
		SaveRoom_SetupSaveLamp(false, "SaveLamp");
        
        
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
            Item_AddToInventory("DynamoLantern");
		}
        
        Entity_SetConnectionStateChangeCallback("arabic_lock*", "arabic_lock_OnConnectionStateChange");
	}

	//-------------------------------------------------------
    
	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
        ///////////////////////
		// Setup player body
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
		
		SetupGenerator();
        
        // Check for unlocked padlocks and disable them
        for(int t = 1; t <= 10; t++){
            if(cScript_GetGlobalVarBool("padlock_"+t)){
                Entity_SetActive("padlock_"+t, false);
            }
        }
        
        // Check for moving button positions and sync them
        array<iLuxEntity@> locks;
        Map_GetEntityArray("arabic_lock*", locks);
        for(int t = 0; t < locks.length(); t++){
            if(cScript_GetGlobalVarBool(locks[t].GetName())){
                cLux_AddDebugMessage("BUTTON "+ locks[t].GetName() + " IS ON (OPEN)");
                MovingButton_SetSwitchedOn(locks[t].GetName(), true, false);
            } else{
                cLux_AddDebugMessage("BUTTON "+ locks[t].GetName() + " IS OFF (CLOSED)");
                MovingButton_SetSwitchedOn(locks[t].GetName(), false, false);
            }
            
        }
        
        //Debug
        if(cLux_ScriptDebugOn()){
            Item_SetCurrentSlotsCount(50);
			if (ItemType_GetCountInInventory("Gun") == 0)
			{
				Item_AddToInventory("Gun");
				Item_AddManyToInventory("Ammunition", 20);
			}
            if (ItemType_GetCountInInventory("Shotgun") == 0)
			{
				Item_AddToInventory("Shotgun");
				Item_AddManyToInventory("ShotgunAmmunition", 20);
			}
            
        }
        
        cLux_AddDebugMessage(""+ cScript_GetGlobalVarBool("padlock_1"));
        cLux_AddDebugMessage("ENTITY COUNT "+ Map_GetEntityCount("padlock_*"));
        
        
        
	}
    
	//-------------------------------------------------------
    //array<iLuxEntity@> pickableEntities;
	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
        //Map_GetEntityArray("*", )
        // Reset global var 
        array<iLuxEntity@> pickableEntities;
        
        //Get array for pickables sync
        Map_GetEntityArray("*", pickableEntities, eLuxEntityType_LastEnum, "cScrPropPickup");
        
        cScript_SetGlobalVarString("sync_pickables_entrance", "");
        for(int t=0; t < pickableEntities.length(); t++){
            //Entity_SetPlayerInteractCallback(pickableEntities[t].GetName(), "OnInteract_ToRemoveFromEntranceAlt", false);
            cScript_SetGlobalVarString("sync_pickables_entrance", cScript_GetGlobalVarString("sync_pickables_entrance") + "," + pickableEntities[t].GetName());
            cLux_AddDebugMessage("ADDED NAMES TO GLOBAL VARIABLE FOR SYNC");
            cLux_AddDebugMessage(cScript_GetGlobalVarString("sync_pickables_entrance"));
            
        }
        
	}
    
    //array<iLuxEntity@> pickableEntitiesEnd;
	bool OnCollide_DebugTest(const tString &in asParent, const tString &in asChild, int alState)
    {
        /*
        if(alState == 1){
            cLux_AddDebugMessage("COLLIDED");
            //cLux_AddDebugMessage("CLASS: " + Map_GetEntity("torch_stick_pickup_2").GetClassName());
            cLux_AddDebugMessage("INITIAL ARRAY");
            // Reset global var 
            cScript_SetGlobalVarString("sync_pickables_entrance", "");
            for(int t=0; t < pickableEntities.length(); t++){
                //Entity_SetPlayerInteractCallback(pickableEntities[t].GetName(), "OnInteract_ToRemoveFromEntranceAlt", false);
                //cLux_AddDebugMessage(""+ pickableEntities[t].GetName());
                cScript_SetGlobalVarString("sync_pickables_entrance", cScript_GetGlobalVarString("sync_pickables_entrance") + "," + pickableEntities[t].GetName());
            }
            
            //cLux_AddDebugMessage("NEW ARRAY");
            //Map_GetEntityArray("*", pickableEntitiesEnd, eLuxEntityType_LastEnum, "cScrPropPickup");
            //
            //for(int t=0; t < pickableEntitiesEnd.length(); t++){
            //    //Entity_SetPlayerInteractCallback(pickableEntities[t].GetName(), "OnInteract_ToRemoveFromEntranceAlt", false);
            //    cLux_AddDebugMessage(""+ pickableEntitiesEnd[t].GetName());
            //}
            
            cLux_AddDebugMessage(cScript_GetGlobalVarString("sync_pickables_entrance"));
        }
        */
        array<iLuxEntity@> locks;
        Map_GetEntityArray("arabic_lock*", locks);
        for(int t = 0; t < locks.length(); t++){
            if(cScript_GetGlobalVarBool(locks[t].GetName())){
                cLux_AddDebugMessage("BUTTON "+ locks[t].GetName() + " IS ON");
                MovingButton_SetSwitchedOn(locks[t].GetName(), true, false);
            } else{
                cLux_AddDebugMessage("BUTTON "+ locks[t].GetName() + " IS OFF");
                MovingButton_SetSwitchedOn(locks[t].GetName(), false, false);
            }
            
        }
        
        return true;
    }
    
    void arabic_lock_OnConnectionStateChange(const tString &in asEntity, int alState){
        tString doorName = cString_Sub(asEntity, "arabic_lock_".length(), -1);
        if(alState == 1){
            cScript_SetGlobalVarBool(asEntity, true);
            MovingButton_SetSwitchedOn(asEntity, true, true);
            SwingDoor_SetLocked(doorName, false, true);
            
        } else if (alState == -1 && SwingDoor_GetOpenAmount(doorName) < 0.1f){
            cScript_SetGlobalVarBool(asEntity, false);
            MovingButton_SetSwitchedOn(asEntity, false, true);
            SwingDoor_SetLocked(doorName, true, true);
            
        }
    }
    
    
    void OnBreak_Padlock(const tString &in asEntity)
    {
        cScript_SetGlobalVarBool(asEntity, true);
        cLux_AddDebugMessage(""+ cScript_GetGlobalVarBool(asEntity));
    }
    
    bool OnCollide_DebugChangeMap(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            cLux_AddDebugMessage("COLLIDED");
            cLux_ChangeMap("escapade_entrance_alt.hpm", "Start_Begin_Ballroom", "", "", "", true);
        }
        return true;
    }
    
    bool OnCollide_CloseExitDoors(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            //SwingDoor_SetAutoClose("door_exit_*", true);
            //SwingDoor_SetOpenAmount("door_exit_entrance", 0.0f);
            cLux_AddDebugMessage("START CLOSE");
            SwingDoor_SetClosed("door_exit_*", true, true);
            Map_AddTimer("doorg", 0.05f, "OnTimer_PreventDoorGlitch");
        }
        return true;
    }
    
    void OnTimer_PreventDoorGlitch(const tString &in asTimer){
        cLux_AddDebugMessage("CLOSE");
        SwingDoor_SetOpenAmount("door_exit_*", 0.0f);
    }
    
    bool OnTrigger_Player_Transfer_Church(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_church.hpm", "MapTransfer_EntranceChurch");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Greenhouse_One(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_greenhouse.hpm", "MapTransfer_EntranceGreenhouse_1");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Greenhouse_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_greenhouse.hpm", "MapTransfer_EntranceGreenhouse_2");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_StorageArea_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_storage.hpm", "MapTransfer_EntranceStorage_2");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Library_One(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_library.hpm", "MapTransfer_EntranceLibrary_1");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Library_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_library.hpm", "MapTransfer_EntranceLibrary_2");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_LibraryBallroomTwo(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_library.hpm", "MapTransfer_EntranceLibrary_3");
		return true;
	}
	//-------------------------------------------------------
    void OnInteract_ToRemoveFromEntranceAlt(const tString &in asEntity)
    {
        cLux_AddDebugMessage("REMOVED FROM ENTRANCE ALT");
    }
	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
        if (cLux_ScriptDebugOn())
		{
			if (alAction == eAction_Test7)
			{
				Entity_SetActive("Trigger_KillGenerator", false);
				Generator_SetFuelAmount(0);
				Generator_SetRunForever(false);
				Generator_ChangeState(eGeneratorState_Off);
				cLux_AddDebugMessage("Generator Off");
			}
		
			if (alAction == eAction_Test8)
			{
				Entity_SetActive("Trigger_KillGenerator", true);
				Generator_AddFuel(2);
				Generator_ChangeState(eGeneratorState_On);
				Generator_SetRunForever(true);
				cLux_AddDebugMessage("Generator On");
			}
		}
        
		if (alAction == eAction_Test1)
		{
		}
	}
    
    bool OnTrigger_Player_SwitchMap_StorageMap(const tString &in asParent, const tString &in asChild, int alState)
    {
        Game_DoMapChange("escapade_storage.hpm", "MapTransfer_EntranceStorage");
        return true;
    }
	//-------------------------------------------------------
	void OnLookAt_SaveLamp(const tString &in asEntity, int alState)
	{
		tString sHint = GameDifficulty_GetSaveHint();
		if(alState == 1)
		{
			if (Hint_GetCurrentEntry() != sHint)
			{
				Hint_StopHint();
				if (GameDifficulty_GetSettingValueByID_Int(eGameDifficultySetting_SaveSystem) == eDifficultySettingValue_SaveSystem_SavingCostsFuel)
					Hint_RemoveFromGiven("Hints", sHint);
				Hint_ShowHint_Hold("Hints", sHint, true, 1.5f, true, 15.f, true, true);
			}
		}
		else
		{
			if (Hint_GetCurrentEntry() == sHint)
				Hint_StopHint();
		}
	}
	
	void OnInteract_SaveLamp(const tString &in asEntity)
	{
		////////////////
		// About to get lit!
		if (Lamp_GetLit(asEntity) == false){
            cLux_AddDebugMessage("SAVED");
			//SaveGameProgress();
            
        }
		else{
			Map_AddTimer(asEntity, 1.f, "OnTimer_SaveGameProgress");
        }
	}
	
	void OnTimer_SaveGameProgress(const tString&in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
        cLux_AddDebugMessage("SAVED");
		SaveGameProgress();
	}
	
	void SaveGameProgress()
	{
		/////////////////
		// Save game
        cLux_AddDebugMessage("SAVED");
		SaveRoom_SaveGame(true, true);
		
		////////////////
		// Hints
		if (Hint_GetCurrentEntry() == GameDifficulty_GetSaveHint())
			Hint_StopHint();
		
		GameStats_IncreaseEntryAmount(eHeroStats_TimesSaved);
	}

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	/////////////////////////
	//// Generator
	
	void SetupGenerator()
	{
		Generator_SetupEntities("", "", "", "", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
		Generator_EndSetup();
	}
	
	void OnStateChange_Generator(int alState)
	{		
		///////////////////
		// Generator Sounds
		if (alState!=1)
			Sound_Play("Sound_GeneratorOff", 0.f);		
	}
	
	////////////////////////////////
    
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		/*Put any functions that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE X 
}