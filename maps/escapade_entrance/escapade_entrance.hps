#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"

//Unique escapade includes:
#include "escapade_custom/helpers/helper_music_control.hps"
#include "escapade_custom/helpers/helper_map_transfers.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("entrance-hall");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
        //////////////
		// Preload entity
		Entity_Preload("player_rebirth_ghoul.ent");
		//PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
	}
	
	//-------------------------------------------------------
    
    
	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
        // Black screen before intro - This prevents broken paintings upon first load
        //Effect_Fade_Out(0.0f);

		// Any general setup of script / entities
		// Preload maps
        {
            Map_Preload("escapade_storage.hpm");
            Map_Preload("escapade_greenhouse.hpm");
            Map_Preload("escapade_library.hpm");
            Map_Preload("escapade_church.hpm");
        }
		
        
        ///////////////////
		// Setup saving
		SaveRoom_SetupSaveLamp(false, "SaveLamp");

		if (Item_GetCurrentSlotsCount(eInventoryInstance_Player) < 9 && cLux_GetGameDifficulty() < 3) {
			Item_SetCurrentSlotsCount(9);
		}
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
			Entity_SetActive("debugitem_*", true);
            if(Item_GetAmount("DynamoLantern") == 0){
                Item_AddToInventory("DynamoLantern");
            }
            if(Item_GetAmount("Lighter") == 0){
                Item_AddToInventory("Lighter");
            }
            if(Item_GetAmount("Torch") == 0){
                Item_AddToInventory("Torch");
            }
            
			Effect_Blur_Reset();
			Player_SetActive(true);
			//cScript_SetGlobalVarBool("scaredByStalker", true);
            
            //Map_AddTimer("checkHeldState", 2.0f, "OnTimer_CheckHeld");
		} else {
			// put back playing intro here
			Entity_SetActive("debugitem_*", false);
			if (cLux_GetGameDifficulty() < 2) {
				ShowTipsCutscene();
			} else {
				PlayIntro();
			}
		}
		
		Entity_PlayAnimation("orb_holder", "Open");
        
        Entity_SetConnectionStateChangeCallback("arabic_lock*", "arabic_lock_OnConnectionStateChange");
        
        //cLux_ChangeMap("escapade_ballroom.hpm", "Start_Begin_Ballroom", "", "", "", false);
        
        Player_SetFallDamageActive(true);
        
        // -- Highlight puzzle entities start --
        cLux_AddDebugMessage("//////////---------------- HIGHLIGHT START---------------");
        // Get Highlight Handler
        //iScrItemHandler_Interface@ pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
        //pHandler.CopyItemEntityInfo(Item_GetItemEntity(ItemType_GetFirstInInventory("Shotgun")), "shotgun_temp");
		
        //iScrHighlightEffectHandler_Interface@ pEffectHandler = cast<iScrHighlightEffectHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_HighlightEffectHandler) );
        //pEffectHandler.AddSubMeshHighlight(Map_GetEntity("armour_puzzle_item_gloves_left").GetMainBody().GetID(), cColor_White, 100.0f);
		//cLuxEffectHandler@ pEffectHandler = cLux_GetEffectHandler();
        //pEffectHandler.AddGlowObject(Map_GetEntity("armour_puzzle_item_gloves_left").GetMeshEntity(),  cColor(300.0f, 300.0f,300.0f,100.0f),  0.0f);
        //cLux_GetEffectHandler().AddEdgeGlowObject(Map_GetEntity("armour_puzzle_item_gloves_left"), cColor_White, 0.5f, 10.0f, 10.0f);
        //Set up puzzle items IDs
        iLuxEntity@ pPuzzleItem1 = Map_GetEntity("armour_puzzle_item_gloves_left", eLuxEntityType_Prop);
		m_idPuzzleItem1 = pPuzzleItem1 !is null ? pPuzzleItem1.GetID() : tID_Invalid;
        
        iLuxEntity@ pPuzzleItem2 = Map_GetEntity("armour_puzzle_item_gloves_right", eLuxEntityType_Prop);
		m_idPuzzleItem2 = pPuzzleItem2 !is null ? pPuzzleItem2.GetID() : tID_Invalid;
        
        iLuxEntity@ pPuzzleItem3 = Map_GetEntity("armour_puzzle_item_helmet", eLuxEntityType_Prop);
		m_idPuzzleItem3 = pPuzzleItem3 !is null ? pPuzzleItem3.GetID() : tID_Invalid;
        
        // -- Highlight applied through VariableUpdate --
	}

	//-------------------------------------------------------
    
    int imgTrailID;
    int blurID;
	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
        
        
        ///////////////////////
		// Setup player body
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
		
        //Player_SetActive(true);
        //Player_SetCanEquipItems(true);
        
		SetupGenerator();
		if(cLux_ScriptDebugOn()){
            
        }
        
        //RichPresence_SetCurrent(eRichPresence_Entrance);
        
        //cLux_AddDebugMessage("----------RICH PRESENCE MAIN MENU DESCRIPTION: "+ RichPresence_GetDescription(eRichPresence_MainMenu) );
        //cLux_AddDebugMessage("----------RICH PRESENCE: "+ cLux_GetRichPresenceHandler().GetCurrentRichPresence() );
        //cLux_AddDebugMessage("----------RICH PRESENCE DESCRIPTION: "+ RichPresence_GetDescription(eRichPresence_Entrance) );
        //cLux_GetRichPresenceHandler().CreateRichPresence(69, "ENTRANCE MAP");
        
        
        
		//SetupStalkerAppearance();
		
        SetupMusicAmbienceBasedOnGen();
        
        ///////////////////////
		// Setup stalker
		Blackboard_DoStalkerMapTransfer("stalker_growth_1");
        if(Entity_IsActive("stalker_growth_1")){
            Music_Stalker_AddDeaggroSongTime("stalker_growth_1", cScript_GetGlobalVarString("music_to_play"), cScript_GetGlobalVarFloat("music_to_play_volume"), 8.0f);
        }
		
        
        // Check for unlocked padlocks and disable them
        for(int t = 1; t <= 10; t++){
            if(cScript_GetGlobalVarBool("padlock_"+t)){
                Entity_SetActive("padlock_"+t, false);
            }
        }
        
        // Check for moving button positions and sync them
        array<iLuxEntity@> locks;
        Map_GetEntityArray("arabic_lock*", locks);
        for(int t = 0; t < locks.length(); t++){
            if(cScript_GetGlobalVarBool(locks[t].GetName())){
                cLux_AddDebugMessage("BUTTON "+ locks[t].GetName() + " IS ON (OPEN)");
                MovingButton_SetSwitchedOn(locks[t].GetName(), true, false);
            } else{
                cLux_AddDebugMessage("BUTTON "+ locks[t].GetName() + " IS OFF (CLOSED)");
                MovingButton_SetSwitchedOn(locks[t].GetName(), false, false);
            }
            
        }
        
        //Debug
        if(cLux_ScriptDebugOn()){
            Item_SetCurrentSlotsCount(50);
			if (ItemType_GetCountInInventory("Gun") == 0)
			{
				Item_AddToInventory("Gun");
				Item_AddManyToInventory("Ammunition", 20);
			}
            if (ItemType_GetCountInInventory("Shotgun") == 0)
			{
				Item_AddToInventory("Shotgun");
				Item_AddManyToInventory("ShotgunAmmunition", 20);
			}
            if (ItemType_GetCountInInventory("MolotovCocktail") == 0)
			{
				Item_AddToInventory("MolotovCocktail");
				
			}
        }
        
        cLux_AddDebugMessage(""+ cScript_GetGlobalVarBool("padlock_1"));
        cLux_AddDebugMessage("ENTITY COUNT "+ Map_GetEntityCount("padlock_*"));
        
        
        
        
        
        Game_SetupAfterMapChange();
	}
    
	//-------------------------------------------------------
    //array<iLuxEntity@> pickableEntities;
	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{   
        Sound_Stop("Sound_GeneratorStop",0.f);
        //Map_GetEntityArray("*", )
        // Reset global var 
        array<iLuxEntity@> pickableEntities;
        
        //Get array for pickables sync
        Map_GetEntityArray("*", pickableEntities, eLuxEntityType_LastEnum, "cScrPropPickup");
        
        cScript_SetGlobalVarString("sync_pickables_entrance", "");
        for(int t=0; t < pickableEntities.length(); t++){
            //Entity_SetPlayerInteractCallback(pickableEntities[t].GetName(), "OnInteract_ToRemoveFromEntranceAlt", false);
            cScript_SetGlobalVarString("sync_pickables_entrance", cScript_GetGlobalVarString("sync_pickables_entrance") + "," + pickableEntities[t].GetName());
            cLux_AddDebugMessage("ADDED NAMES TO GLOBAL VARIABLE FOR SYNC");
            cLux_AddDebugMessage(cScript_GetGlobalVarString("sync_pickables_entrance"));
            
        }
        
		Music_Stalker_StopDeaggroSongChecks();
	}
    
    tID m_idPuzzleItem1;
    tID m_idPuzzleItem2;
    tID m_idPuzzleItem3;
    
    float mfFuelTapGlowCount = 0.f;
	float mfFuelTapGlowMul = 0.f;
    
    void VariableUpdate(float afDeltaTime)
	{
		///////////////////
		// Puzzle item highlight
        if (ArmorItemCounter == 3){
            return;
        }
        
		cLuxProp@ pProp1 = cLux_ID_Prop(m_idPuzzleItem1);
		cMeshEntity@ pMeshEnt1 = pProp1 !is null ? pProp1.GetMeshEntity() : null;
		
        cLuxProp@ pProp2 = cLux_ID_Prop(m_idPuzzleItem2);
		cMeshEntity@ pMeshEnt2 = pProp2 !is null ? pProp2.GetMeshEntity() : null;
		
        cLuxProp@ pProp3 = cLux_ID_Prop(m_idPuzzleItem3);
		cMeshEntity@ pMeshEnt3 = pProp3 !is null ? pProp3.GetMeshEntity() : null;
		
		bool bGlow = true;
		//float fDistToPlayerSqr = (cLux_GetPlayer().GetCharacterBody().GetPosition() - pProp.GetPosition()).SqrLength();
		
		
		
		float fGlowMulGoal = bGlow ? 1.f : 0.f;
		mfFuelTapGlowMul = cMath_IncreaseTo(mfFuelTapGlowMul, afDeltaTime * 2.f, fGlowMulGoal);
		
		if (mfFuelTapGlowMul <= 0.f)
		{
			mfFuelTapGlowCount = 0.f;
		}
		else
		{
			mfFuelTapGlowCount += afDeltaTime;
			if (mfFuelTapGlowCount >= 4.f)
				mfFuelTapGlowCount = 0.f;
		}		
		
		float fY = cMath_Min(mfFuelTapGlowCount, 1.f);
		float fGlow = 1.f - cMath_Abs(2.f * fY - 1.f);
		fGlow = cMath_Easing(eEasing_QuadInOut, fGlow) * mfFuelTapGlowMul;
		fY = cMath_Easing(eEasing_SineInOut, fY);
		
		//float fColorMul = 3.f;
		//cColor color = cColor(0.35f * fColorMul, 0.15f * fColorMul, 0.f, fGlow);
		
        //float fColorMul = 3.f;
		cColor color = cColor(1.0f, 1.0f, 1.0f, fGlow);
		
		if (fGlow > 0.f)
		{
			for (int i = 0; i < pMeshEnt1.GetSubMeshEntityNum(); ++i)
			{
				cSubMeshEntity@ pSubMesh = pMeshEnt1.GetSubMeshEntity(i);
				if (pSubMesh is null) continue;
				
				cLux_GetEffectHandler().AddGlowObject(pSubMesh, color, fY);
			}
            
            for (int i = 0; i < pMeshEnt2.GetSubMeshEntityNum(); ++i)
			{
				cSubMeshEntity@ pSubMesh = pMeshEnt2.GetSubMeshEntity(i);
				if (pSubMesh is null) continue;
				
				cLux_GetEffectHandler().AddGlowObject(pSubMesh, color, fY);
			}
            
            for (int i = 0; i < pMeshEnt3.GetSubMeshEntityNum(); ++i)
			{
				cSubMeshEntity@ pSubMesh = pMeshEnt3.GetSubMeshEntity(i);
				if (pSubMesh is null) continue;
				
				cLux_GetEffectHandler().AddGlowObject(pSubMesh, color, fY);
			}
            
            
		}
	}
    
    void OnTimer_CheckHeld(const tString &in asTimer){
        //cLux_AddDebugMessage("HELD STATE: " + Item_GetHeldState());
        //cLux_AddDebugMessage("HAND HELD STATE: " + Item_GetHandHeldState());
        //cLux_AddDebugMessage("ANIMATION NAME: " + PlayerHands_GetAnimationPlaying());
        
        Map_RestartCurrentTimer(0.02f);
    }
    
    //array<iLuxEntity@> pickableEntitiesEnd;
	bool OnCollide_DebugTest(const tString &in asParent, const tString &in asChild, int alState)
    {
        /*
        if(alState == 1){
            cLux_AddDebugMessage("COLLIDED");
            //cLux_AddDebugMessage("CLASS: " + Map_GetEntity("torch_stick_pickup_2").GetClassName());
            cLux_AddDebugMessage("INITIAL ARRAY");
            // Reset global var 
            cScript_SetGlobalVarString("sync_pickables_entrance", "");
            for(int t=0; t < pickableEntities.length(); t++){
                //Entity_SetPlayerInteractCallback(pickableEntities[t].GetName(), "OnInteract_ToRemoveFromEntranceAlt", false);
                //cLux_AddDebugMessage(""+ pickableEntities[t].GetName());
                cScript_SetGlobalVarString("sync_pickables_entrance", cScript_GetGlobalVarString("sync_pickables_entrance") + "," + pickableEntities[t].GetName());
            }
            
            //cLux_AddDebugMessage("NEW ARRAY");
            //Map_GetEntityArray("*", pickableEntitiesEnd, eLuxEntityType_LastEnum, "cScrPropPickup");
            //
            //for(int t=0; t < pickableEntitiesEnd.length(); t++){
            //    //Entity_SetPlayerInteractCallback(pickableEntities[t].GetName(), "OnInteract_ToRemoveFromEntranceAlt", false);
            //    cLux_AddDebugMessage(""+ pickableEntitiesEnd[t].GetName());
            //}
            
            cLux_AddDebugMessage(cScript_GetGlobalVarString("sync_pickables_entrance"));
        }
        */
        
        /*
        array<iLuxEntity@> locks;
        Map_GetEntityArray("arabic_lock*", locks);
        for(int t = 0; t < locks.length(); t++){
            if(cScript_GetGlobalVarBool(locks[t].GetName())){
                cLux_AddDebugMessage("BUTTON "+ locks[t].GetName() + " IS ON");
                MovingButton_SetSwitchedOn(locks[t].GetName(), true, false);
            } else{
                cLux_AddDebugMessage("BUTTON "+ locks[t].GetName() + " IS OFF");
                MovingButton_SetSwitchedOn(locks[t].GetName(), false, false);
            }
            
        }
        */
        
        //cLux_AddDebugMessage("AGENT COUNT: "+ Blackboard_GetAgentCount());
        return true;
    }
    
    // -- Door lock management
    void arabic_lock_OnConnectionStateChange(const tString &in asEntity, int alState){
        tString doorName = cString_Sub(asEntity, "arabic_lock_".length(), -1);
        if(alState == 1){
            cScript_SetGlobalVarBool(asEntity, true);
            MovingButton_SetSwitchedOn(asEntity, true, true);
            SwingDoor_SetLocked(doorName, false, true);
            Entity_SetActive("preventInteract_"+doorName, false);
            Entity_SetActive("lockedMessage_"+doorName, false);
            
        } else if (alState == -1 && SwingDoor_GetOpenAmount(doorName) < 0.1f){
            cScript_SetGlobalVarBool(asEntity, false);
            MovingButton_SetSwitchedOn(asEntity, false, true);
            SwingDoor_SetLocked(doorName, true, true);
            Entity_SetActive("preventInteract_"+doorName, true);
            Entity_SetActive("lockedMessage_"+doorName, true);
        }
    }
    
    bool wrongSide;
    bool OnCollide_PreventInteract(const tString &in asParent, const tString &in asChild, int alState)
    {
        tString doorName = cString_Sub(asParent, "preventInteract_".length(), -1);
        if(alState == 1){
            wrongSide = true;
            
            Entity_SetInteractionDisabled("arabic_lock_"+doorName, true);
            //Description_Add("Description", "LockedFromOtherSide", false);
        }
        if(alState == -1){
            wrongSide = false;
            
            Entity_SetInteractionDisabled("arabic_lock_"+doorName, false);
            //Description_Remove("Description", "LockedFromOtherSide");
        }
        
        
        return true;
    }
    
    void OnInteract_DoorLocked(const tString &in asEntity)
    {
        if(wrongSide){
            Entity_SetActive("lockedMessage_"+asEntity, true);
            
        } else{
            Entity_SetActive("lockedMessage_"+asEntity, false);
        }
            
    }
    
    void OnLookAt_DoorLocked(const tString &in asEntity, int alState)
    {
        if(alState == 1 && wrongSide){
            Description_Add("Description", "LockedFromOtherSide", false);
        }
        if(alState == -1){
            Description_Remove("Description", "LockedFromOtherSide");
        }
    }
	
	void Castle_DoorBreak_Callback(const tString &in asEntity)
	{
		wrongSide = false;
		Entity_SetActive("lockedMessage_"+asEntity, false);
		Entity_SetActive("preventInteract_"+asEntity, false);
	}
    
    void OnBreak_Padlock(const tString &in asEntity)
    {
        cScript_SetGlobalVarBool(asEntity, true);
        cLux_AddDebugMessage(""+ cScript_GetGlobalVarBool(asEntity));
    }
    
    bool OnCollide_DebugChangeMap(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            cLux_AddDebugMessage("COLLIDED");
            cLux_ChangeMap("escapade_entrance_alt.hpm", "Start_Begin_Ballroom", "", "", "", true);
        }
        return true;
    }
    
    bool OnCollide_CloseExitDoors(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            //SwingDoor_SetAutoClose("door_exit_*", true);
            //SwingDoor_SetOpenAmount("door_exit_entrance", 0.0f);
            cLux_AddDebugMessage("START CLOSE");
            SwingDoor_SetClosed("door_exit_*", true, true);
            Map_AddTimer("doorg", 0.05f, "OnTimer_PreventDoorGlitch");
        }
        return true;
    }
    
    void OnTimer_PreventDoorGlitch(const tString &in asTimer){
        cLux_AddDebugMessage("CLOSE");
        SwingDoor_SetOpenAmount("door_exit_*", 0.0f);
    }
    
    bool OnTrigger_Player_Transfer_Church(const tString &in asParent, const tString &in asChild, int alState)
	{
        if(alState == 1){
            Stalker_SetTenacity("stalker_growth_1", 1.f);
            Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
            Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));
            
            // Torch crash prevention
            
            Game_DoCrashPreventionTransfer("escapade_church.hpm", "MapTransfer_EntranceChurch");
            //Game_DoCrashPreventionTransfer("escapade_church.hpm", "MapTransfer_EntranceChurch");
            
            
        }
        
        return true;
	}
    
    
    
    bool OnTrigger_Player_Transfer_Greenhouse_One(const tString &in asParent, const tString &in asChild, int alState)
	{
        if(alState == 1){
            Stalker_SetTenacity("stalker_growth_1", 1.f);
            Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
            Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));
            
            // Torch crash prevention
            
            Game_DoCrashPreventionTransfer("escapade_greenhouse.hpm", "MapTransfer_EntranceGreenhouse_1");
        }
        
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Greenhouse_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
        Stalker_SetTenacity("stalker_growth_1", 1.f);
		Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
        Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));

		Game_DoCrashPreventionTransfer("escapade_greenhouse.hpm", "MapTransfer_EntranceGreenhouse_2");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_StorageArea_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
        Stalker_SetTenacity("stalker_growth_1", 1.f);
		Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
        Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));

		Game_DoCrashPreventionTransfer("escapade_storage.hpm", "MapTransfer_EntranceStorage_2");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Library_One(const tString &in asParent, const tString &in asChild, int alState)
	{
        Stalker_SetTenacity("stalker_growth_1", 1.f);
		Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
        Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));

		Game_DoCrashPreventionTransfer("escapade_library.hpm", "MapTransfer_EntranceLibrary_1");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Library_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
        Stalker_SetTenacity("stalker_growth_1", 1.f);
		Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
        Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));

		Game_DoCrashPreventionTransfer("escapade_library.hpm", "MapTransfer_EntranceLibrary_2");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_LibraryBallroomTwo(const tString &in asParent, const tString &in asChild, int alState)
	{
        Stalker_SetTenacity("stalker_growth_1", 1.f);
		Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
        Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));
        
		Game_DoCrashPreventionTransfer("escapade_library.hpm", "MapTransfer_EntranceLibrary_3");
		return true;
	}
    
	//-------------------------------------------------------
    void OnInteract_ToRemoveFromEntranceAlt(const tString &in asEntity)
    {
        cLux_AddDebugMessage("REMOVED FROM ENTRANCE ALT");
    }
	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
        if (cLux_ScriptDebugOn())
		{
			if (alAction == eAction_Test7)
			{
				Entity_SetActive("Trigger_KillGenerator", false);
				Generator_SetFuelAmount(0);
				Generator_SetRunForever(false);
				Generator_ChangeState(eGeneratorState_Off);
				cLux_AddDebugMessage("Generator Off");
			}
		
			if (alAction == eAction_Test8)
			{
				Entity_SetActive("Trigger_KillGenerator", true);
				Generator_AddFuel(2);
				Generator_ChangeState(eGeneratorState_On);
				Generator_SetRunForever(true);
				cLux_AddDebugMessage("Generator On");
			}
		}
        
		if (alAction == eAction_Flashlight)
		{
			OnAction_CustomizedLightSources();
		}
	}
	
	// Hold F for lantern, press F for lighter/crafted torch

	void OnAction_CustomizedLightSources() {
	
		tString sItemID = ItemType_GetFirstInInventory("Lighter");
		if (sItemID != "") {
			if (Item_GetHeldType(eItemHandlerHand_Left) == "DynamoLantern" && Item_IsLightSourceActive()) {
				Item_PutAway(eItemHandlerHand_Left);
			}
			sItemID = ItemType_GetFirstInInventory("Torch");
			if (sItemID != "" && Player_GetCanEquipItems() && !Player_GetIsInUsingItemState()) {
				Item_ToggleHeldItem("Torch");
			} else if (Player_GetCanEquipItems() && !Player_GetIsInUsingItemState()){
				Item_ToggleHeldItem("Lighter");
			}
		}
	}
    
    bool OnTrigger_Player_SwitchMap_StorageMap(const tString &in asParent, const tString &in asChild, int alState)
    {
		Stalker_SetTenacity("stalker_growth_1", 1.f);
		Blackboard_SetupStalkerMapTransfer("stalker_growth_1");
        Blackboard_RemoveEnemy(Map_GetEntityID("stalker_growth_1"));
		
        Game_DoCrashPreventionTransfer("escapade_storage.hpm", "MapTransfer_EntranceStorage");
        return true;
    }
	//-------------------------------------------------------
	void OnLookAt_SaveLamp(const tString &in asEntity, int alState)
	{
		tString sHint = GameDifficulty_GetSaveHint();
		if(alState == 1)
		{
			if (Hint_GetCurrentEntry() != sHint)
			{
				Hint_StopHint();
				if (GameDifficulty_GetSettingValueByID_Int(eGameDifficultySetting_SaveSystem) == eDifficultySettingValue_SaveSystem_SavingCostsFuel)
					Hint_RemoveFromGiven("Hints", sHint);
				Hint_ShowHint_Hold("Hints", sHint, true, 1.5f, true, 15.f, true, true);
			}
		}
		else
		{
			if (Hint_GetCurrentEntry() == sHint)
				Hint_StopHint();
		}
	}
	
	void OnInteract_SaveLamp(const tString &in asEntity)
	{
		////////////////
		// About to get lit!
		if (Lamp_GetLit(asEntity) == false){
            cLux_AddDebugMessage("SAVED");
			SaveGameProgress();
            
        }
		else{
			Map_AddTimer(asEntity, 1.f, "OnTimer_SaveGameProgress");
        }
	}
	
	void OnTimer_SaveGameProgress(const tString&in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
        cLux_AddDebugMessage("SAVED");
		SaveGameProgress();
	}
	
	void SaveGameProgress()
	{
		/////////////////
		// Save game
        cLux_AddDebugMessage("SAVED");
		SaveRoom_SaveGame(true, true);
		
		////////////////
		// Hints
		if (Hint_GetCurrentEntry() == GameDifficulty_GetSaveHint())
			Hint_StopHint();
		
		GameStats_IncreaseEntryAmount(eHeroStats_TimesSaved);
	}

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	/////////////////////////
	//// Generator
	
	void SetupGenerator()
	{
		Generator_SetupEntities("", "", "", "", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
		Generator_EndSetup();
	}
	
	void OnStateChange_Generator(int alState)
	{		
		SetupMusicAmbienceBasedOnGen();
		///////////////////
		// Generator Sounds
		if (alState!=1)
			Sound_Play("Sound_GeneratorOff", 0.f);		
	}
	
	////////////////////////////////
	
	//////////////////
	/// Stalker
	//////////////////
	
	void SetupStalkerAppearance() {
        cLux_AddDebugMessage("ATTEMPTING TO MAKE STALKER APPEAR");
		if (cScript_GetGlobalVarBool("scaredByStalker") && !cScript_GetGlobalVarBool("entrance_alt_unlocked")) {
			//Enable god mode in case player spawns there, so that stalker pushes you
            //cLux_AddDebugMessage("STALKER ENABLED");
            //cLux_SetGodModeActivated(true);
            //Map_AddTimer("Timer_DisableGodMode", 2.0f, "OnTimer_DisableGodMode");
            
            Entity_SetActive("stalker_growth_1", true);
			Music_Stalker_AddDeaggroSongTime("stalker_growth_1", cScript_GetGlobalVarString("music_to_play"), cScript_GetGlobalVarFloat("music_to_play_volume"), 8.0f);
			//Stalker_SetEmergeAllowed("stalker_growth_1", true);
			cLux_AddDebugMessage("Stalker is now ENABLED");
		}
	}
    /*
    bool OnCollide_StalkerDisableArea(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            cLux_AddDebugMessage("STALKER DISABLE CHECK TO SPAWN");
            Map_RemoveTimer("Timer_UpdateStalkerSpawn");
            Entity_SetActive("stalker_growth_1", false);
            Music_Stalker_StopDeaggroSongChecks(); 
        }
        
        if(alState == -1){
            cLux_AddDebugMessage("STALKER CHECK TO SPAWN ACTIVE");
            Map_AddTimer("Timer_UpdateStalkerSpawn", 0.0f, "OnTimer_UpdateStalkerSpawn");
        }
        
        return true;
    }
    
    // Check if stalker is out of player's sight and also far enough
    void OnTimer_UpdateStalkerSpawn(const tString &in asTimer){
        cLux_AddDebugMessage("Quick timer, checking for stalker spawn");
        tID stalkerID = Map_GetEntityID("stalker_growth_1");
        if(!Entity_IsInPlayerFOV("stalker_growth_1") && cLux_ID_Agent(stalkerID).GetDistanceToPlayer2D() > 1.5f){
            SetupStalkerAppearance();
            
        }else{
            Map_RestartCurrentTimer(0.1f);
        }
    }
    
    void OnTimer_DisableGodMode(const tString &in asTimer){
        cLux_SetGodModeActivated(false);
    }
	*/
	///////////////
	///// Music events
	///////////////
	
	void SetupMusicAmbienceBasedOnGen() {
		if (Generator_GetState() == eGeneratorState_Off) {
			Music_PlayExt_Save("atrium_exploration_dark", true, 0.3f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
		} else {
			Music_PlayExt_Save("atrium_exploration_piano", true, 0.4f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
		}
	}
	
	bool OnTrigger_BallroomMusic(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1) {
			Music_PlayExt("atrium_puzzleroom", true, 0.3f, 1, 5.0f, 0, eMusicPrio_SceneAmb, true);
		} else {
			Music_Stop(5.0f, eMusicPrio_SceneAmb);
		}
		return true;
	}
	
	bool OnTrigger_SafeRoomMusic(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1) {
			Music_PlayExt("safe_room_escapade", true, 0.4f, 1, 3.0f, 0, eMusicPrio_OverrideAll, true);
		} else {
			Music_Stop(3.0f, eMusicPrio_OverrideAll);
		}
		return true;
	}
    
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		void lighter_pickup_1_OnPlayerInteract(const tString &in asEntity)
		{
			ParticleSystem_Destroy("PS_LighterPickup");
			Sound_Stop("Sound_LighterPickup", 1.0f);
			Entity_SetActive("Description_Lamp", false);
		}
	 
		/////////////////////////////////////////
		// Intro room, basic TDD Puzzles
		//{//////////////////////////////////////
		
		// Tips
		
		void ShowTipsCutscene() {
			Effect_Fade_Out(0.0f);
			Player_Teleport("ZonedOut", true);
			Player_SetMoveSpeedMul(0);
			Player_SetRunSpeedMul(0);
			Player_SetLookSpeedMul(0);
			Player_SetCrouchDisabled(true);
			Player_SetActive(false);
			Map_AddTimer("canskiptips_timer", 2.0f, "OnTimer_CanSkipTips");
			Map_AddTimer("showtipsnext_timer", 20.0f, "OnTimer_ShowTipsNext");
		}
		
		void OnTimer_CanSkipTips(const tString &in asTimer){
			Player_SetActive(true);
			Entity_SetActive("Trigger_JumpIntro_1", true);
		}		
		
		void OnTimer_ShowTipsNext(const tString &in asTimer){
			ShowTipsNext();
		}
		
		bool OnCollide_Trigger_JumpIntro_1(const tString &in asParent, const tString &in asChild, int alState)
		{
			if (alState == 1) {
				Map_RemoveTimer("showtipsnext_timer");
				ShowTipsNext();
				return false;
			}
			return true;
		}
		
		void ShowTipsNext(){
			Player_SetActive(false);
			Entity_SetActive("Description_Intro1", false);
			Entity_SetActive("Description_Intro2", true);
			Entity_SetActive("Trigger_JumpIntro_1", false);
			Effect_Fade_In(3.0f);
			Map_AddTimer("tipslamplight_timer", 5.0f, "OnTimer_TipsLampLight");
		}
		
		void OnTimer_TipsLampLight(const tString &in asTimer){
			//Lamp_SetLit("lamp_oil_hero_2", true, true);
			Player_SetActive(true);
			Entity_SetActive("Trigger_JumpIntro_2", true);
		}
		
		bool OnCollide_Trigger_JumpIntro_2(const tString &in asParent, const tString &in asChild, int alState)
		{
			if (alState == 1) {
			Entity_SetActive("Description_Intro2", false);
			Entity_SetActive("Trigger_JumpIntro_2", false);
			Effect_Fade_Out(0.5f);
			Player_SetMoveSpeedMul(1);
			Player_SetRunSpeedMul(1);
			Player_SetLookSpeedMul(1);
			Player_SetCrouchDisabled(false);
			Player_SetActive(false);
			Map_AddTimer("timer_launchintro", 4.0f, "OnTimer_LaunchIntro");
				return false;
			}
			return true;
		}
		
		void OnTimer_LaunchIntro(const tString &in asTimer){
			Player_Teleport("IntroEnd", true);
			PlayIntro();
            Game_AutoSave();
		}
		
		// Waking up
		
		void PlayIntro() {
			PlayerBody_SetActive(true);
			Player_SetActive(true);
			// disable inventory?
			
			SwingDoor_SetLocked("castle_saferoom_door", true, false);
			SwingDoor_SetLocked("castle_bath_door", true, false);
			SwingDoor_SetLocked("castle_main_door", true, false);
        
			Effect_Fade_Out(0.0f);
			Sound_FadeGlobalVolume(1.0f, 10.0f);
			Sound_FadeGlobalSpeed(1.0f, 10.0f);
			Effect_Blur_Reset();
			Effect_ImageTrail_Clear();
        
			Map_AddTimer("intro_effects_end", 3.5f, "OnTimer_IntroEnd");
        
			PlayerBody_PlayCutsceneAnimation("fall_and_get_up_quickly", false, 0.3f, "", 0.25f);
		}
		
	void OnTimer_IntroEnd(const tString &in asTimer){
		PlayerBody_SetVisible(false);
			
        Effect_Fade_In(5.0f);
        imgTrailID = Effect_ImageTrail_Start(1.5f, 0.1f, -1.0f, 80.0f);
        blurID = Effect_Blur_Start(0.1f, 0.1f);
        
        Map_AddTimer("introend2", 2.0f, "OnTimer_IntroEnd2");
        //Effect_Blur_FadeOut(blurID, 12.0f);
        //Effect_ImageTrail_FadeOut(imgTrailID, 12.0f);
    }
    
    void OnTimer_IntroEnd2(const tString &in asTimer){
		// to-do, make to voice
		Player_Disorient(10.0f, true, false);
		Sound_PlayGui("voice_intro_leave.snt", 1.0f);
        Effect_Blur_FadeOut(blurID, 12.0f);
        Effect_ImageTrail_FadeOut(imgTrailID, 12.0f);
    }

		bool OnTrigger_BookPuzzle(const tString &in asParent, const tString &in asChild, int alState)
		{
			if (alState == 1) {
				Entity_SetActive("book_puzzle_item", false);
				Entity_SetActive("book_puzzle_placed", true);
				Sound_PlayGui("unlock_door.snt", 1.0f);
				SwingDoor_SetLocked("castle_bath_door", false, true);
				SwingDoor_SetOpenAmount("castle_bath_door", 0.3f);
				Entity_SetActive("Description_Book", false);
				return false;
			}
			return true;
		}
		
		void armour_puzzle_item_gloves1_highlight_OnPlayerInteract(const tString &in asEntity)
		{
			Entity_SetActive("armour_puzzle_item_gloves_left_highlight", false);
			Entity_SetActive("armour_puzzle_item_gloves_left", true);
		}
		
		void armour_puzzle_item_gloves2_highlight_OnPlayerInteract(const tString &in asEntity)
		{
			Entity_SetActive("armour_puzzle_item_gloves_right_highlight", false);
			Entity_SetActive("armour_puzzle_item_gloves_right", true);
		}
		
		void armour_puzzle_item_highlight_OnPlayerInteract(const tString &in asEntity)
		{
			Entity_SetActive("armour_puzzle_item_helmet_highlight", false);
			Entity_SetActive("armour_puzzle_item_helmet", true);
		}
		
		int ArmorItemCounter = 0;		
		bool OnTrigger_ArmorItems(const tString &in asParent, const tString &in asChild, int alState)
		{
			if (alState == 1) {
				Sound_PlayGui("pick_pipe.snt", 1.0f);
				ArmorItemCounter++;
				cLux_AddDebugMessage("Armor items mounted: " + ArmorItemCounter);
				Entity_SetActive(asChild, false);
				Entity_SetActive(asParent + "_mounted", true);
				if (ArmorItemCounter == 3) {
					SwingDoor_SetLocked("castle_saferoom_door", false, true);
					Entity_SetActive("Description_Armor", false);
					BodyRevealCutscene(); 
				}
				return false;
			}
			return true;
		}
		
		void BodyRevealCutscene() {
			PlayerBody_SetVisible(true);
			Sound_PlayGui("voice_intro_bodyreveal.snt", 1.0f);
			PlayerBody_PlayCutsceneAnimation("player_exhausted", false, 0.3f, "", 0.4f);
			Entity_SetInteractionDisabled("rag_pickup_*", false);
		}
		
		void button_simple_1_OnPlayerInteract(const tString &in asEntity)
		{
			Sound_CreateAtEntity("buttonsound", "unlock_door.snt", "button_simple_1");
			Sound_PlayGui("tdd_puzzle_passage.snt", 1.0f);
			SwingDoor_SetLocked("castle_main_door", false, true);
			SwingDoor_SetOpenAmount("castle_main_door", 0.7f);
			Light_SetVisible("Light_Point_32", false);
            Entity_SetActive("Autosave_1", true);
		}
		
        bool OnCollide_Autosave(const tString &in asParent, const tString &in asChild, int alState)
        {
            if(alState == 1){
                Game_AutoSave();
            }
            if(alState == -1){
                Entity_SetActive(asParent, false);
            }
            
            return true;
        }
        
		bool OnTrigger_CastleRevealVO(const tString &in asParent, const tString &in asChild, int alState)
		{
			if (alState == 1) {
				Sound_PlayGui("voice_impossible.snt", 1.0f);
				Entity_SetActive(asParent, false);
                cLux_AddDebugMessage("RETURNED FALSE");
				return false;
			}
            cLux_AddDebugMessage("RETURNED TRUE");
			return true;
		}
	 
	//} END SCENE X 
}