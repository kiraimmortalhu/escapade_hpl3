#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("xx-xx-dummy-level");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		/////////////////
		// Preload gui
		//ImGui_PreloadImage("some_image");

		///////////////
		// Preload particles
		//ParticleSystem_Preload("some_particle.ps");

		//////////////
		// Preload screen effects
		//Material_Preload("some_material.mat");
	}
	
	//-------------------------------------------------------
    
    
	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		cVector3f vRot = cVector3f(0, cMath_ToRad(20), cMath_ToRad(-30));
		cLux_GetCurrentMap().GetWorld().SetSkyboxRotation(vRot);
		PlayerBody_SetActive(true);
		PlayerBody_SetModel("player_rebirth_ghoul.ent");
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
		Item_AddToInventory("DynamoLantern");
		}
        
        //---Sync previously picked entities start---
        array<iLuxEntity@> pickableEntities;
        array<tString> pickablesRemaining;
        //Disable all pickable entities
        Map_GetEntityArray("*", pickableEntities, eLuxEntityType_LastEnum, "cScrPropPickup");
        for(int t = 0; t < pickableEntities.length(); t++){
            pickableEntities[t].SetActive(false);
        }
        
        //Get array of remaining pickable entities names
        cString_GetStringVec(cScript_GetGlobalVarString("sync_pickables_entrance"), pickablesRemaining, ",");
        cLux_AddDebugMessage("TEST FIND NONEXISTANT: "+ pickablesRemaining.find("MRFAT"));
        cLux_AddDebugMessage("PICKABLES REMAINING:");
        
        //Enable remaining pickables
        for(int t = 0; t < pickablesRemaining.length(); t++){
            if(pickablesRemaining[t] != ""){
                cLux_AddDebugMessage(pickablesRemaining[t]);
                //Map_GetEntity(pickablesRemaining[t]).SetActive(true);
                Entity_SetActive(pickablesRemaining[t], true);
            }
            
        }
        
        
	}

	//-------------------------------------------------------
    
    //Array to store all the rocks with no gravity
    array<iLuxEntity@> gravityRocks;
	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
        if (PlayerBody_IsActive() == false)
		{
            PlayerBody_SetActive(true);
            PlayerBody_SetModel("player_rebirth_ghoul.ent");
        }
        
        //Get rocks in ballroom map
        Map_GetEntityArray("dw_rock_med_freeze_*", gravityRocks);
        
        
        //Set all these rocks to have zero gravity, from the ballroom
        for(int t = 0; t < gravityRocks.length(); t++){
            gravityRocks[t].GetMainBody().SetGravity(false);
        }
        
        //Attach particles to chairs, set their gravity to zero
        for(int t = 1; t <= 19; t++){
            ParticleSystem_AttachToEntity("chair_gravity_particle_"+t, "chair_gravity_"+t);
            Map_GetEntity("chair_gravity_"+t).GetMainBody().SetGravity(false);
        }
        //Map_GetProp("dw_rock_med_freeze_*").GetMainBody().SetGravity(false);
		Game_AutoSave();
        
    }
    
	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}
	
        
    bool OnCollide_CloseExitDoors(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            //SwingDoor_SetAutoClose("door_exit_*", true);
            //SwingDoor_SetOpenAmount("door_exit_entrance", 0.0f);
            cLux_AddDebugMessage("START CLOSE");
            SwingDoor_SetClosed("door_exit_*", true, true);
            Map_AddTimer("doorg", 0.05f, "OnTimer_PreventDoorGlitch");
        }
        return true;
    }
    
    void OnTimer_PreventDoorGlitch(const tString &in asTimer){
        cLux_AddDebugMessage("CLOSE");
        SwingDoor_SetOpenAmount("door_exit_*", 0.0f);
    }
    
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
		if (alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	/*Put any functions that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event: Leaving
		//{//////////////////////////////////////

		void Trigger_OpenGate_OnPlayerInteract(const tString &in asEntity)
		{
			SlideDoor_SetClosed("tin_hinan_slide_floor_1", false, false);
			LevelDoor_SetLocked("castle_gate_arched01_1", false);
		}
	 
	//} END SCENE X 
}