#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"

//Unique escapade includes:
#include "escapade_custom/helpers/helper_music_control.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("entrance-hall-alt");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		/////////////////
		// Preload gui
		//ImGui_PreloadImage("some_image");

		///////////////
		// Preload particles
		//ParticleSystem_Preload("some_particle.ps");

		//////////////
		// Preload screen effects
		//Material_Preload("some_material.mat");
	}
	
	//-------------------------------------------------------
    
    
	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		Map_Preload("escapade_sandfield.hpm");
		
		// Any general setup of script / entities
		cVector3f vRot = cVector3f(0, cMath_ToRad(20), cMath_ToRad(-30));
		cLux_GetCurrentMap().GetWorld().SetSkyboxRotation(vRot);
		PlayerBody_SetActive(true);
		PlayerBody_SetModel("player_rebirth_ghoul.ent");
		/////////////////////////
        cScript_SetGlobalVarBool("entrance_alt_unlocked", true);
		// Debug
		if (cLux_ScriptDebugOn())
		{
            Entity_SetActive("debugitem_*", true);
            Item_SetCurrentSlotsCount(15);
            Item_AddToInventory("Lighter");
            Item_AddToInventory("DynamoLantern");
            if (ItemType_GetCountInInventory("Gun") == 0)
			{
				Item_AddToInventory("Gun");
				Item_AddManyToInventory("Ammunition", 20);
			}
            if (ItemType_GetCountInInventory("Shotgun") == 0)
			{
				Item_AddToInventory("Shotgun");
				Item_AddManyToInventory("ShotgunAmmunition", 20);
			}
            
            Item_AddManyToInventory("MolotovCocktail", 3);
            Item_AddToInventory("OrbRed");
            Item_AddToInventory("Torch");
		} else {
			Entity_SetActive("debugitem_*", false);
		}
		
        
        Entity_PlayAnimation("orb_holder", "Open");
        
        //---Sync previously picked entities start---
        array<iLuxEntity@> pickableEntities;
        array<tString> pickablesRemaining;
        //Disable all pickable entities
        Map_GetEntityArray("*", pickableEntities, eLuxEntityType_LastEnum, "cScrPropPickup");
        for(int t = 0; t < pickableEntities.length(); t++){
            pickableEntities[t].SetActive(false);
        }
        
        //Get array of remaining pickable entities names
        cString_GetStringVec(cScript_GetGlobalVarString("sync_pickables_entrance"), pickablesRemaining, ",");
        cLux_AddDebugMessage("TEST FIND NONEXISTANT: "+ pickablesRemaining.find("MRFAT"));
        cLux_AddDebugMessage("PICKABLES REMAINING:");
        
        //Enable remaining pickables
        for(int t = 0; t < pickablesRemaining.length(); t++){
            if(pickablesRemaining[t] != ""){
                cLux_AddDebugMessage(pickablesRemaining[t]);
                //Map_GetEntity(pickablesRemaining[t]).SetActive(true);
                Entity_SetActive(pickablesRemaining[t], true);
            }
            
        }
		
		Entity_SetActive("last_resort*", true);
        
        Entity_SetConnectionStateChangeCallback("arabic_lock*", "arabic_lock_OnConnectionStateChange");
		
		Game_AutoSave();
        
        
	}

	//-------------------------------------------------------
    
    //Array to store all the rocks with no gravity
    
	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
        
        if (PlayerBody_IsActive() == false)
		{
            PlayerBody_SetActive(true);
            PlayerBody_SetModel("player_rebirth_ghoul.ent");
        }
		
		SetupGenerator();
		
		
		
		cScript_SetGlobalVarString("music_to_play", "");
		Music_StopAll(3.0f);
        
        //Get rocks in ballroom map
        array<iLuxEntity@> gravityRocks;
        Map_GetEntityArray("dw_rock_med_freeze_*", gravityRocks);
        
        
        //Set all these rocks to have zero gravity, from the ballroom
        for(int t = 0; t < gravityRocks.length(); t++){
            gravityRocks[t].GetMainBody().SetGravity(false);
        }
        
        //Attach particles to chairs, set their gravity to zero
        for(int t = 1; t <= 19; t++){
            ParticleSystem_AttachToEntity("chair_gravity_particle_"+t, "chair_gravity_"+t);
            Map_GetEntity("chair_gravity_"+t).GetMainBody().SetGravity(false);
        }
        //Map_GetProp("dw_rock_med_freeze_*").GetMainBody().SetGravity(false);
        
        
        // Check for unlocked padlocks and disable them
        for(int t = 1; t <= 10; t++){
            if(cScript_GetGlobalVarBool("padlock_"+t)){
                Entity_SetActive("padlock_"+t, false);
            }
        }
        
        // Check for moving button positions and sync them
        array<iLuxEntity@> locks;
        Map_GetEntityArray("arabic_lock*", locks);
        for(int t = 0; t < locks.length(); t++){
            if(cScript_GetGlobalVarBool(locks[t].GetName())){
                cLux_AddDebugMessage("BUTTON "+ locks[t].GetName() + " IS ON (OPEN)");
                MovingButton_SetSwitchedOn(locks[t].GetName(), true, false);
            } else{
                cLux_AddDebugMessage("BUTTON "+ locks[t].GetName() + " IS OFF (CLOSED)");
                MovingButton_SetSwitchedOn(locks[t].GetName(), false, false);
            }
            
        }
        
        SetupStalkerAppearance_Initial();
        
        Game_SetupAfterMapChange();
    }
    
	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
        Sound_Stop("Sound_GeneratorStop",0.f);
		
		Music_Stalker_StopDeaggroSongChecks();
	}
	
    void arabic_lock_OnConnectionStateChange(const tString &in asEntity, int alState){
        tString doorName = cString_Sub(asEntity, "arabic_lock_".length(), -1);
        if(alState == 1){
            cScript_SetGlobalVarBool(asEntity, true);
            MovingButton_SetSwitchedOn(asEntity, true, true);
            SwingDoor_SetLocked(doorName, false, true);
            
        } else if (alState == -1 && SwingDoor_GetOpenAmount(doorName) < 0.1f){
            cScript_SetGlobalVarBool(asEntity, false);
            MovingButton_SetSwitchedOn(asEntity, false, true);
            SwingDoor_SetLocked(doorName, true, true);
            
        }
    }
    
    bool OnCollide_CloseExitDoors(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            //SwingDoor_SetAutoClose("door_exit_*", true);
            //SwingDoor_SetOpenAmount("door_exit_entrance", 0.0f);
            cLux_AddDebugMessage("START CLOSE");
            SwingDoor_SetClosed("door_exit_*", true, true);
            Map_AddTimer("doorg", 0.05f, "OnTimer_PreventDoorGlitch");
        }
        return true;
    }
    
    void OnTimer_PreventDoorGlitch(const tString &in asTimer){
        cLux_AddDebugMessage("CLOSE");
        SwingDoor_SetOpenAmount("door_exit_*", 0.0f);
    }
    
    bool OnTrigger_Player_Transfer_Church(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_church.hpm", "MapTransfer_EntranceChurch");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Greenhouse_One(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_greenhouse.hpm", "MapTransfer_EntranceGreenhouse_1");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Greenhouse_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_greenhouse.hpm", "MapTransfer_EntranceGreenhouse_2");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_StorageArea_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_storage.hpm", "MapTransfer_EntranceStorage_2");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Library_One(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_library.hpm", "MapTransfer_EntranceLibrary_1");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Library_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_library.hpm", "MapTransfer_EntranceLibrary_2");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_LibraryBallroomTwo(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_library.hpm", "MapTransfer_EntranceLibrary_3");
		return true;
	}
    
    bool OnTrigger_Player_SwitchMap_StorageMap(const tString &in asParent, const tString &in asChild, int alState)
    {
        Game_DoMapChange("escapade_storage.hpm", "MapTransfer_EntranceStorage");
        return true;
    }
    
    
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
		if (alAction == eAction_Flashlight)
		{
			OnAction_CustomizedLightSources();
		}
	}
	
	// Hold F for lantern, press F for lighter/crafted torch

	void OnAction_CustomizedLightSources() {
	
		tString sItemID = ItemType_GetFirstInInventory("Lighter");
		if (sItemID != "") {
			if (Item_GetHeldType(eItemHandlerHand_Left) == "DynamoLantern" && Item_IsLightSourceActive()) {
				Item_PutAway(eItemHandlerHand_Left);
			}
			sItemID = ItemType_GetFirstInInventory("Torch");
			if (sItemID != "") {
				Item_ToggleHeldItem("Torch");
			} else {
				Item_ToggleHeldItem("Lighter");
			}
		}
	}
    
    
    bool CanUse_Orb(const tString &in asItemType, const tString &in asItemID, const tString &in asPickedEntity) {
        return asPickedEntity == "Trigger_OpenGate";
	}
	
	bool OnUse_Orb(const tString &in asItemType, const tString &in asItemID, const tString &in asTargetEntity, const tString &in asItemEntity, float afTimeElapsed, float afTimeStep) {
		cLux_AddDebugMessage("ORB USED");
		
		Entity_SetActive("bossfight_blocker", true);
        Prop_SetStaticPhysics("castle_arched01_4", true);
		Prop_SetInteractLookAtEnabled("castle_arched01_4", true);
        // Orb Pedestal
        Entity_SetActive("Trigger_OpenGate", false);
        OpenGate("tin_hinan_slide_floor_1");            // Entity name not really necessary here
        
        // Unequip orb
        
        Item_Unequip(ItemType_GetFirstInInventory("OrbRed"));
        Entity_SetActive("red_orb_pedestal", true);
        Entity_PlayAnimation("orb_holder", "Close");
        Map_AddTimer("remove_orb", 0.2f, "OnTimer_RemoveOrb");        
        
		//Sound_CreateAtEntity("", "DW_tunnel/portal/portal_open", asTargetEntity);
        
        
		//Item_RemoveFromInventory(ItemType_GetFirstInInventory(asItemType));
		return true;
	}
    
    void OnTimer_RemoveOrb(const tString &in asTimer){
        cLux_AddDebugMessage("UNEQUIPPED, REMOVE");
        Item_RemoveFromInventory(ItemType_GetFirstInInventory("OrbRed"));
        Map_AddTimer("reset_orb_animation", 0.5f, "OnTimer_RemoveOrbResetAnim");
        
    }
    
    void OnTimer_RemoveOrbResetAnim(const tString &in asTimer){
        cLux_AddDebugMessage("RESET ANIM");
        PlayerBody_PlayAnimation("tool_orb_holster", ePlayerBodyAnimationLayer_Arms, false, false, true);
    }
    
    
    
	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	/////////////////////////
	//// Generator
	
	void SetupGenerator()
	{
		Generator_SetupEntities("", "", "", "", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
		Generator_EndSetup();
	}
	
	void OnStateChange_Generator(int alState)
	{		
		///////////////////
		// Generator Sounds
		if (alState!=1)
			Sound_Play("Sound_GeneratorOff", 0.f);		
	}
	
	void SetupStalkerAppearance_Initial() {			
        Entity_SetActive("stalker_growth_1", true);
        Music_Stalker_AddDeaggroSongTime("stalker_growth_1", cScript_GetGlobalVarString("music_to_play"), cScript_GetGlobalVarFloat("music_to_play_volume"), 8.0f);
        Stalker_SetEmergeAllowed("stalker_growth_1", false);
        cLux_AddDebugMessage("Stalker is now ENABLED");
        Stalker_GoToHole("stalker_growth_1", "GhoulHole_2", true, true);
	}
    
    /*
    // Similar to SetupStalkerAppearance_Initial(), but does not go to hole, so that he spawns right where he was last
    void SetupStalkerAppearance(){
        //Enable god mode in case player spawns there, so that stalker pushes you
        cLux_SetGodModeActivated(true);
        Map_AddTimer("Timer_DisableGodMode", 2.0f, "OnTimer_DisableGodMode");
        
        Entity_SetActive("stalker_growth_1", true);
        Stalker_SetEmergeAllowed("stalker_growth_1", false);
        Music_Stalker_AddDeaggroSongTime("stalker_growth_1", cScript_GetGlobalVarString("music_to_play"), cScript_GetGlobalVarFloat("music_to_play_volume"), 11.0f);
        //Stalker_SetEmergeAllowed("stalker_growth_1", true);
        cLux_AddDebugMessage("Stalker is now ENABLED");
        
        // engaging bossfight mode
        GameDifficulty_SwitchSettingsPresetTo(3);
    }
    
    
    bool OnCollide_StalkerDisableArea(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            cLux_AddDebugMessage("STALKER DISABLE CHECK TO SPAWN");
            Map_RemoveTimer("Timer_UpdateStalkerSpawn");
            Entity_SetActive("stalker_growth_1", false);
            Music_Stalker_StopDeaggroSongChecks(); 
        }
        
        if(alState == -1){
            cLux_AddDebugMessage("STALKER CHECK TO SPAWN ACTIVE");
            Map_AddTimer("Timer_UpdateStalkerSpawn", 0.0f, "OnTimer_UpdateStalkerSpawn");
        }
        
        return true;
    }
    
    // Check if stalker is out of player's sight and also far enough
    void OnTimer_UpdateStalkerSpawn(const tString &in asTimer){
        cLux_AddDebugMessage("Quick timer, checking for stalker spawn");
        tID stalkerID = Map_GetEntityID("stalker_growth_1");
        if(!Entity_IsInPlayerFOV("stalker_growth_1") && cLux_ID_Agent(stalkerID).GetDistanceToPlayer2D() > 1.5f){
            
            SetupStalkerAppearance();
        }else{
            Map_RestartCurrentTimer(0.1f);
        }
    }
    
    void OnTimer_DisableGodMode(const tString &in asTimer){
        cLux_SetGodModeActivated(false);
    }
	*/
	////////////////////////////////
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		bool OnTrigger_ApproachAltar(const tString &in asParent, const tString &in asChild, int alState)
		{	
			if (alState == 1) {				
				if (!Stalker_GetEmergeAllowed("stalker_growth_1")) {
					Stalker_SetEmergeAllowed("stalker_growth_1", true);
				}
				if (Stalker_GetIsInsideWalls("stalker_growth_1")) {
					Stalker_EmergeFromHole("stalker_growth_1", "GhoulHole_2", true);
				}
				else {
					Stalker_GoToHole("stalker_growth_1", "GhoulHole_2", true, true);
				}
				//}
				Agent_RevealPlayerPosition("stalker_growth_1", false);
				
				// engaging bossfight mode
		
				// this is too much and resets you save
				// GameDifficulty_SwitchSettingsPresetTo(3);
		
				// instead just touch stalker stuff
				GameDifficulty_SetSettingValueIdByID(6, 5);
				GameDifficulty_SetSettingValueIdByID(7, 5);
				GameDifficulty_SetSettingValueIdByID(8, 5);
				GameDifficulty_SetSettingValueIdByID(9, 2);
				GameDifficulty_SetSettingValueIdByID(10, 2);
				GameDifficulty_SetSettingValueIdByID(11, 3);
				GameDifficulty_SetSettingValueIdByID(12, 3);
				
				// GameDifficulty_SwitchSettingsPresetTo(3);
				// eStalkerEscalation_Stage3
			}
			return true;
		}
	 
		/////////////////////////////////////////
		// Event: Leaving
		//{//////////////////////////////////////

		void OpenGate(const tString &in asEntity)
		{
			Agent_RevealPlayerPosition("stalker_growth_1", true);
			SlideDoor_SetClosed("tin_hinan_slide_floor_1", false, false);
			Map_AddTimer("Timer_PlayerCanLeave", 42.0f, "OnTimer_PlayerCanLeave");
		}
		
		void OnTimer_PlayerCanLeave(const tString &in asTimer){
			Sound_PlayGui("door_sewer_unlock_loud.snt", 1.0f);
			Sound_PlayGui("unlock_door.snt", 1.0f);
			LevelDoor_SetLocked("castle_gate_arched01_1", false);
		}
	 
	//} END SCENE X 
}