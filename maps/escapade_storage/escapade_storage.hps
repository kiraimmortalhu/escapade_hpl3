#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"
#include "helpers/helper_rotation.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("xx-xx-dummy-level");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		// Preload maps
        {
            Map_Preload("escapade_entrance.hpm");
            Map_Preload("escapade_library.hpm");
            Map_Preload("escapade_church.hpm");
            Map_Preload("escapade_underground.hpm");
        }
        
        
		//PlayerBody_SetModel("player_rebirth_ghoul.ent");
		//PlayerBody_SetActive(true);
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
			Entity_SetActive("debugitem_*", true);
			Item_SetCurrentSlotsCount(15);
			Item_AddToInventory("DynamoLantern");
			Item_AddManyToInventory("Ammunition",20);
			Item_AddToInventory("Cutters");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		///////////////////////
		// Setup player body
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
		
		SetupGenerator();
		
		Lever_SetStuckState("PowerSwitch_1", 1, true);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}
	
	bool OnTrigger_Player_Transfer_Underground(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_underground.hpm", "MapTransfer_StorageUnderground");
		return true;
	}
	
    bool OnTrigger_Player_SwitchMap_EntranceMap(const tString &in asParent, const tString &in asChild, int alState)
    {
        Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceStorage");
        return true;
    }
    
    bool OnTrigger_Player_Transfer_Church_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_church.hpm", "MapTransfer_StorageChurch");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Entrance_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceStorage_2");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_LibraryDining(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_library.hpm", "MapTransfer_KitchenDining");
		return true;
	}
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
		if (alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	void chain_break_Callback(const tString &in asEntity)
	{
		Prop_SetStaticPhysics("door_" + asEntity, false);
	}
	
	////// Generator
	
	bool mbHasAddedFuel = true;
	tString msUsedFuelItemID = "";
	tString msUsedFuelItemType = "";
	
	//-------------------------------------------------------
	
	void SetupGenerator()
	{
		Generator_SetupEntities("Generator", "Generator_PowerLamp", "Generator_Lever", "Generator_FuelGauge", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
       
        Generator_AddPowerSwitch("PowerSwitch_1", "", "", "Lamp_PowerSwitch_1_*", true);
		Generator_EndSetup();
	}
	
		//-------------------------------------------------------
	
	void OnLookAt_FuelHatch(const tString &in asEntity, int alState)
	{
		Entity_SetPlayerLookAtCallback(asEntity, "OnLookAt_FuelHatchAutoEquip", false, false, false, 2);
	}
	
	//-------------------------------------------------------
	
	void OnLookAt_FuelHatchAutoEquip(const tString &in asEntity, int alState)
	{
		if (alState == 1 && mbHasAddedFuel)
			OnTimer_AutoEquipFuel("");
		else
			Map_RemoveTimer("OnTimer_AutoEquipFuel");
	}
 
	//-------------------------------------------------------
	
	void OnTimer_AutoEquipFuel(const tString &in asTimer)
	{
		if (Item_IsHeld(eItemHandlerHand_Right))
		{
			Map_AddTimer("OnTimer_AutoEquipFuel", 0.5, "OnTimer_AutoEquipFuel");
			return;
		}
		
		tString sFuelType = "";
		if (ItemType_GetCountInInventory("Fuel") > 0)
		{
			sFuelType = "Fuel";
		}
		else if (ItemType_GetCountInInventory("FuelBottle") > 0)
		{
			sFuelType = "FuelBottle";
		}
		
		if (sFuelType == "") return;
		
		Item_Equip(ItemType_GetFirstInInventory(sFuelType));
	}
		
	//-------------------------------------------------------
		 
	bool CanUse_Fuel(const tString &in asItemType, const tString &in asItemID, const tString &in asPickedEntity)
	{
		return asPickedEntity == "Trigger_FuelHatch";
	}
		
	//-------------------------------------------------------
		 
	bool CanUse_FuelBottle(const tString &in asItemType, const tString &in asItemID, const tString &in asPickedEntity)
	{
		return CanUse_Fuel(asItemType, asItemID, asPickedEntity);
	}
		
	//-------------------------------------------------------
	
	bool OnUse_FuelBottle(const tString &in asItemType, const tString &in asItemID, const tString &in asTargetEntity, const tString &in asItemEntity, float afTimeElapsed, float afTimeStep)
	{
		return OnUse_Fuel(asItemType, asItemID, asTargetEntity, asItemEntity, afTimeElapsed, afTimeStep);
	}
	
		//-------------------------------------------------------
	
	bool OnUse_Fuel(const tString &in asItemType, const tString &in asItemID, const tString &in asTargetEntity, const tString &in asItemEntity, float afTimeElapsed, float afTimeStep)
	{
		/////////////////
		// Check fullness
		if (Generator_GetFullness() > Generator_GetFullnessInteractLimit())
		{
			Hint_ShowPrompt("Hints", "HintGeneratorFull", false, 1.f, false);
			Item_StopUsing(eItemHandlerHand_Right);
			return true;
		}
		
		/////////////////
		// Play anims
		tString sPlayerAnim = asItemType == "Fuel" ? "player_generator_refuelling_cannister" : "player_generator_refuelling_bottle";

        cLux_AddDebugMessage("GENERATOR X: "+Map_GetEntity("Generator").GetMainBody().GetLocalPosition().x);
		cLux_AddDebugMessage("GENERATOR Y: "+Map_GetEntity("Generator").GetMainBody().GetLocalPosition().y);
		cLux_AddDebugMessage("GENERATOR Z: "+Map_GetEntity("Generator").GetMainBody().GetLocalPosition().z);
        
        cVector3f vPos;
        float fAngle;
		CalculateFuelCutscenePosAngle(vPos, fAngle);
		
		// cutscene details
		PlayerBody_SetUnequipItemsOnCutscene(true, false);
		PlayerBody_PlayCutsceneAnimation(sPlayerAnim, false, 0.3f, "OnAnimEnd_RefillGenerator", 1.f, 0.f, true, vPos, fAngle);
		PlayerBody_SetArmAnimationPitch(true, true, asItemType == "Fuel");
		PlayerBody_SetArmAnimationYaw(false, true, true);
		PlayerBody_SetCutsceneMaxPitch(0.f);
		PlayerBody_SetCutsceneMaxYaw(0.f);
		
		if (asItemType == "Fuel")
			Entity_PlayAnimation(Item_GetHeldEntity(eItemHandlerHand_Right), "fuel_cannister_refuelling_generator", 0.3f, false);
		if (asItemType == "FuelBottle")
			Map_AddTimer("Timer_HideFuelBottleCork", 0.99f, "OnTimer_HideFuelBottleCork");
		
		/////////////////
		// Add fuel
		Map_AddTimer("Timer_AddGeneratorFuel", 1.f, "OnTimer_AddGeneratorFuel");	
		
		/////////////////
		// Store item data
		msUsedFuelItemID = asItemID;
		msUsedFuelItemType = asItemType;
		return false;
	}
	
	void CalculateFuelCutscenePosAngle(cVector3f &out vPos, float &out fAngle) {
		//Generator position coordinates
		vPos.x = Map_GetEntity("Generator").GetMainBody().GetWorldPosition().x;
		vPos.y = Map_GetEntity("Generator").GetMainBody().GetWorldPosition().y;
		vPos.z = Map_GetEntity("Generator").GetMainBody().GetWorldPosition().z;
		
        //Get generator rotation vector (not entirely accurate to the values seen in level editor.
		//Example: in level editor -> (0, 180, 0) while this vector gets -> (180, 0, 180) which is equivalent)
        cVector3f vGen = Entity_GetRotationEuler("Generator");
        cLux_AddDebugMessage("ROUNDED UP ANGLE: "+ cMath_Round(cMath_ToDeg(vGen.y)));
        
        //Checks for approximated Y rotation: 0, 90, 180, 270. Then apply the proper coordinates offset.
        if(cMath_Round(cMath_ToDeg(vGen.y)) >= 0 && cMath_Round(cMath_ToDeg(vGen.y)) < 90 && 
        cMath_Round(cMath_ToDeg(vGen.x)) >= 0 && cMath_Round(cMath_ToDeg(vGen.x)) < 90 && 
        cMath_Round(cMath_ToDeg(vGen.z)) >= 0 && cMath_Round(cMath_ToDeg(vGen.z)) < 90){
            //Y rotation: 0
            cLux_AddDebugMessage("0");
            vPos.x = vPos.x - 0.664f;
            vPos.y = vPos.y - 1.127f;
            vPos.z = vPos.z + 0.974f;
        }
        else if(cMath_Round(cMath_ToDeg(vGen.y)) >= 90 && cMath_Round(cMath_ToDeg(vGen.y)) < 180){
            //Y rotation: 90
            cLux_AddDebugMessage("90");
            vPos.x = vPos.x + 0.974f;
            vPos.y = vPos.y - 1.127f;
            vPos.z = vPos.z + 0.664f;
        }
        else if(    (cMath_Round(cMath_ToDeg(vGen.y)) >= 175 && cMath_Round(cMath_ToDeg(vGen.y)) < 265) || 
        (cMath_Round(cMath_ToDeg(vGen.y)) >= -5 && cMath_Round(cMath_ToDeg(vGen.y)) < 90 &&
		cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) < 190 && 
        cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z)))  >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z))) < 190)         ){
            //Y rotation: 180
            cLux_AddDebugMessage("180");
            vPos.x = vPos.x + 0.664f;
            vPos.y = vPos.y - 1.127f;
            vPos.z = vPos.z - 0.974f;
        }
        else if(cMath_Round(cMath_ToDeg(vGen.y)) >= -95 && cMath_Round(cMath_ToDeg(vGen.y)) < 5.f){
            //Y rotation: 270
            cLux_AddDebugMessage("270");
            vPos.x = vPos.x - 0.974f;
            vPos.y = vPos.y - 1.127f;
            vPos.z = vPos.z - 0.664f;
        }
        
        
		cLux_AddDebugMessage("vPos X: "+vPos.x);
		cLux_AddDebugMessage("vPos Y: "+vPos.y);
		cLux_AddDebugMessage("vPos Z: "+vPos.z);
        
        //fAngle = cMath_PiDiv2;
        
        fAngle = vGen.y;
        if(cMath_Round(cMath_ToDeg(vGen.y)) >= -5 && cMath_Round(cMath_ToDeg(vGen.y)) < 90 &&
        cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) < 190 && 
        cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z))) >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z))) < 190){
            
            fAngle = cMath_Pi;
            cLux_AddDebugMessage("ADJUSTING ANGLE: "+ cMath_ToDeg(fAngle));
        }
        
        cLux_AddDebugMessage("FINAL ANGLE: "+ cMath_ToDeg(fAngle));
	}
	
	//-------------------------------------------------------
	
	void OnTimer_HideFuelBottleCork(const tString &in asTimer)
	{
		iLuxEntity@ pEnt = Map_GetEntity(Item_GetHeldEntity(eItemHandlerHand_Right), eLuxEntityType_Prop);
		cSubMeshEntity@ pSubMesh = pEnt !is null ? pEnt.GetMeshEntity().GetSubMeshEntityName("cork") : null;
		
		if (pEnt is null) return;
		if (pSubMesh is null) return;
		
		pSubMesh.SetVisible(false);
	}
	
	//-------------------------------------------------------
	
	void OnTimer_AddGeneratorFuel(const tString &in asTimer)
	{
		Generator_AddFuel(1);
		mbHasAddedFuel = true;
		GameStats_IncreaseEntryAmount(eHeroStats_GeneratorRefills);
		Sound_CreateAtEntity("Sound_FuelRefill", "officer_hub/generator/fuel_refill", "Trigger_FuelHatch");
	}
	
	//-------------------------------------------------------
	
	void OnAnimEnd_RefillGenerator(const tString &in asAnim)
	{
		Player_SetCrouching(false, true, true);
		
		/////////////////////
		// Remove from inventory if any
		Item_RemoveFromInventory(msUsedFuelItemID, eInventoryInstance_Player, false, true);
		
		bool bEquip = false;
		if (ItemType_GetCountInInventory(msUsedFuelItemType) > 0)
		{
			bEquip = true;
			Item_Equip(ItemType_GetFirstInInventory(msUsedFuelItemType));
		}
		else
		{
			tString sOtherType = msUsedFuelItemType == "Fuel" ? "FuelBottle" : "Fuel";
			
			if (ItemType_GetCountInInventory(sOtherType) > 0)
			{
				bEquip = true;
				Item_Equip(ItemType_GetFirstInInventory(sOtherType));
			}
		}
		
		if (bEquip == false)
		{
			PlayerBody_SetArmAnimationPitch(false, true, true);
			PlayerBody_SetArmAnimationYaw(false, true, true);
		}
	}
	
	
	////// Power switch for entrance door
	
	void OnConnectionState_PowerSwitch(const tString &in asEntity, int alState)
	{
        cLux_AddDebugMessage(asEntity);
		if (alState == 0) return;
		if (cLux_GetCurrentMap() is null) return;
		if (cLux_IsChangingMap()) return;
		if (Generator_GetIsSetupDone() == false) return;
		cLux_AddDebugMessage("POWERSWITCH");
		Generator_SetPowerSwitchOn(asEntity, alState == -1);
		if (alState == -1) {
			if (Generator_GetFuelTimeLeft() > 0) {
				SlideDoor_SetOpenAmount("metal_security_door_1", 1.0f, false);
			} else {
				Lever_SetStuckState("PowerSwitch_1", 1, true);
			}
		}			
		else {
			SlideDoor_SetClosed("metal_security_door_1", true, false);
		}
	}
	
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		/*Put any functions that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE X 
}