#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"
#include "helpers/helper_rotation.hps"

//Unique escapade includes:
#include "escapade_custom/helpers/helper_music_control.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/

//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("storage");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
        Entity_Preload("stalker_1");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		// Preload maps
        //{
            //Map_Preload("escapade_entrance.hpm");
            //Map_Preload("escapade_library.hpm");
            //Map_Preload("escapade_church.hpm");
            Map_Preload("escapade_underground.hpm");
        //}
        
		Map_SetFogActive(false);
		Map_SetSecondaryFogActive(false);
		Light_SetVisible("Light_Box_4", false); 
        
		
		//scaredByStalker = false;  //this is now a global var
		firstEnterFromChurch = false;
		
		SetupCodeLockerDoor();
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
			Entity_SetActive("debugitem_*", true);
			Item_SetCurrentSlotsCount(15);
			Item_AddToInventory("DynamoLantern");
			Item_AddManyToInventory("Ammunition",20);
			Item_AddToInventory("Cutters");
			
			// normally needs shotgun
			SwingDoor_SetLocked("castle_5", false,false);
		}
        
        
	}
    
    
	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		///////////////////////
		// Setup player body
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
		
		SetupGenerator();
		
        SetupFuelTapStorage();
		
		SetupMusicAmbienceBasedOnGen();
        
        // If gen is off, set levers off
        if(Generator_GetFuelTimeLeft() <= 0){
            Lever_SetStuckState("PowerSwitch_*", -1, true);

            Generator_SetPowerSwitchOn("PowerSwitch_1", false);
        }
        
        //Debug
        //Entity_SetActive("stalker_1", true);
		
		if(cScript_GetGlobalVarBool("entrance_alt_unlocked")){ 
			SetupColorgrading_EntranceAlt();
		}
		
		SetupStalkerAppearance();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
        Sound_Stop("Sound_GeneratorStop",0.f);
		
		Music_Stalker_StopDeaggroSongChecks();
	}
	
        
    bool OnCollide_CloseExitDoors(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            //SwingDoor_SetAutoClose("door_exit_*", true);
            //SwingDoor_SetOpenAmount("door_exit_entrance", 0.0f);
            cLux_AddDebugMessage("START CLOSE");
            SwingDoor_SetClosed("door_exit_*", true, true);
            Map_AddTimer("doorg", 0.05f, "OnTimer_PreventDoorGlitch");
        }
        return true;
    }
    
    void OnTimer_PreventDoorGlitch(const tString &in asTimer){
        cLux_AddDebugMessage("CLOSE");
        SwingDoor_SetOpenAmount("door_exit_*", 0.0f);
    }
    
	bool OnTrigger_Player_Transfer_Underground(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_underground.hpm", "MapTransfer_StorageUnderground");
		return true;
	}
	
    bool OnTrigger_Player_SwitchMap_EntranceMap(const tString &in asParent, const tString &in asChild, int alState)
    {
        
        if(cScript_GetGlobalVarBool("entrance_alt_unlocked") ){
            
            Game_DoMapChange("escapade_entrance_alt.hpm", "MapTransfer_EntranceStorage");
            
        }else{

            Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceStorage");
            
        }
        
        return true;
    }
    
    bool OnTrigger_Player_Transfer_Church_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_church.hpm", "MapTransfer_StorageChurch");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_Entrance_Two(const tString &in asParent, const tString &in asChild, int alState)
	{
        
        if(cScript_GetGlobalVarBool("entrance_alt_unlocked") ){
            
            Game_DoMapChange("escapade_entrance_alt.hpm", "MapTransfer_EntranceStorage_2");
            
        }else{

            Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceStorage_2");
            
        }
        
		return true;
	}
    
    bool OnTrigger_Player_Transfer_LibraryDining(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_library.hpm", "MapTransfer_KitchenDining");
		return true;
	}
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
        if (cLux_ScriptDebugOn())
		{
			if (alAction == eAction_Test7)
			{
				Entity_SetActive("Trigger_KillGenerator", false);
				Generator_SetFuelAmount(0);
				Generator_SetRunForever(false);
				Generator_ChangeState(eGeneratorState_Off);
				cLux_AddDebugMessage("Generator Off");
			}
		
			if (alAction == eAction_Test8)
			{
				Entity_SetActive("Trigger_KillGenerator", true);
				Generator_AddFuel(2);
				Generator_ChangeState(eGeneratorState_On);
				Generator_SetRunForever(true);
				cLux_AddDebugMessage("Generator On");
			}
		}
        
		if (alAction == eAction_Flashlight)
		{
			OnAction_CustomizedLightSources();
		}
	}
	
	// Hold F for lantern, press F for lighter/crafted torch

	void OnAction_CustomizedLightSources() {
	
		tString sItemID = ItemType_GetFirstInInventory("Lighter");
		if (sItemID != "") {
			if (Item_GetHeldType(eItemHandlerHand_Left) == "DynamoLantern" && Item_IsLightSourceActive()) {
				Item_PutAway(eItemHandlerHand_Left);
			}
			sItemID = ItemType_GetFirstInInventory("Torch");
			if (sItemID != "") {
				Item_ToggleHeldItem("Torch");
			} else {
				Item_ToggleHeldItem("Lighter");
			}
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	///// Simpler stuff
 
	void chain_break_Callback(const tString &in asEntity)
	{
		Prop_SetStaticPhysics("door_" + asEntity, false);
	}
	
	void chain_3_Callback(const tString &in asEntity)
	{
		Map_GetEntity("GhoulHole_Shotgun").SetPosition(cVector3f(76.75,-1,-76.25));
		// to-do, make sure this works, debug position
		chain_break_Callback(asEntity);
	}
	
	void SetupMusicAmbienceBasedOnGen() {
		if (Generator_GetFuelTimeLeft() <= 0) {
			Music_PlayExt_Save("storehouse_darkness", true, 0.3f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
		} else {
			Music_PlayExt_Save("storehouse_genison", true, 0.35f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
		}
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	////// Generator
	
	bool mbHasAddedFuel = true;
	tString msUsedFuelItemID = "";
	tString msUsedFuelItemType = "";
	
	void OnStateChange_Generator(int alState) {		
		SetupMusicAmbienceBasedOnGen();
		
		
		if (alState!=1) {
			Map_SetFogActive(false);
			Map_SetSecondaryFogActive(true);
			Light_SetVisible("Light_Box_4", false);  
			//Sound_Play("Sound_GeneratorOff", 0.f);
			SlideDoor_SetClosed("metal_security_door_1", true, false);
            Lever_SetStuckState("PowerSwitch_*", -1, true);
            
            Generator_SetPowerSwitchOn("PowerSwitch_1", false);
		} else {
			Map_SetFogActive(true);
			Map_SetSecondaryFogActive(true);
			Light_SetVisible("Light_Box_4", true);
            Generator_SetPowerSwitchOn("PowerSwitch_1", true);
            //Lever_SetStuckState("PowerSwitch_*", 1, true);
		}
	}
	
	//-------------------------------------------------------
	
	void SetupGenerator()
	{
		Generator_SetupEntities("Generator", "Generator_PowerLamp", "Generator_Lever", "Generator_FuelGauge", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
       
        Generator_AddPowerSwitch("PowerSwitch_1", "", "", "Lamp_PowerSwitch_1_*", false);
		Generator_EndSetup();
	}
	
		//-------------------------------------------------------
	
	void OnLookAt_FuelHatch(const tString &in asEntity, int alState)
	{
		Entity_SetPlayerLookAtCallback(asEntity, "OnLookAt_FuelHatchAutoEquip", false, false, false, 2);
	}
	
	//-------------------------------------------------------
	
	void OnLookAt_FuelHatchAutoEquip(const tString &in asEntity, int alState)
	{
		if (alState == 1 && mbHasAddedFuel)
			OnTimer_AutoEquipFuel("");
		else
			Map_RemoveTimer("OnTimer_AutoEquipFuel");
	}
 
	//-------------------------------------------------------
	
	void OnTimer_AutoEquipFuel(const tString &in asTimer)
	{
		if (Item_IsHeld(eItemHandlerHand_Right))
		{
			Map_AddTimer("OnTimer_AutoEquipFuel", 0.5, "OnTimer_AutoEquipFuel");
			return;
		}
		
		tString sFuelType = "";
		if (ItemType_GetCountInInventory("Fuel") > 0)
		{
			sFuelType = "Fuel";
		}
		else if (ItemType_GetCountInInventory("FuelBottle") > 0)
		{
			sFuelType = "FuelBottle";
		}
		
		if (sFuelType == "") return;
		
		Item_Equip(ItemType_GetFirstInInventory(sFuelType));
	}
		
	//-------------------------------------------------------
		 
	bool CanUse_Fuel(const tString &in asItemType, const tString &in asItemID, const tString &in asPickedEntity)
	{
		return asPickedEntity == "Trigger_FuelHatch";
	}
		
	//-------------------------------------------------------
		 
	bool CanUse_FuelBottle(const tString &in asItemType, const tString &in asItemID, const tString &in asPickedEntity)
	{
		return CanUse_Fuel(asItemType, asItemID, asPickedEntity);
	}
		
	//-------------------------------------------------------
	
	bool OnUse_FuelBottle(const tString &in asItemType, const tString &in asItemID, const tString &in asTargetEntity, const tString &in asItemEntity, float afTimeElapsed, float afTimeStep)
	{
		return OnUse_Fuel(asItemType, asItemID, asTargetEntity, asItemEntity, afTimeElapsed, afTimeStep);
	}
	
		//-------------------------------------------------------
	
	bool OnUse_Fuel(const tString &in asItemType, const tString &in asItemID, const tString &in asTargetEntity, const tString &in asItemEntity, float afTimeElapsed, float afTimeStep)
	{
		/////////////////
		// Check fullness
		if (Generator_GetFullness() > Generator_GetFullnessInteractLimit())
		{
			Hint_ShowPrompt("Hints", "HintGeneratorFull", false, 1.f, false);
			Item_StopUsing(eItemHandlerHand_Right);
			return true;
		}
		
		/////////////////
		// Play anims
		tString sPlayerAnim = asItemType == "Fuel" ? "player_generator_refuelling_cannister" : "player_generator_refuelling_bottle";

        cLux_AddDebugMessage("GENERATOR X: "+Map_GetEntity("Generator").GetMainBody().GetLocalPosition().x);
		cLux_AddDebugMessage("GENERATOR Y: "+Map_GetEntity("Generator").GetMainBody().GetLocalPosition().y);
		cLux_AddDebugMessage("GENERATOR Z: "+Map_GetEntity("Generator").GetMainBody().GetLocalPosition().z);
        
        cVector3f vPos;
        float fAngle;
		CalculateFuelCutscenePosAngle(vPos, fAngle);
		
		// cutscene details
		PlayerBody_SetUnequipItemsOnCutscene(true, false);
		PlayerBody_PlayCutsceneAnimation(sPlayerAnim, false, 0.3f, "OnAnimEnd_RefillGenerator", 1.f, 0.f, true, vPos, fAngle);
		PlayerBody_SetArmAnimationPitch(true, true, asItemType == "Fuel");
		PlayerBody_SetArmAnimationYaw(false, true, true);
		PlayerBody_SetCutsceneMaxPitch(0.f);
		PlayerBody_SetCutsceneMaxYaw(0.f);
		
		if (asItemType == "Fuel")
			Entity_PlayAnimation(Item_GetHeldEntity(eItemHandlerHand_Right), "fuel_cannister_refuelling_generator", 0.3f, false);
		if (asItemType == "FuelBottle")
			Map_AddTimer("Timer_HideFuelBottleCork", 0.99f, "OnTimer_HideFuelBottleCork");
		
		/////////////////
		// Add fuel
		Map_AddTimer("Timer_AddGeneratorFuel", 1.f, "OnTimer_AddGeneratorFuel");	
		
		/////////////////
		// Store item data
		msUsedFuelItemID = asItemID;
		msUsedFuelItemType = asItemType;
		return false;
	}
	
	void CalculateFuelCutscenePosAngle(cVector3f &out vPos, float &out fAngle) {
		//Generator position coordinates
		vPos.x = Map_GetEntity("Generator").GetMainBody().GetWorldPosition().x;
		vPos.y = Map_GetEntity("Generator").GetMainBody().GetWorldPosition().y;
		vPos.z = Map_GetEntity("Generator").GetMainBody().GetWorldPosition().z;
		
        //Get generator rotation vector (not entirely accurate to the values seen in level editor.
		//Example: in level editor -> (0, 180, 0) while this vector gets -> (180, 0, 180) which is equivalent)
        cVector3f vGen = Entity_GetRotationEuler("Generator");
        cLux_AddDebugMessage("ROUNDED UP ANGLE: "+ cMath_Round(cMath_ToDeg(vGen.y)));
        
        //Checks for approximated Y rotation: 0, 90, 180, 270. Then apply the proper coordinates offset.
        if(cMath_Round(cMath_ToDeg(vGen.y)) >= 0 && cMath_Round(cMath_ToDeg(vGen.y)) < 90 && 
        cMath_Round(cMath_ToDeg(vGen.x)) >= 0 && cMath_Round(cMath_ToDeg(vGen.x)) < 90 && 
        cMath_Round(cMath_ToDeg(vGen.z)) >= 0 && cMath_Round(cMath_ToDeg(vGen.z)) < 90){
            //Y rotation: 0
            cLux_AddDebugMessage("0");
            vPos.x = vPos.x - 0.664f;
            vPos.y = vPos.y - 1.127f;
            vPos.z = vPos.z + 0.974f;
        }
        else if(cMath_Round(cMath_ToDeg(vGen.y)) >= 90 && cMath_Round(cMath_ToDeg(vGen.y)) < 180){
            //Y rotation: 90
            cLux_AddDebugMessage("90");
            vPos.x = vPos.x + 0.974f;
            vPos.y = vPos.y - 1.127f;
            vPos.z = vPos.z + 0.664f;
        }
        else if(    (cMath_Round(cMath_ToDeg(vGen.y)) >= 175 && cMath_Round(cMath_ToDeg(vGen.y)) < 265) || 
        (cMath_Round(cMath_ToDeg(vGen.y)) >= -5 && cMath_Round(cMath_ToDeg(vGen.y)) < 90 &&
		cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) < 190 && 
        cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z)))  >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z))) < 190)         ){
            //Y rotation: 180
            cLux_AddDebugMessage("180");
            vPos.x = vPos.x + 0.664f;
            vPos.y = vPos.y - 1.127f;
            vPos.z = vPos.z - 0.974f;
        }
        else if(cMath_Round(cMath_ToDeg(vGen.y)) >= -95 && cMath_Round(cMath_ToDeg(vGen.y)) < 5.f){
            //Y rotation: 270
            cLux_AddDebugMessage("270");
            vPos.x = vPos.x - 0.974f;
            vPos.y = vPos.y - 1.127f;
            vPos.z = vPos.z - 0.664f;
        }
        
        
		cLux_AddDebugMessage("vPos X: "+vPos.x);
		cLux_AddDebugMessage("vPos Y: "+vPos.y);
		cLux_AddDebugMessage("vPos Z: "+vPos.z);
        
        //fAngle = cMath_PiDiv2;
        
        fAngle = vGen.y;
        if(cMath_Round(cMath_ToDeg(vGen.y)) >= -5 && cMath_Round(cMath_ToDeg(vGen.y)) < 90 &&
        cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.x))) < 190 && 
        cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z))) >= 170 && cMath_Abs(cMath_Round(cMath_ToDeg(vGen.z))) < 190){
            
            fAngle = cMath_Pi;
            cLux_AddDebugMessage("ADJUSTING ANGLE: "+ cMath_ToDeg(fAngle));
        }
        
        cLux_AddDebugMessage("FINAL ANGLE: "+ cMath_ToDeg(fAngle));
	}
	
	//-------------------------------------------------------
	
	void OnTimer_HideFuelBottleCork(const tString &in asTimer)
	{
		iLuxEntity@ pEnt = Map_GetEntity(Item_GetHeldEntity(eItemHandlerHand_Right), eLuxEntityType_Prop);
		cSubMeshEntity@ pSubMesh = pEnt !is null ? pEnt.GetMeshEntity().GetSubMeshEntityName("cork") : null;
		
		if (pEnt is null) return;
		if (pSubMesh is null) return;
		
		pSubMesh.SetVisible(false);
	}
	
	//-------------------------------------------------------
	
	void OnTimer_AddGeneratorFuel(const tString &in asTimer)
	{
		Generator_AddFuel(1);
		mbHasAddedFuel = true;
		GameStats_IncreaseEntryAmount(eHeroStats_GeneratorRefills);
		Sound_CreateAtEntity("Sound_FuelRefill", "officer_hub/generator/fuel_refill", "Trigger_FuelHatch");
	}
	
	//-------------------------------------------------------
	
	void OnAnimEnd_RefillGenerator(const tString &in asAnim)
	{
		Player_SetCrouching(false, true, true);
		
		/////////////////////
		// Remove from inventory if any
		Item_RemoveFromInventory(msUsedFuelItemID, eInventoryInstance_Player, false, true);
		
		bool bEquip = false;
		if (ItemType_GetCountInInventory(msUsedFuelItemType) > 0)
		{
			bEquip = true;
			Item_Equip(ItemType_GetFirstInInventory(msUsedFuelItemType));
		}
		else
		{
			tString sOtherType = msUsedFuelItemType == "Fuel" ? "FuelBottle" : "Fuel";
			
			if (ItemType_GetCountInInventory(sOtherType) > 0)
			{
				bEquip = true;
				Item_Equip(ItemType_GetFirstInInventory(sOtherType));
			}
		}
		
		if (bEquip == false)
		{
			PlayerBody_SetArmAnimationPitch(false, true, true);
			PlayerBody_SetArmAnimationYaw(false, true, true);
		}
	}
	
	
	////// Power switch for entrance door
	
	void OnConnectionState_PowerSwitch(const tString &in asEntity, int alState)
	{
        cLux_AddDebugMessage(asEntity);
		if (alState == 0) return;
		//if (cLux_GetCurrentMap() is null) return;
		//if (cLux_IsChangingMap()) return;
		//if (Generator_GetIsSetupDone() == false) return;
		cLux_AddDebugMessage("POWERSWITCH");
		
		if (alState == 1) {
			if (Generator_GetFuelTimeLeft() > 0) {
				SlideDoor_SetOpenAmount("metal_security_door_1", 1.0f, false);
				Lamp_SetLit("Lamp_FakeBackup_*",false,true); 
				Lamp_SetLit("Lamp_PowerSwitch_1_*",true,true);
                Generator_SetPowerSwitchOn("PowerSwitch_1", true);
			} else {
				Lever_SetStuckState("PowerSwitch_1", -1, true);
                Generator_SetPowerSwitchOn("PowerSwitch_1", false);
			}
		}			
		if (alState == -1) {
			cLux_AddDebugMessage("POWERSWITCH CLOSED");
            SlideDoor_SetClosed("metal_security_door_1", true, false);
			Lamp_SetLit("Lamp_FakeBackup_*",true,true);
			Lamp_SetLit("Lamp_PowerSwitch_1_*",false,true);
		}
	}
	//////////////////////////////////////////////////////////////////////////////
	////////////// FUEL BOTTLE TAP

	tID m_idFuelTap = tID_Invalid;
    float mfFuelTapGlowCount = 0.f;
    float mfFuelTapGlowMul = 0.f;
    tString msUsedBottleItemID = "";
    tString msUsedBottleItemType = "";
		
		//-------------------------------------------------------
		
		void SetupFuelTapStorage() {
			Entity_StopAnimation("fuel_storage_tap_1");
			iLuxEntity@ pFuelTap = Map_GetEntity("fuel_storage_tap_1", eLuxEntityType_Prop);
			m_idFuelTap = pFuelTap !is null ? pFuelTap.GetID() : tID_Invalid;
		}
		
		//-------------------------------------------------------
			
		void OnLookAt_ShowFuelTankHint(const tString &in asEntity, int alState)
		{
			Hint_StopHint();
			Hint_ShowHint_Hold("Hints", "HintFuelTank", false, 1.5f);
		}	
		
		//-------------------------------------------------------
		
		bool CanUse_EmptyBottle(const tString &in asItemType, const tString &in asItemID, const tString &in asPickedEntity)
		{
			return asPickedEntity == "Escapade_Trigger_FuelBottleFiller";
		}
		
		//-------------------------------------------------------
		
    void VariableUpdate(float afDeltaTime)
	{
		///////////////////
		// Fuel tap highlight
		cLuxProp@ pProp = cLux_ID_Prop(m_idFuelTap);
		cMeshEntity@ pMeshEnt = pProp !is null ? pProp.GetMeshEntity() : null;
		
		if (pProp is null) return;
		if (pMeshEnt is null) return;
		
		bool bGlow = true;
		float fDistToPlayerSqr = (cLux_GetPlayer().GetCharacterBody().GetPosition() - pProp.GetPosition()).SqrLength();
		
		if (fDistToPlayerSqr > 4.f * 4.f)
			bGlow = false;
		if (cLux_GetPlayer().GetCurrentStateId() == ePlayerState_CutsceneAnimation)
			bGlow = false;
		
		float fGlowMulGoal = bGlow ? 1.f : 0.f;
		mfFuelTapGlowMul = cMath_IncreaseTo(mfFuelTapGlowMul, afDeltaTime * 2.f, fGlowMulGoal);
		
		if (mfFuelTapGlowMul <= 0.f)
		{
			mfFuelTapGlowCount = 0.f;
		}
		else
		{
			mfFuelTapGlowCount += afDeltaTime;
			if (mfFuelTapGlowCount >= 4.f)
				mfFuelTapGlowCount = 0.f;
		}		
		
		float fY = cMath_Min(mfFuelTapGlowCount, 1.f);
		float fGlow = 1.f - cMath_Abs(2.f * fY - 1.f);
		fGlow = cMath_Easing(eEasing_QuadInOut, fGlow) * mfFuelTapGlowMul;
		fY = cMath_Easing(eEasing_SineInOut, fY);
		
		float fColorMul = 3.f;
		cColor color = cColor(0.35f * fColorMul, 0.15f * fColorMul, 0.f, fGlow);
		
		if (fGlow > 0.f)
		{
			for (int i = 0; i < pMeshEnt.GetSubMeshEntityNum(); ++i)
			{
				cSubMeshEntity@ pSubMesh = pMeshEnt.GetSubMeshEntity(i);
				if (pSubMesh is null) continue;
				
				cLux_GetEffectHandler().AddGlowObject(pSubMesh, color, fY);
			}
		}
	}
        
		bool OnUse_EmptyBottle(const tString &in asItemType, const tString &in asItemID, const tString &in asTargetEntity, const tString &in asItemEntity, float afTimeElapsed, float afTimeStep)
		{			
			/////////////////
			// Play anims
			tString sPlayerAnim;
			tString sTapAnim;
			
			bool bCrouching = Player_GetCrouching();
			
			if (bCrouching)
			{
				sPlayerAnim = "player_fuel_storage_refill_crouched";
				sTapAnim = "faucet_fuel_storage_refill_crouched";
			}
			else
			{
				sPlayerAnim = "player_fuel_storage_refill_stand";
				sTapAnim = "faucet_fuel_storage_refill_stand";
			}
			
			cVector3f vPos(Map_GetEntity("fuel_storage_tap_align_1").GetPosition().x, Map_GetEntity("fuel_storage_tap_align_1").GetPosition().y, Map_GetEntity("fuel_storage_tap_align_1").GetPosition().z);
			float fAngle = 0.f;
			
			PlayerBody_SetUnequipItemsOnCutscene(true, false);
			PlayerBody_PlayCutsceneAnimation(sPlayerAnim, false, 0.3f, "OnAnimEnd_FillBottle", 1.f, 0.f, true, vPos, fAngle);
			PlayerBody_SetArmAnimationPitch(true, true, false);
			PlayerBody_SetArmAnimationYaw(false, true, true);
			PlayerBody_SetCutsceneMaxPitch(0.f);
			PlayerBody_SetCutsceneMaxYaw(0.f);
			
			Entity_PlayAnimation("fuel_storage_tap_1", sTapAnim, 0.3f, false);
						
			/////////////////
			// Store item data
			msUsedBottleItemID = asItemID;
			msUsedBottleItemType = asItemType;
			
			/////////////////
			// Update items timer
			Map_AddTimer("Timer_UpdateFillBottleItems", bCrouching ? 2.4f : 2.8f, "OnTimer_UpdateFillBottleItems");
			return false;
		}	
		
		//-------------------------------------------------------
		
		void OnTimer_UpdateFillBottleItems(const tString &in asTimer)
		{
			///////////////////
			// Remove from inventory
			Item_RemoveFromInventory(msUsedBottleItemID, eInventoryInstance_Player, false, true);
			
			///////////////////
			// Add to inventory
			tString sItemTypeToAdd = "";
			if (msUsedBottleItemType == "EmptyBottle")
				sItemTypeToAdd = "FuelBottle";
			else if (msUsedBottleItemType == "EmptyMolotovCocktail")
				sItemTypeToAdd = "MolotovCocktail";
				
			Item_AddToInventory(sItemTypeToAdd, eInventoryInstance_Player, true);
		}
		
		//-------------------------------------------------------
		
		void OnAnimEnd_FillBottle(const tString &in asAnim)
		{
			///////////////////
			// Setup player
			Player_SetCrouching(true, true, true);
			
			///////////////////
			// Auto equip
			bool bEquip = false;
			if (ItemType_GetCountInInventory(msUsedBottleItemType) > 0)
			{
				bEquip = true;
				Item_Equip(ItemType_GetFirstInInventory(msUsedBottleItemType));
			}
			else
			{
				tString sOtherType = msUsedBottleItemType == "EmptyBottle" ? "EmptyMolotovCocktail" : "EmptyBottle";
				
				if (ItemType_GetCountInInventory(sOtherType) > 0)
				{
					bEquip = true;
					Item_Equip(ItemType_GetFirstInInventory(sOtherType));
				}
			}
			
			if (bEquip == false)
			{
				PlayerBody_SetArmAnimationPitch(false, true, true);
				PlayerBody_SetArmAnimationYaw(false, true, true);
			}
		}		
		
		//-------------------------------------------------------
		
		//} END Event: The player fills bottles with fuel
		
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		
		////////////////////////////////////////
		//// Code Locker Door
		
		void SetupCodeLockerDoor(){
			if (cScript_GetGlobalVarInt("StorageCombination") == 0 && cLux_ScriptDebugOn()) {
				Dogtag_SetCombination("debugitem_dogtag", 1234);
				CombinationLock_SetCombination("GeneratorLock", 1234);
			} else {
				CombinationLock_SetCombination("GeneratorLock", cScript_GetGlobalVarInt("StorageCombination"));
			}			
		}
		
		/// Unlock door to generator with code
		
		void OnCombinationLock_Unlocked(const tString&in asEntityName)
		{
			cLux_AddDebugMessage("Door to generator unlocked with code");
		}
		
		
		
		//} END General	
	 
		/////////////////////////////////////////
		// Stalker scare events
		//{//////////////////////////////////////
		
		void SetupStalkerAppearance() {
			if (cScript_GetGlobalVarBool("scaredByStalker")) {
			Entity_SetActive("stalker_1", true);
			Music_Stalker_AddDeaggroSongTime("stalker_1", cScript_GetGlobalVarString("music_to_play"), cScript_GetGlobalVarFloat("music_to_play_volume"), 11.0f);
			//Stalker_SetEmergeAllowed("stalker_1", true);
			cLux_AddDebugMessage("Stalker is now ENABLED");
			}
		}
		
		//bool scaredByStalker;  // this is now a global var
		bool firstEnterFromChurch;
		
		bool OnTrigger_DisableStalkerScare(const tString &in asParent, const tString &in asChild, int alState)
		{
			if (alState == 1) {
				firstEnterFromChurch = true;
				return false;
			}
			return true;
		}
		
		bool OnCollide_StalkerFirst_Maze(const tString &in asParent, const tString &in asChild, int alState)
		{
			cLux_AddDebugMessage("RANDOMIZER CODE: "+cScript_GetGlobalVarInt("CombinationTest"));
			if (alState == 1) {
				if (!cScript_GetGlobalVarBool("scaredByStalker")) {
					Map_AddTimer("stalkerLightSequence", 2.0f, "Seq_StalkerLights");
                    //Seq_StalkerLights("");
					cScript_SetGlobalVarBool("scaredByStalker", true);
				}
				return false;
			} else
			return true;
		}
		
        
		cSequenceStatesData mSeq_StalkerLights;
		
		void Seq_StalkerLights(const tString &in asTimer){
			Sequence_Begin("Seq_StalkerLights", mSeq_StalkerLights);
		
			if (Sequence_DoStepAndWait(3.0f)) {
				FlickerLights();
				cLux_AddDebugMessage("Stalker sequence part 1");
			}
			
			else if (Sequence_DoStepAndWait(1.0f)) {
				StopFlickerLights();
				SwingDoor_SetClosed("wooden_door_1", true, true);
				cLux_AddDebugMessage("Stalker sequence part 2");
			}
			
			else if (Sequence_DoStepAndWait(5.0f)) {
				FlickerLights();
				cLux_AddDebugMessage("Stalker sequence part 3");
			}
			
			else if (Sequence_DoStepAndWait(0.5f)) {
				StopFlickerLights();
				cLux_AddDebugMessage("Stalker sequence part 4");
			}
			
			else if (Sequence_DoStepAndWait(5.0f)) {
				FlickerLights();
				StalkerRoars();
				cLux_AddDebugMessage("Stalker sequence part 5");
			}
			
			else if (Sequence_DoStepAndContinue()) {
				StopFlickerLights();
                
				//Entity_SetActive("stalker_1", true);
				
                Map_AddTimer("stalker_1_enable", 5.0f, "OnTimer_EnableStalker");
                // to-do , maybe give stalker player position?
				cLux_AddDebugMessage("Stalker sequence part end, stalker spawned");
			}
			
			Sequence_End();
		}
		
		void FlickerLights() {
			int randLightNum;
			for (int i = 1; i < 17; i++) {
				randLightNum = cMath_RandRectl(0,1);
				if (randLightNum == 0) {
					Lamp_SetFlickerActive("Lamp_FakeBackup_"+i, true);
				}
			}
		}
		
		void StopFlickerLights() {
			Lamp_SetFlickerActive("Lamp_FakeBackup_*", false);
			Lamp_SetLit("Lamp_FakeBackup_*", true, false);
		}
		
		void StalkerRoars() {
			//Sound_PlayGui("creatures/stalker/spot", 0.8f);
			//Sound_PlayGui("creatures/stalker/whine", 1.0f);
		}
		
        void OnTimer_EnableStalker(const tString &in asTimer){
            cLux_AddDebugMessage("STALKER ENABLED");
            Entity_SetActive("stalker_1", true);
        }
        
		//// looking at the generator through the door
		
		void metal_door_window_1_OnPlayerInteract(const tString &in asEntity)
		{
			DecideStalkerPeakaboo();
		}
		
		bool OnTrigger_StalkerPeekaboo(const tString &in asParent, const tString &in asChild, int alState)
		{
			if (alState == 1) {
				DecideStalkerPeakaboo();
				return false;
			}
			return true;
		}
		
		void DecideStalkerPeakaboo() {
			if (cScript_GetGlobalVarBool("scaredByStalker") || firstEnterFromChurch) {
				cLux_AddDebugMessage("Peakaboo cannot happen due to past events");
			} else {
				StalkerPeekaboo();
			}
		}
		
		void StalkerPeekaboo(){
			cScript_SetGlobalVarBool("scaredByStalker", true);
			Entity_SetActive("stalker_1", true);
			Map_GetEntity("stalker_1").SetPosition(cVector3f(31.25,-1.875,-62.75));
			Agent_RevealPlayerPosition("stalker_1", false);
			//Stalker_PlayCutsceneAtEntity("stalker_1", "");
			Sound_CreateAtEntity("stalkerspawns", "creatures/stalker/exit", "stalker_1");
			
			Map_AddTimer("stalkerAlertRoar", 1.0f, "OnTimer_StalkerAlertRoar");
			Map_AddTimer("stalkerDeAggroChance", 12.0f, "OnTimer_StalkerDeAggroChance");
		}
		
		void OnTimer_StalkerAlertRoar(const tString &in asTimer){
			Sound_PlayGui("creatures/stalker/attack", 1.0f);
		}
		
		void OnTimer_StalkerDeAggroChance(const tString &in asTimer){
			cLux_AddDebugMessage("Playerspeed: " + Player_GetSpeed());
			if (Player_GetCrouching() || Player_GetSpeed() < 1.0f) {
				Agent_ResetPlayerDetectionState("stalker_1");
				int randStalkerHole = cMath_RandRectl(4,10);
				Stalker_EmergeFromHole("stalker_1", "GhoulHole_" + randStalkerHole, false);
			}
		}
	//} END SCENE X 
	
	
void SetupColorgrading_EntranceAlt() {
        //Debug: test enable entrance_alt
        //cScript_SetGlobalVarBool("entrance_alt_unlocked", true);

            // Set ToneMapping values to match entrance_alt
            float afKey = 0.1f;
            float afGammaCorrection = 0.5f;
            float afFilmGrainIntensity = 1.0f;
            float afBrightPass = 0.75f;
            float afBloomWidth = 128.0;
            cColor avBloomTint;
            avBloomTint.a = 1.0f;
            avBloomTint.r = 1.0f;
            avBloomTint.g = 1.0f;
            avBloomTint.b = 1.0f;
            float afBloomFalloff = 0.5f;
            cLux_GetViewport().GetToneMappingEffect().SetParams(afKey, afGammaCorrection, afFilmGrainIntensity, afBrightPass, afBloomWidth, avBloomTint, afBloomFalloff);
            cLux_GetViewport().GetToneMappingEffect().SetGradingTexture(1, "bunker_prototype_01.dds", 1.0f);
            
            cLux_GetViewport().GetToneMappingEffect().SetActive(true);
            cLux_GetViewport().GetToneMappingEffect().SetColorGradingActive(true);
            cLux_GetViewport().GetToneMappingEffect().FadeWindowExposure(0.f, 3.25f);
            cLux_GetViewport().GetToneMappingEffect().SetBloomActive(true);
            
            cLux_AddDebugMessage("CHANGED TONEMAPPING");
            
            //Fog change

			cColor fogColor;
			fogColor.a = 1.0f;
			fogColor.r = 0.193f;
			fogColor.b = 0.263f;
			fogColor.g = 0.179f;
			
			cColor secondaryFogColor;
			secondaryFogColor.a = 1.0f;
			secondaryFogColor.r = 0.204f;
			secondaryFogColor.g = 0.081f;
			secondaryFogColor.b = 0.051f;
			
			Map_SetFogProperties(0.f, 100.0f, 2.0f, fogColor, false);
			Map_SetSecondaryFogProperties(10.0f, 50.0f, 1.5f, secondaryFogColor);
        
        
        cLux_GetViewport().GetToneMappingEffect().GetParams(afKey, afGammaCorrection, afFilmGrainIntensity, afBrightPass, afBloomWidth, avBloomTint, afBloomFalloff);
        
        /*cLux_AddDebugMessage("afKey: "+ afKey);
        cLux_AddDebugMessage("afBloomFalloff: "+ afBloomFalloff);
        cLux_AddDebugMessage("afFilmGrainIntensity: "+ afFilmGrainIntensity);
        cLux_AddDebugMessage("afBrightPass: "+ afBrightPass);
        cLux_AddDebugMessage("afBloomWidth: "+ afBloomWidth);
        cLux_AddDebugMessage("avBloomTint A: "+ avBloomTint.a);
        cLux_AddDebugMessage("avBloomTint R: "+ avBloomTint.r);
        cLux_AddDebugMessage("avBloomTint G: "+ avBloomTint.g);
        cLux_AddDebugMessage("avBloomTint B: "+ avBloomTint.b);
        cLux_AddDebugMessage("afBloomFalloff: "+ afBloomFalloff);
        
        cLux_AddDebugMessage("EXPOSURE: "+ cLux_GetViewport().GetToneMappingEffect().GetExposure());*/
	}
}