#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("xx-xx-dummy-level");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		
        {
            Map_Preload("escapade_entrance.hpm");
            Map_Preload("escapade_storage.hpm");
            Map_Preload("escapade_greenhouse.hpm");
        }
		
		if (cScript_GetGlobalVarInt("StorageCombination") == 0) {
			cScript_SetGlobalVarInt("StorageCombination", cMath_RandRectl(1, 9999));
		}
		Dogtag_SetCombination("dogtag_alphonse_withstring_1", cScript_GetGlobalVarInt("StorageCombination"));
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
		Item_AddToInventory("DynamoLantern");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		///////////////////////
		// Setup player body
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
		
		SetupGenerator();
        
        // Debug
        if(cLux_ScriptDebugOn()){
            Item_SetCurrentSlotsCount(50);
			if (ItemType_GetCountInInventory("Gun") == 0)
			{
				Item_AddToInventory("Gun");
				Item_AddManyToInventory("Ammunition", 20);
			}
            
        }
        
        // Check for unlocked padlocks and disable them
        for(int t = 0; t < 10; t++){
            if(cScript_GetGlobalVarBool("padlock_"+t)){
                Entity_SetActive("padlock_"+t, false);
            }
        }
        
        //--ColorGrading start--
        
        //Debug: test enable entrance_alt
        //cScript_SetGlobalVarBool("entrance_alt_unlocked", true);
        
        
        float afKey;
        float afGammaCorrection;
        float afFilmGrainIntensity;
        float afBrightPass;
        float afBloomWidth;
        cColor avBloomTint;
        float afBloomFalloff;

        if(cScript_GetGlobalVarBool("entrance_alt_unlocked")){ 
            // Set ToneMapping values to match entrance_alt
            float afKey = 0.1f;
            float afGammaCorrection = 0.5f;
            float afFilmGrainIntensity = 1.0f;
            float afBrightPass = 0.75f;
            float afBloomWidth = 128.0;
            cColor avBloomTint;
            avBloomTint.a = 1.0f;
            avBloomTint.r = 1.0f;
            avBloomTint.g = 1.0f;
            avBloomTint.b = 1.0f;
            float afBloomFalloff = 0.5f;
            cLux_GetViewport().GetToneMappingEffect().SetParams(afKey, afGammaCorrection, afFilmGrainIntensity, afBrightPass, afBloomWidth, avBloomTint, afBloomFalloff);
            cLux_GetViewport().GetToneMappingEffect().SetGradingTexture(1, "bunker_prototype_01.dds", 1.0f);
            
            cLux_GetViewport().GetToneMappingEffect().SetActive(true);
            cLux_GetViewport().GetToneMappingEffect().SetColorGradingActive(true);
            cLux_GetViewport().GetToneMappingEffect().FadeWindowExposure(0.f, 3.25f);
            cLux_GetViewport().GetToneMappingEffect().SetBloomActive(true);
            
            cLux_AddDebugMessage("CHANGED TONEMAPPING");
            
            //Fog change
        cColor fogColor;
        fogColor.a = 1.0f;
        fogColor.r = 0.193f;
        fogColor.b = 0.263f;
        fogColor.g = 0.179f;
        
        cColor secondaryFogColor;
        secondaryFogColor.a = 1.0f;
        secondaryFogColor.r = 0.204f;
        secondaryFogColor.g = 0.081f;
        secondaryFogColor.b = 0.051f;
        
        Map_SetFogProperties(0.f, 100.0f, 2.0f, fogColor, false);
        Map_SetSecondaryFogProperties(10.0f, 50.0f, 1.5f, secondaryFogColor);
        
        }
        
        
        cLux_GetViewport().GetToneMappingEffect().GetParams(afKey, afGammaCorrection, afFilmGrainIntensity, afBrightPass, afBloomWidth, avBloomTint, afBloomFalloff);
        
        cLux_AddDebugMessage("afKey: "+ afKey);
        cLux_AddDebugMessage("afBloomFalloff: "+ afBloomFalloff);
        cLux_AddDebugMessage("afFilmGrainIntensity: "+ afFilmGrainIntensity);
        cLux_AddDebugMessage("afBrightPass: "+ afBrightPass);
        cLux_AddDebugMessage("afBloomWidth: "+ afBloomWidth);
        cLux_AddDebugMessage("avBloomTint A: "+ avBloomTint.a);
        cLux_AddDebugMessage("avBloomTint R: "+ avBloomTint.r);
        cLux_AddDebugMessage("avBloomTint G: "+ avBloomTint.g);
        cLux_AddDebugMessage("avBloomTint B: "+ avBloomTint.b);
        cLux_AddDebugMessage("afBloomFalloff: "+ afBloomFalloff);
        
        cLux_AddDebugMessage("EXPOSURE: "+ cLux_GetViewport().GetToneMappingEffect().GetExposure());
        
        //--ColorGrading end--
        
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}
	
    void OnBreak_Padlock(const tString &in asEntity)
    {
        cScript_SetGlobalVarBool(asEntity, true);
        cLux_AddDebugMessage(""+ cScript_GetGlobalVarBool(asEntity));
    }
        
    bool OnCollide_CloseExitDoors(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            //SwingDoor_SetAutoClose("door_exit_*", true);
            //SwingDoor_SetOpenAmount("door_exit_entrance", 0.0f);
            cLux_AddDebugMessage("START CLOSE");
            SwingDoor_SetClosed("door_exit_*", true, true);
            Map_AddTimer("doorg", 0.05f, "OnTimer_PreventDoorGlitch");
        }
        return true;
    }
    
    void OnTimer_PreventDoorGlitch(const tString &in asTimer){
        cLux_AddDebugMessage("CLOSE");
        SwingDoor_SetOpenAmount("door_exit_*", 0.0f);
    }
    
    bool OnTrigger_Player_Transfer_StorageKitchen(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_storage.hpm", "MapTransfer_KitchenDining");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_GreenhouseFive(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_greenhouse.hpm", "MapTransfer_LibraryGreenhouse");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_DiningBallroomOne(const tString &in asParent, const tString &in asChild, int alState)
	{
        if(cScript_GetGlobalVarBool("entrance_alt_unlocked") ){
            Game_DoMapChange("escapade_entrance_alt.hpm", "MapTransfer_EntranceLibrary_1");
            
        }else{

            Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceLibrary_1");
        
        }
		
		return true;
	}
    
    bool OnTrigger_Player_Transfer_DiningBallroomTwo(const tString &in asParent, const tString &in asChild, int alState)
	{
		if(cScript_GetGlobalVarBool("entrance_alt_unlocked") ){
            Game_DoMapChange("escapade_entrance_alt.hpm", "MapTransfer_EntranceLibrary_2");
            
        }else{

            Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceLibrary_2");
        
        }
		return true;
	}
    
    bool OnTrigger_Player_Transfer_LibraryBallroom(const tString &in asParent, const tString &in asChild, int alState)
	{
		if(cScript_GetGlobalVarBool("entrance_alt_unlocked") ){
            Game_DoMapChange("escapade_entrance_alt.hpm", "MapTransfer_EntranceLibrary_3");
            
        }else{

            Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_EntranceLibrary_3");
        
        }
		return true;
	}
    
    bool OnTrigger_Player_Transfer_UndergroundDiningOne(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_underground.hpm", "MapTransfer_DiningWellUnderground");
		return true;
	}
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
		if (alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	/////////////////////////
	//// Generator
	
	void SetupGenerator()
	{
		Generator_SetupEntities("", "", "", "", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
		Generator_EndSetup();
	}
	
	void OnStateChange_Generator(int alState)
	{		
		///////////////////
		// Generator Sounds
		if (alState!=1)
			Sound_Play("Sound_GeneratorOff", 0.f);		
	}
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		/*Put any functions that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE X 
}