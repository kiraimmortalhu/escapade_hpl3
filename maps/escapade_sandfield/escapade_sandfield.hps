#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
    {
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("escapade-outro");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		//////////////
		// Preload entity
		Entity_Preload("player_rebirth_ghoul.ent");
        //PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
        
		cVector3f vRot = cVector3f(0, cMath_ToRad(142), 0);
		cLux_GetCurrentMap().GetWorld().SetSkyboxRotation(vRot);
		Music_PlayExt_Save("sandfield_ambience", true, 0.4f, 1, 5.0f, 5.0f, eMusicPrio_OverrideAll, true);
		
        
        //Sound_PlayGui("voice_iamready_1.snt", 1.0f);
        Player_StopBleeding();
        
		
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
			Item_AddToInventory("DynamoLantern");
		}
		
		Player_SetMoveSpeedMul(0.5f);
		Player_SetRunSpeedMul(0.5f);
        Seq_StalkerEvent("");
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
        
        Player_SetActive(true);
        Player_SetCanEquipItems(true);
        
        Player_SetHealth(1.0f);
        
        Game_SetupAfterMapChange();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
		if (alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
    
	//} END MAIN CALLBACKS
    
    int stalkerShake;
    cSequenceStatesData mSeqDataStalkerEvent;
    void Seq_StalkerEvent(const tString &in asTimer){
        Sequence_Begin("Seq_StalkerEvent", mSeqDataStalkerEvent);
        if(Sequence_DoStepAndWait(2.0f)){
            
        }        
        else if(Sequence_DoStepAndWait(1.0f)){
            
            
            
            stalkerShake = Effect_Shake_Start(0.2f, 0.5f, 0.25f, 0.25f);
            int particle1 = cMath_RandRectl(1,3);
            int particle2 = cMath_RandRectl(4,6);
            ParticleSystem_CreateAtEntity("door_dust_"+particle1, "dust_impact_door_hit.ps", "dust_impact_"+particle1, true);
            //ParticleSystem_CreateAtEntity("door_dust_2", "dust_impact_door_hit.ps", "dust_impact_2", true);
            ParticleSystem_CreateAtEntity("door_dust_3"+particle2, "dust_impact_door_hit.ps", "dust_impact_"+particle2, true);
            //ParticleSystem_CreateAtEntity("door_dust_4", "dust_impact_door_hit.ps", "dust_impact_4", true);
            Sound_Play("Stalker_bang", 0.0f);
            Sound_Play("Stalker_roar", 0.0f);
        }
        
        else if(Sequence_DoStepAndWait(0.5f)){
            Player_SetActive(false);
            Player_StartLookAt("Stalker_LookAt", 4.0f, 2.0f, 8.0f);
            
            stalkerShake = Effect_Shake_Start(0.2f, 0.5f, 0.25f, 0.25f);
            int particle1 = cMath_RandRectl(1,3);
            int particle2 = cMath_RandRectl(4,6);
            ParticleSystem_CreateAtEntity("door_dust_"+particle1, "dust_impact_door_hit.ps", "dust_impact_"+particle1, true);
            //ParticleSystem_CreateAtEntity("door_dust_2", "dust_impact_door_hit.ps", "dust_impact_2", true);
            ParticleSystem_CreateAtEntity("door_dust_3"+particle2, "dust_impact_door_hit.ps", "dust_impact_"+particle2, true);
            //ParticleSystem_CreateAtEntity("door_dust_4", "dust_impact_door_hit.ps", "dust_impact_4", true);
            Sound_Play("Stalker_bang", 0.0f);
            Sound_Play("Stalker_roar", 0.0f);
        }
        
        else if(Sequence_DoStepAndWait(1.0f)){
            Player_SetActive(false);
            Player_StartLookAt("Stalker_LookAt", 4.0f, 2.0f, 8.0f);
            
            
        }
        
        else if(Sequence_DoStepAndWait(1.0f)){
            
            stalkerShake = Effect_Shake_Start(0.2f, 0.5f, 0.25f, 0.25f);
            int particle1 = cMath_RandRectl(1,3);
            int particle2 = cMath_RandRectl(4,6);
            ParticleSystem_CreateAtEntity("door_dust_"+particle1, "dust_impact_door_hit.ps", "dust_impact_"+particle1, true);
            //ParticleSystem_CreateAtEntity("door_dust_2", "dust_impact_door_hit.ps", "dust_impact_2", true);
            ParticleSystem_CreateAtEntity("door_dust_3"+particle2, "dust_impact_door_hit.ps", "dust_impact_"+particle2, true);
            //ParticleSystem_CreateAtEntity("door_dust_4", "dust_impact_door_hit.ps", "dust_impact_4", true);
            Sound_Play("Stalker_bang", 0.0f);
            Sound_Play("Stalker_roar", 0.0f);
        }
        
        else if(Sequence_DoStepAndWait(0.5f)){
            Player_SetActive(true);
            Player_StopLookAt(0.0f);
            Map_AddTimer("env_look_check", 0.0f, "OnTimer_UpdateEnvironmentLookCheck");
        }
        
        else if(Sequence_DoStepAndWait(1.5f)){
            
            stalkerShake = Effect_Shake_Start(0.2f, 0.5f, 0.25f, 0.25f);
            int particle1 = cMath_RandRectl(1,3);
            int particle2 = cMath_RandRectl(4,6);
            ParticleSystem_CreateAtEntity("door_dust_"+particle1, "dust_impact_door_hit.ps", "dust_impact_"+particle1, true);
            //ParticleSystem_CreateAtEntity("door_dust_2", "dust_impact_door_hit.ps", "dust_impact_2", true);
            ParticleSystem_CreateAtEntity("door_dust_3"+particle2, "dust_impact_door_hit.ps", "dust_impact_"+particle2, true);
            //ParticleSystem_CreateAtEntity("door_dust_4", "dust_impact_door_hit.ps", "dust_impact_4", true);
            Sound_Play("Stalker_bang", 0.0f);
            Sound_Play("Stalker_roar", 0.0f);
        }
        
        Sequence_End();
    }
    
    void OnTimer_UpdateEnvironmentLookCheck(const tString &in asTimer){
        if(Entity_IsInPlayerFOV("env_look_1") || Entity_IsInPlayerFOV("env_look_2") || Entity_IsInPlayerFOV("env_look_3")){
            Sound_PlayGui("voice_iamready_1.snt", 1.0f);
        }
        else{
            Map_RestartCurrentTimer(0.1f);
        }
    }
    
    // Camera animation test
    void OnInteract_DebugCameraAnim(const tString &in asEntity)
    {
        CameraAnimation_Begin("CameraAnimation", "", true);
        
    }
    
    bool OnPassedNode_CameraAnimation_2(const tString &in asEntity, int alDirection)
    {
        //PlayerBody_SetActive(true);
        PlayerBody_SetVisible(true);
        Player_SetActive(true);
        Map_AddTimer("walkfwd", 0.0f, "OnTimer_WalkForward");
        return true;
    }
    
    void OnInteract_DebugAny(const tString &in asEntity)
    {
        Player_SetActive(false);
        //Player_MoveForward(100.5f);
        Map_AddTimer("walkfwd", 0.0f, "OnTimer_WalkForward");
        
    }
    
    void OnInteract_DebugWalkCamera(const tString &in asEntity)
    {
        
        PlayerBody_SetActive(false);
        PlayerBody_SetVisible(true);
        
        //Player_SetActive(true);
        /////////////////////////////////
		// Setup player camera
		cLuxPlayer@ pPlayer = cLux_GetPlayer();
		pPlayer.GetCharacterBody().SetCamera(null);
        //pPlayer.GetCamera().RemoveEntity()
        
        //cWorld@ zaWarudo = cLux_GetViewport().GetWorld();
        //pPlayer.GetCamera().AttachEntity(zaWarudo.GetEntityFromID(Map_GetEntityID("lockbox_1")));
        
        //pPlayer.SetCameraPosAdd(0, cVector3f(0.0f, 0.0f, 0.0f));
		pPlayer.GetCamera().SetRotateMode(eCameraRotateMode_Matrix);
        //
		pPlayer.GetCamera().SetRotationMatrix(Map_GetEntity("Trigger_3").GetMatrix().GetRotation().GetTranspose());
		pPlayer.GetCamera().SetPosition(Map_GetEntity("Trigger_3").GetPosition());
        
        Map_AddTimer("walkfwd", 0.0f, "OnTimer_WalkForward");
    }
    
    
    
    // -- END CUTSCENE BEGIN--
    
    bool OnCollide_BeginEnd(const tString &in asParent, const tString &in asChild, int alState)
    {
        Player_ShowCrossHairIcons(false);
        if(!Sound_GuiIsPlaying("voice_iamready_1")){
            Sound_PlayGui("voice_iamready_2.snt", 1.0f);
        }else{
            Map_AddTimer("nextvoiceline", 0.0f, "OnTimer_UpdateCheckForNextVoiceline");
        }
            
        
        CameraAnimation_Begin("End", "", false);
        //Entity_SetActive("Player_Walk", true);
        //Entity_PlayAnimation("Player_Walk", "walk_fwd_larm", 0.3f, true);
        //Entity_PlayAnimation("Player_Walk", "walk_fwd_rarm", 0.3f, true);
        ////Agent_PlayCutsceneAnimation("Player_Walk", "walk_fwd_larm", 0.3f, true, "", 1, 0, false, 0, 0, false, false, true);
        ////Entity_PlayAnimation("Player_Walk", "walk_fwd_rarm");
        //
        //Map_AddTimer("walkfwd", 0.0f, "OnTimer_WalkForwardEntity");
        return false;
    }
    
    void OnTimer_UpdateCheckForNextVoiceline(const tString &in asTimer){
        if(!Sound_GuiIsPlaying("voice_iamready_1")){
            Sound_PlayGui("voice_iamready_2.snt", 1.0f);
        }else{
            Map_RestartCurrentTimer(0.1f);
        }
    }
    
    void OnInteract_TestEnableWalk(const tString &in asEntity)
    {
        cLux_AddDebugMessage("TEST");
        Entity_SetActive("Player_Walk", true);
    }
    
    bool OnPassedNode_End2(const tString &in asEntity, int alDirection)
    {
        Entity_SetActive("Player_Walk", true);
        Entity_PlayAnimation("Player_Walk", "walk_fwd_larm", 0.3f, true);
        Entity_PlayAnimation("Player_Walk", "walk_fwd_rarm", 0.3f, true);
        //Agent_PlayCutsceneAnimation("Player_Walk", "walk_fwd_larm", 0.3f, true, "", 1, 0, false, 0, 0, false, false, true);
        //Entity_PlayAnimation("Player_Walk", "walk_fwd_rarm");
        
        Map_AddTimer("walkfwd", 0.0f, "OnTimer_WalkForwardEntity");
        return false;
    }
    
    bool OnPassedNode_End6(const tString &in asEntity, int alDirection)
    {
        Effect_Fade_Out(4.0f);
        return false;
    }
    
    bool OnPassedNode_End7(const tString &in asEntity, int alDirection)
    {
        OutroFade();
        return false;
    }
    
    void OnInteract_DebugEndCamera(const tString &in asEntity)
    {
        Entity_SetActive("Player_Walk", true);
        Entity_PlayAnimation("Player_Walk", "walk_fwd_larm", 0.3f, true);
        Entity_PlayAnimation("Player_Walk", "walk_fwd_rarm", 0.3f, true);
        //Agent_PlayCutsceneAnimation("Player_Walk", "walk_fwd_larm", 0.3f, true, "", 1, 0, false, 0, 0, false, false, true);
        //Entity_PlayAnimation("Player_Walk", "walk_fwd_rarm");
        
        Map_AddTimer("walkfwd", 0.0f, "OnTimer_WalkForwardEntity");
    }
    
    void OnTimer_WalkForward(const tString &in asTimer){
        Player_MoveForward(100.5f);
        Map_RestartCurrentTimer(0.1f);
    }
    
    void OnTimer_WalkForwardEntity(const tString &in asTimer){
        MoveEntityForward("Player_Walk");
        Map_RestartCurrentTimer(0.002f);
    }
    
    void MoveEntityForward(const tString &in asEntity){
        cLux_AddDebugMessage("MOVED FORWARD");
        if(Map_GetEntity(asEntity) == null) return;
        
        iLuxEntity@ entity = Map_GetEntity(asEntity);
        
        float x = entity.GetPosition().x;
        float y = entity.GetPosition().y;
        float z = entity.GetPosition().z + 0.01f;
        entity.SetPosition(cVector3f(x, y, z));
    }
    
    
	// to-do: placeholder credits - Unused function
	bool OnTrigger_OutroFade(const tString &in asParent, const tString &in asChild, int alState)
	{	
		if (alState == 1) {
		    Player_SetActive(false);
			Player_ShowCrossHairIcons(false);
			Player_SetBleedingActive(false);
			//Player_StopBleeding();
			Music_StopAll(0.0f);
			cScript_SetGlobalVarString("music_to_play", "");
			Credits_Start("Credits_Escapade.cfg","OnEndOfCredits", "", cVector3f(-0.15,-0.15,1.75f), "credits_calling_of_the_sea.ogg");
			return false;
		}
		return true;
	}
    
    void OutroFade(){
        Map_RemoveTimer("walkfwd");
        CameraAnimation_End();
        Player_SetActive(false);
        Player_ShowCrossHairIcons(false);
        Player_SetBleedingActive(false);
        //Player_StopBleeding();
        Music_StopAll(0.0f);
        cScript_SetGlobalVarString("music_to_play", "");
        Credits_Start("Credits_Escapade.cfg","OnEndOfCredits", "", cVector3f(-0.15,-0.15,1.75f), "credits_calling_of_the_sea.ogg");
    }
    
	
	void OnEndOfCredits()
	{
		if (!cLux_ScriptDebugOn())
		{
			GameStats_Save();
			GameStats_SetGuiActive(true);
		}
		else {
			Map_ChangeMap("main_menu.hpm","PlayerStartArea_1","","",false);
		}
	}
}
