#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"
#include "custom/helpers/helper_agent.hps"
#include "custom/helpers/helper_modules_custom.hps"
#include "custom/modules/EnvironmentalDamageHandler.hps"
#include "helpers/helper_effects.hps"

//Unique escapade includes:
#include "escapade_custom/helpers/helper_music_control.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("underground");
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		//{
            //Map_Preload("escapade_library.hpm");
            Map_Preload("escapade_entrance_alt.hpm");
        //}
		//PlayerBody_SetModel("player_rebirth_ghoul.ent");
		//PlayerBody_SetActive(true);
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
            Entity_SetActive("debugitem_*", true);
            Item_SetCurrentSlotsCount(15);
            Item_AddToInventory("DynamoLantern");
			Item_AddToInventory("Lighter");
		} else {
			Entity_SetActive("debugitem_*", false);
		}
        
        Entity_SetConnectionStateChangeCallback("arabic_lock*", "arabic_lock_OnConnectionStateChange");
		
		// deactivate elevator for now
		Entity_SetActive("lq_elevator*", false);
		Entity_SetActive("lq_elevator_midway", true);
		Light_SetVisible("Light_Point_22", false);
        
        Player_SetFallDamageActive(true);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
        
        ///////////////////////
		// Setup player body
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
        
		// making sure no softlock due to lock left closed, to-do: testing
		SwingDoor_SetOpenAmount("roman_door_brick_1", 0.5);
		
        // Fart room
		cParticleSystem@ pPS = mBaseObj.GetWorld().GetParticleSystem("PoisonC_Test");
		cBoundingVolume@ pAreaBounds = Map_GetEntity("Area_GasRoom").GetMainBody().GetBoundingVolume();
		EnvironmentalDamage_AddGasArea(pPS.GetID(), pAreaBounds.GetMin(), pAreaBounds.GetMax(), false);

		Music_PlayExt_Save("subterranean_transition", true, 0.5f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
        
        //Collide callbacks
        Entity_AddCollideCallback("Death_Pit_*", "Player", "DeathFall");
		
		// to-do fix this
		//Entity_AddCollideCallback("Death_Special_Pit", "Player", "DeathFallSpecial");
        
        Player_SetNightVisionEnabled(false);
		
		SetupGenerator();
        
        // Check for moving button positions and sync them
        array<iLuxEntity@> locks;
        Map_GetEntityArray("arabic_lock*", locks);
        for(int t = 0; t < locks.length(); t++){
            if(cScript_GetGlobalVarBool(locks[t].GetName())){
                cLux_AddDebugMessage("BUTTON "+ locks[t].GetName() + " IS ON (OPEN)");
                MovingButton_SetSwitchedOn(locks[t].GetName(), true, false);
            } else{
                cLux_AddDebugMessage("BUTTON "+ locks[t].GetName() + " IS OFF (CLOSED)");
                MovingButton_SetSwitchedOn(locks[t].GetName(), false, false);
            }
            
        }
		
		if(cScript_GetGlobalVarBool("entrance_alt_unlocked")){ 
			SetupColorgrading_EntranceAlt();
			Entity_SetActive("Trigger_ThreatCorridors_Alt", true);
			Entity_SetActive("Trigger_ThreatCorridors", false);
			Entity_SetActive("block_box_char_warning_cliff", true);
			
		} else {
			Entity_SetActive("Trigger_ThreatCorridors_Alt", false);
			Entity_SetActive("Trigger_ThreatCorridors", true);
			Entity_SetActive("block_box_char_warning_cliff", false);
		}
        
        
        //Debug
        if(cLux_ScriptDebugOn()){
            Item_SetCurrentSlotsCount(50);
			if (ItemType_GetCountInInventory("Gun") == 0)
			{
				Item_AddToInventory("Gun");
				Item_AddManyToInventory("Ammunition", 20);
			}
            if (ItemType_GetCountInInventory("Shotgun") == 0)
			{
				Item_AddToInventory("Shotgun");
				Item_AddManyToInventory("ShotgunAmmunition", 20);
			}
            Item_AddToInventory("MolotovCocktail");
            Item_AddToInventory("Torch");
        }
        
        Map_AddTimer("checkc", 0.0f, "DebugCheck");
        //Map_AddTimer("checkc", 0.0f, "OrbTimerTests");
        //
     }

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
        Sound_Stop("Sound_GeneratorStop",0.f);
        Sequence_End();
		
		Music_Stalker_StopDeaggroSongChecks();
        
        Map_RemoveTimer("ratkhealthupdate");
	}
	
    void arabic_lock_OnConnectionStateChange(const tString &in asEntity, int alState){
        tString doorName = cString_Sub(asEntity, "arabic_lock_".length(), -1);
        if(alState == 1){
            cScript_SetGlobalVarBool(asEntity, true);
            MovingButton_SetSwitchedOn(asEntity, true, true);
            SwingDoor_SetLocked(doorName, false, true);
            
        } else if (alState == -1 && SwingDoor_GetOpenAmount(doorName) < 0.1f){
            cScript_SetGlobalVarBool(asEntity, false);
            MovingButton_SetSwitchedOn(asEntity, false, true);
            SwingDoor_SetLocked(doorName, true, true);
            
        }
    }
    
	bool OnTrigger_Player_Transfer_Storage(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_storage.hpm", "MapTransfer_StorageUnderground");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_UndergroundDining(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_library.hpm", "MapTransfer_DiningWellUnderground");
		return true;
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
		if (alAction == eAction_Flashlight)
		{
			OnAction_CustomizedLightSources();
		}
	}
	
	// Hold F for lantern, press F for lighter/crafted torch

	void OnAction_CustomizedLightSources() {
	
		tString sItemID = ItemType_GetFirstInInventory("Lighter");
		if (sItemID != "") {
			if (Item_GetHeldType(eItemHandlerHand_Left) == "DynamoLantern" && Item_IsLightSourceActive()) {
				Item_PutAway(eItemHandlerHand_Left);
			}
			sItemID = ItemType_GetFirstInInventory("Torch");
			if (sItemID != "") {
				Item_ToggleHeldItem("Torch");
			} else {
				Item_ToggleHeldItem("Lighter");
			}
		}
	}
	
	//-------------------------------------------------------
	
    bool OnCollide_MapChange_EntranceAlt(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState==1){
            Seq_MapChangeElevator("");
        }
        
        return true;
    }
    
	// using the gasmask in the level
	
	void OnGasMaskStartEquip()
	{
		Entity_SetActive("block_box_gas_*", false);
	}
	
	void OnGasMaskStartUnequip()
	{
		Entity_SetActive("block_box_gas_*", true);
	}
	
	void OnPlayerInteract_OrbTest(const tString &in asEntity)
    {
        //PlayerBody_PlayCutsceneAnimation("pick_up_and_look_at_orb", false, 0.0f);
        //PlayerBody_PlayAnimation("pick_up_and_look_at_orb", ePlayerBodyAnimationLayer_RightArm, false, false, true);
        //PlayerHands_PlayAnimation("pick_up_and_look_at_orb", false, true, 0.0f, "red_orb_cutscene", true, 1.f, -1.f, true, true);
        cLux_AddDebugMessage("HELD righto: " + Item_GetHeld(eItemHandlerHand_Right));
        
        iLuxEntity@ pFeed = Map_GetEntity("RatFeed_Boss_1");
        iLuxEntity@ pHole = Map_GetEntity("GhoulHole_RatKStart");
        
        Entity_SetActive("enemy_rat_king_1", true);
        //Rat_EmergeToFood("enemy_rat_king_1", pHole.GetID(), pFeed.GetID());
        //cLux_ID_Area( Map_GetEntityID("Trigger_LookAtTest")).SetForceLookAtCheck(true);
        
    }
    
    void OnInteract_ChangeMapDebugTest(const tString &in asEntity)
    {
        Map_ChangeMap("escapade_test.hpm", "Start_Gennie", "", "");
    }
    
    void OnLookAt_OrbActivation(const tString &in asEntity, int alState)
	{
		Entity_SetPlayerLookAtCallback(asEntity, "OnLookAt_OrbActivationAutoEquip", false, false, false, 2);
	}
	
	//-------------------------------------------------------
	
	void OnLookAt_OrbActivationAutoEquip(const tString &in asEntity, int alState)
	{
		if (alState == 1 && !orbUsed){
            cLux_AddDebugMessage("TIMER STARTED");
			OnTimer_AutoEquipOrb("");
            
        }
		else{
			Map_RemoveTimer("OnTimer_AutoEquipOrb");
        }
	}
 
	//-------------------------------------------------------
	
	void OnTimer_AutoEquipOrb(const tString &in asTimer)
	{
		if (Item_IsHeld(eItemHandlerHand_Right))
		{
			Map_AddTimer("OnTimer_AutoEquipOrb", 0.5, "OnTimer_AutoEquipOrb");
			return;
		}
		
		tString sOrbType = "";
		if (ItemType_GetCountInInventory("OrbRed") > 0)
		{
			sOrbType = "OrbRed";
		}
		else if (ItemType_GetCountInInventory("Orb") > 0)
		{
			sOrbType = "Orb";
		}
		
		if (sOrbType == "") return;
		
		Item_Equip(ItemType_GetFirstInInventory(sOrbType));
	}
    
    
    void OnPlayerInteract_Orb(const tString &in asEntity)
    {
        //Map_GetEntity("red_orb_pickup_1").GetMainBody().SetMass(1.0f);
        //Map_GetEntity("red_orb_pickup_1").GetMainBody().SetGravity(true);
        //Map_GetEntity("red_orb_pickup_1").GetMainBody().SetContinuousCollision(true);
        //Entity_SetCollide("red_orb_pickup_1", false);
        
        //Entity_AttachToSocket("red_orb_pickup_1", "player", "R_Hand", false, true);
        //Item_Equip(ItemType_GetFirstInInventory("OrbRed"));
        
        //Entity_PlayAnimation(asEntity, "pick_up_and_look_at_orb");
        cLux_AddDebugMessage("ITEM TYPE: " + Item_GetEntityItemType(asEntity));
        
        //PlayerBody_PlayCutsceneAnimation("pick_up_and_look_at_orb_pedestal", false, 0.0f);
        
        if(ratKingOver){
            Map_AddTimer("EquipOrb", 0.2f, "EquipOrb");
        }
        
        //PlayerHands_PlayAnimation("pick_up_and_look_at_orb_pedestal", false, true, 0.0f, "red_orb_cutscene", true, 1.f, -1.f, true, true);
        //Item_Equip(ItemType_GetFirstInInventory("OrbRed"));
        Prop_SetRenderLayer("red_orb_cutscene", 1);
        
        
    }
    
    void EquipOrb(const tString &in asTimer){
        cLux_AddDebugMessage("ATTEMPTING TO EQUIP ITEM");
        if(Item_GetHeld(eItemHandlerHand_Right) != "1_OrbRed_1"){
            Item_Equip(ItemType_GetFirstInInventory("OrbRed"));
            PlayerBody_PlayAnimation("pick_up_and_look_at_orb_pedestal", ePlayerBodyAnimationLayer_Arms, false, false, true);
        }
        
        //Map_AddTimer("PlayOrbAnimation", 0.5f, "OrbPlayAnimation");
        
    }
    void OrbPlayAnimation(const tString &in asTimer){
        PlayerBody_PlayAnimation("pick_up_and_look_at_orb_pedestal", ePlayerBodyAnimationLayer_Arms, false, false, true);
    }
    
	bool CanUse_Orb(const tString &in asItemType, const tString &in asItemID, const tString &in asPickedEntity) {
        return asPickedEntity == "Trigger_OrbActivation";
	}
	
    bool orbUsed = false;
	bool OnUse_Orb(const tString &in asItemType, const tString &in asItemID, const tString &in asTargetEntity, const tString &in asItemEntity, float afTimeElapsed, float afTimeStep) {
		cLux_AddDebugMessage("ORB USED");
        Map_RemoveTimer("OnTimer_AutoEquipOrb");
        orbUsed = true;
        //Elevator
        Entity_SetActive("Trigger_OrbActivation", false);
        Entity_SetActive("lq_elevator_1_blockbox_*", true);
        Entity_SetActive("Trigger_EntranceAlt", true);
        Lamp_SetLit("lq_elevator_1_panel", false, true);
		Sound_CreateAtEntity("", "DW_tunnel/portal/portal_open", asTargetEntity);
        MoveObject_SetStateExt("lq_elevator_1", 5.0f, 2.0f, 4.0f, 4.0f, false);
        
        if(!Music_IsSongPlaying("subterranean_transition")){
            Music_Stop(5.0f, eMusicPrio_SceneAmb);
            Music_PlayExt_Save("subterranean_transition", true, 0.5f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
        }
        
		
        Item_Unequip(Item_GetHeld(), true);
        Map_AddTimer("remove_orb", 0.2f, "OnTimer_RemoveOrb");

		//Item_RemoveFromInventory(ItemType_GetFirstInInventory(asItemType));
		return true;
	}
	
    
    //Tests
    void OrbTimerTests(const tString &in asTimer){
        cLux_AddDebugMessage("ITEM HELD: "+ Item_GetHeld(eItemHandlerHand_Right), true);
        cLux_AddDebugMessage("ARMS MODEL: "+ PlayerHands_GetEntityName(), true);
        
        
        //PlayerHands_PlayAnimation("pick_up_and_look_at_orb");
        Map_RestartCurrentTimer(5.f);
        
    }
    
    void OnTimer_RemoveOrb(const tString &in asTimer){
        cLux_AddDebugMessage("UNEQUIPPED, REMOVE");
        
        Map_AddTimer("reset_orb_animation", 0.5f, "OnTimer_RemoveOrbResetAnim");
        
    }
    
    void OnTimer_RemoveOrbResetAnim(const tString &in asTimer){
        cLux_AddDebugMessage("RESET ANIM");
        PlayerBody_PlayAnimation("tool_orb_holster", ePlayerBodyAnimationLayer_Arms, false, false, true);
    }
	//-------------------------------------------------------
	
	void OnLookAt_SaveLamp(const tString &in asEntity, int alState)
	{
		tString sHint = GameDifficulty_GetSaveHint();
		if(alState == 1)
		{
			if (Hint_GetCurrentEntry() != sHint)
			{
				Hint_StopHint();
				if (GameDifficulty_GetSettingValueByID_Int(eGameDifficultySetting_SaveSystem) == eDifficultySettingValue_SaveSystem_SavingCostsFuel)
					Hint_RemoveFromGiven("Hints", sHint);
				Hint_ShowHint_Hold("Hints", sHint, true, 1.5f, true, 15.f, true, true);
			}
		}
		else
		{
			if (Hint_GetCurrentEntry() == sHint)
				Hint_StopHint();
		}
	}
	
	void OnInteract_SaveLamp(const tString &in asEntity)
	{
		////////////////
		// About to get lit!
		if (Lamp_GetLit(asEntity) == false)
			SaveGameProgress();
		else
			Map_AddTimer(asEntity, 1.f, "OnTimer_SaveGameProgress");
	}
	
	void OnTimer_SaveGameProgress(const tString&in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
		SaveGameProgress();
	}
	
	void SaveGameProgress()
	{
		/////////////////
		// Save game
		SaveRoom_SaveGame(true, true);
		
		////////////////
		// Hints
		if (Hint_GetCurrentEntry() == GameDifficulty_GetSaveHint())
			Hint_StopHint();
		
		GameStats_IncreaseEntryAmount(eHeroStats_TimesSaved);
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////
	//// Generator
	
	void SetupGenerator()
	{
		Generator_SetupEntities("", "", "", "", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
		Generator_EndSetup();
	}
	
	void OnStateChange_Generator(int alState)
	{		
		///////////////////
		// Generator Sounds
		if (alState!=1 && PlayerIsCloseEnoughToGen())
			Sound_Play("Sound_GeneratorOff", 0.f);		
	}
	
	// to-do: needs testing
	
	bool PlayerIsCloseEnoughToGen() {
		if (Player_GetDistanceToEntity("Lamp_Generator_1") > 40.0f) {
				return false;
		} else {
			return true;
		}
	}
	
	//////////////////// Generator end
	
	
	/////////// STALKER
	
    void DebugCheck(const tString &in asTimer){
        /*
        cLux_AddDebugMessage("AREA X: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_Halls").x, true);
        cLux_AddDebugMessage("AREA Y: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_Halls").y, true);
        cLux_AddDebugMessage("AREA Z: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_Halls").z, true);
        
        
        
        
        cLux_AddDebugMessage("AREA X: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_LadderExit").x, true);
        cLux_AddDebugMessage("AREA Y: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_LadderExit").y, true);
        cLux_AddDebugMessage("AREA Z: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_LadderExit").z, true);
        
        
        cLux_AddDebugMessage("AREA X: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_GasChamber").x, true);
        cLux_AddDebugMessage("AREA Y: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_GasChamber").y, true);
        cLux_AddDebugMessage("AREA Z: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_GasChamber").z, true);
        */
        //int alAlertState = cScript_GetGlobalVarInt("Stalker_AlertState");
        //cLux_AddDebugMessage("Checking. Stalker ALERT STATE: "+ alAlertState, true);
        
        cLux_AddDebugMessage("Rat King state: "+ StateMachine_GetCurrentStateName("enemy_rat_king_1"), true); 
        
        Map_RestartCurrentTimer(0.1f);
        
    }
    
    /*
    void DeaggroCheck(const tString &in asTimer){
        //cLux_AddDebugMessage("Checking. Stalker mode: "+ Stalker_GetMode("stalker_test"), true);
        //cLux_AddDebugMessage("Checking. Stalker presence: "+ Stalker_GetPresence("stalker_test"));
        //cLux_AddDebugMessage("Checking. Stalker HUNTING: "+ Terror_GetPlayerIsBeingHunted(), true);
        cLux_AddDebugMessage("Checking. Stalker STATE: "+ StateMachine_GetCurrentStateName("stalker_test"), true);
        
        if(StateMachine_GetCurrentStateName("stalker_test") == "Alert"){
            Terror_SetEnemyMusicActive(true);
            
            cLux_AddDebugMessage("TIMER RESTARTED");
            Map_RemoveTimer("deaggro");
        } else{
            if(!Map_TimerExists("deaggro") && (StateMachine_GetCurrentStateName("stalker_test") == "Retreat" || StateMachine_GetCurrentStateName("stalker_test") == "Stalk")){
                cLux_AddDebugMessage("TIMER ADDED");
                Map_AddTimer("deaggro", 10.0f, "Stalker_Deaggro");
            }
        }
        //Map_GetEntity("stalker_test").
        
        Map_RestartCurrentTimer(0.1f);
        
    }
    
    void Stalker_Deaggro(const tString &in asTimer){
        //Actions to execute when he's aggroed for a time
        cLux_AddDebugMessage("STALKER DEAGGRO");
        if(!Music_IsSongPlaying("subterranean_transition")){
            cLux_AddDebugMessage("SONG CHANGE");
            Terror_SetEnemyMusicActive(false);
            
            Music_PlayExt("subterranean_transition", true, 0.5f, 1, 5.0f, 5.0f, eMusicPrio_BgAmb, true);
        }
    }
    */
	bool ThreatCorridors_Enable(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1) {
            //cLux_AddDebugMessage("PARENT: "+asParent);
            //cLux_AddDebugMessage("CHILD: "+asChild);
			
            DebugStalkerThreatEnable();
            
            return true;
        }
        if (alState == -1) {
			DebugStalkerThreatDisable();
            
            return true;
        }
		return true;
	}
	
	void DebugStalkerThreatEnable() {
		//Entity_SetActive("stalker_test", true);
        //Map_AddTimer("deaggro", 10.0f, "Stalker_Deaggro");
        //Map_AddTimer("deaggrocheck", 0.0f, "DeaggroCheck");
        //Music_Stalker_AddDeaggroSongTime("stalker_test", cScript_GetGlobalVarString("music_to_play"), cScript_GetGlobalVarFloat("music_to_play_volume"), 8.0f);
        //Stalker_SetEmergeAllowed("stalker_test", true);
        //Terror_SetEnemyMusicStage(eTerrorMusicAgentType_Stalker, eTerrorMusicStage_Searching);
        
        OnCollide_StalkerDisableArea("", "", -1);
		cLux_AddDebugMessage("Stalker is now ENABLED");
	}
	
	void DebugStalkerThreatDisable() {
		//Entity_SetActive("stalker_test", false);
        //Map_RemoveTimer("deaggrocheck");
        //Map_RemoveTimer("deaggro");
        
        //Music_Stalker_StopDeaggroSongChecks();
        
        //Terror_SetEnemyMusicActive(false);
        //Stalker_Retreat("stalker_test");
        //Terror_RemoveEnemy(Map_GetEntityID("stalker_test"));
        //Terror_RemoveHuntingEnemy(Map_GetEntityID("stalker_test"));
        //Stalker_SetEmergeAllowed("stalker_test", false);
        
        OnCollide_StalkerDisableArea("", "", 1);
		cLux_AddDebugMessage("Stalker is now DISABLED");
	}
	
    void SetupStalkerAppearance(){
        //Enable god mode in case player spawns there, so that stalker pushes you
        cLux_SetGodModeActivated(true);
        Map_AddTimer("Timer_DisableGodMode", 2.0f, "OnTimer_DisableGodMode");
        
        Entity_SetActive("stalker_test", true);
        Music_Stalker_AddDeaggroSongTime("stalker_test", cScript_GetGlobalVarString("music_to_play"), cScript_GetGlobalVarFloat("music_to_play_volume"), 11.0f);
        //Stalker_SetEmergeAllowed("stalker_test", true);
        //cLux_AddDebugMessage("Stalker is now ENABLED");
    }
    
    
    bool OnCollide_StalkerDisableArea(const tString &in asParent, const tString &in asChild, int alState)
    {
        if(alState == 1){
            cLux_AddDebugMessage("STALKER DISABLE CHECK TO SPAWN");
            Map_RemoveTimer("Timer_UpdateStalkerSpawn");
            Entity_SetActive("stalker_test", false);
            Music_Stalker_StopDeaggroSongChecks(); 
        }
        
        if(alState == -1){
            cLux_AddDebugMessage("STALKER CHECK TO SPAWN ACTIVE");
            Map_AddTimer("Timer_UpdateStalkerSpawn", 0.0f, "OnTimer_UpdateStalkerSpawn");
        }
        
        return true;
    }
    
    // Check if stalker is out of player's sight and also far enough
    void OnTimer_UpdateStalkerSpawn(const tString &in asTimer){
        cLux_AddDebugMessage("Quick timer, checking for stalker spawn");
        tID stalkerID = Map_GetEntityID("stalker_test");
        if(!Entity_IsInPlayerFOV("stalker_test") && cLux_ID_Agent(stalkerID).GetDistanceToPlayer2D() > 1.5f){
            
            SetupStalkerAppearance();
        }else{
            Map_RestartCurrentTimer(0.1f);
        }
    }
    
    void OnTimer_DisableGodMode(const tString &in asTimer){
        cLux_SetGodModeActivated(false);
    }
    
	//// end stalker
	
	//////// Music events
	
	bool OnTrigger_HallMusic(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1) {
			Music_PlayExt_Save("subterranean_halls_reveal", true, 0.45f, 1, 4.0f, 0, eMusicPrio_BgAmb, true);
		}
		else if (alState == -1) {
			Music_PlayExt_Save("subterranean_transition", true, 0.5f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
		}
		return true;
	}
	
    
    bool DeathFall(const tString &in asParent, const tString &in asChild, int alState){
        if(alState == 1){
            cLux_AddDebugMessage("PARENT: "+ asParent);
            Seq_FallToDeath(asParent);
            
            //PlayerBody_PlayAnimation("fall_and_get_up_quickly", ePlayerBodyAnimationLayer_FullBody, false, false, false);
            //PlayerBody_PlayCutsceneAnimation("player_end_tumble_intro_trench", false, 0.1f);
            //PlayerBody_PlayCutsceneAnimation("jump_fall", false, 0.1f);
            //PlayerBody_PlayCutsceneAtEntity("fall_and_get_up_quickly", "Player", false, 0.1f);
            
            
        }
        
        return true;
    }
	
	bool DeathFallSpecial(const tString &in asParent, const tString &in asChild, int alState){
        if(alState == 1){
            cLux_AddDebugMessage("Played speed: "+ Player_GetSpeed());
			if (Player_GetSpeed() > 5) {
				Seq_FallToDeath(asParent);
			}
        }
        
        return true;
    }
    
    cSequenceStatesData mSeqDataFallInPit;
    void Seq_FallToDeath(const tString &in asTimer){
        Sequence_Begin("Seq_FallToDeath", mSeqDataFallInPit);
        if(Sequence_DoStepAndWait(cString_Sub(asTimer, "Death_Pit_".length(), -1) == "2" ? 4.0f : 0.2f)){
            /*
            cLux_GetPlayer().ChangeState(ePlayerState_Null);
            Player_SetActive(false);
            cLux_GetPlayer().GetCharacterBody().SetTestCollision(false);
            */
            
            Player_SetActive(false);
            cLux_AddDebugMessage("YOU DIED");
            Music_StopAll(0.2f);
            Effect_Fade_Out(0.2f);
        }        
        else if(Sequence_DoStepAndWait(0.5f)){
            Sound_PlayGui("player_falldamage_max.snt", 1.0f, eSoundEntryType_Gui);
        }
        else if(Sequence_DoStepAndContinue()){
            Death_Start("Fall");
        }
        Sequence_End();
    }
    
    cSequenceStatesData mSeqDataMapChangeElevator;
    void Seq_MapChangeElevator(const tString &in asTimer){
        Sequence_Begin("Seq_MapChangeElevator", mSeqDataMapChangeElevator);
        if(Sequence_DoStepAndWait(3.0f)){
            Effect_Fade_Out(2.0f);
			Music_Stop(3.0f, eMusicPrio_SceneAmb);
        }        
        else if(Sequence_DoStepAndWait(0.5f)){
            Map_ChangeMap("escapade_entrance_alt.hpm", "Start_Begin_Ballroom", "", "", true, false);
            Sequence_End();
        }
        Sequence_End();
    }
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// RAT BOSS FIGHT
		//{//////////////////////////////////////
        
        cVector3f hole1Pos = cVector3f(-63.5f, -80.5f, -0.5f);
        cVector3f hole2Pos = cVector3f(-63.5f, -80.5f, 6.5f);
        cVector3f hole3Pos = cVector3f(-53.5f, -80.5f, 6.5f);
        cVector3f hole4Pos = cVector3f(-53.5f, -80.5f, -0.5f);
        cVector3f holeKPos = cVector3f(-70.0f, -79.5f, 3.0f);
        
        bool ratKingOver = false;
        
        bool OnCollide_ReadyBossfight(const tString &in asParent, const tString &in asChild, int alState)
        {
            if(alState == 1){
                cLux_AddDebugMessage("READY BOSSFIGHT");
                Entity_SetActive("stalker_test", false);
                Entity_SetActive("enemy_rat_king_1", true);
                
            }
            return true;
        }
        
		bool OnTrigger_RatBossFight(const tString &in asParent, const tString &in asChild, int alState)
		{
			if (alState == 1) {
				Player_ChangeStateToNormal();
                //Player_SetIsUsingItem(false);
                if(cLux_DebugModeOn()){
                    Entity_SetActive("enemy_rat_king_1", true);
                }
                
                Map_GetEntity("GhoulHole_Boss_1").SetPosition(hole1Pos);
                Map_GetEntity("GhoulHole_Boss_2").SetPosition(hole2Pos);
                Map_GetEntity("GhoulHole_Boss_3").SetPosition(hole3Pos);
                Map_GetEntity("GhoulHole_Boss_4").SetPosition(hole4Pos);
                Map_GetEntity("GhoulHole_RatKStart").SetPosition(holeKPos);
                
                // Get Item Handler
                //iScrItemHandler_Interface@ pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
                //pHandler.CopyItemEntityInfo(Item_GetItemEntity(ItemType_GetFirstInInventory("Shotgun")), "shotgun_temp");
                
                Item_Unequip(Item_GetHeld(), false);
                Item_Unequip(Item_GetHeld(eItemHandlerHand_Left), true);
                Map_AddTimer(asParent, 0.1f, "OnTimer_StartRatBossFight");
                
			}
			return true;
		}
        
        void OnTimer_StartRatBossFight(const tString &in asTimer){
            cLux_AddDebugMessage("BOSSFIGHT START");
                Map_AddTimer(asTimer, 0.5f, "OnTimer_DisableCollideArea");
                //Entity_SetActive("Trigger_RatBossFight", false);
				Music_PlayExt_Save("underground_ratking_boss", true, 0.5f, 1, 4.0f, 0, eMusicPrio_SceneAmb, true);
			
				// rat king
				//ActivateRatKing();
                
                // Disable hitbox?
                //cLux_ID_Agent().GetHitboxBody(0).SetActive(false);
                // begin cutscene
                cLux_SetGodModeActivated(true);
                Player_SetActive(false);
                Entity_SetActive("RatK_Blockbox", false);
                CameraAnimation_Begin("RatKCutscene", "", true);
                
                // Start health check timer
                Map_AddTimer("ratkhealthupdate", 0.1f, "OnTimer_UpdateRatKHealth");
                
				// minions
				//ActivateRatMinions();
				
				// elevator stuff
				Entity_SetActive("lq_elevator*", true);
				Entity_SetActive("lq_elevator_1_blockbox_*", false);
				Entity_SetActive("lq_elevator_midway", false);
				Light_SetVisible("Light_Point_22", true);
				
				// blocking alternative exits
				Entity_SetActive("bossfight_block_*", true);
        }
        
        void OnTimer_UpdateRatKHealth(const tString &in asTimer){
            tID ratKID = Map_GetEntityID("enemy_rat_king_1");
            cLux_AddDebugMessage("RATK HEALTH: "+ cLux_ID_Agent(ratKID).GetHealth(), true);
            
            if(cLux_ID_Agent(ratKID).GetHealth() <= 5.65f){
                cLux_AddDebugMessage("SECOND PHASE START");
                Seq_RatKingSecondPhase("");
                Map_AddTimer("ratkhealthupdate", 0.1f, "OnTimer_UpdateRatKHealthDead");
            }
            else{
                
                Map_RestartCurrentTimer(0.2f);
            }
            
        }
        
        
        void OnTimer_UpdateRatKHealthDead(const tString &in asTimer){
            tID ratKID = Map_GetEntityID("enemy_rat_king_1");
            cLux_AddDebugMessage("RATK HEALTH: "+ cLux_ID_Agent(ratKID).GetHealth(), true);
            
            if(cLux_ID_Agent(ratKID).GetHealth() <= 0.0f){
                cLux_AddDebugMessage("RAT KING DEAD, DISABLE RATS");
                //RatHandler_SetActive(false);
                for(int t= 1; t <= 4; t++){
                    Map_GetEntity("GhoulHole_Boss_"+t).SetPosition(cVector3f(-215.5f, -81.375f, 3.0f));
                }
                Map_AddTimer("rat_retreat", 2.0f, "OnTimer_RetreatRats");
                //Rat_Retreat("enemy_rat*", true, true, false);
                Music_Stop(5.0f, eMusicPrio_SceneAmb);
                Music_PlayExt_Save("subterranean_transition", true, 0.5f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
                
                ratKingOver = true;
            }
            else{
                
                Map_RestartCurrentTimer(0.2f);
            }
            
        }
        
        void OnTimer_RetreatRats(const tString &in asTimer){
            Rat_Retreat("enemy_rat*", true, true, false);
        }
        
		
		void ActivateRatKing(){
			//Map_GetEntity("enemy_rat_king_1").SetPosition(cVector3f(-60.872,-81,10.75));
            //Agent_TeleportFeetToEntity("enemy_rat_king_1", "RatKing_Start");
            //Map_AddTimer("att", 2.0f, "OnTimer_RatKAtt");
            //Rat_EmergeToFood()
            
            Agent_SetSensesActive("enemy_rat_king_1", false);
			iLuxEntity@ pFeed = Map_GetEntity("RatFeed_Boss_Extra_1");
            iLuxEntity@ pHole = Map_GetEntity("GhoulHole_RatKStart");
			Rat_EmergeToFood("enemy_rat_king_1", pHole.GetID(), pFeed.GetID());
            Rat_Eat("enemy_rat_king_1", pFeed.GetID());
		}
		
		void ActivateRatMinions() {
            
			iLuxEntity@ pFeed = Map_GetEntity("RatFeed_Boss_1");
			iLuxEntity@ pHole = Map_GetEntity("GhoulHole_Boss_1");
			
            Sound_PlayGui("voice_stayaway.snt", 1.0f);
			
            // Hole 1
            //for(int t=1; t<= 4; t++){
            //    Rat_EmergeToFood("enemy_rat_grey_boss_"+t, pHole.GetID(), pFeed.GetID());
            //}
			
            Rat_EmergeToFood("enemy_rat_grey_boss_initialbackup_*", pHole.GetID(), pFeed.GetID());
            //Entity_SetActive("enemy_rat_grey_boss_initialbackup_*", true);
		}
        
        void OnTimer_DisableCollideArea(const tString &in asTimer){
            Entity_SetActive(asTimer, false);
        }  
    
        void OnTimer_EnableCollideArea(const tString &in asTimer){
            Entity_SetActive(asTimer, true);
        }
        
        void OnTimer_RatKAtt(const tString &in asTimer){
            //Rat_Attack("enemy_rat_king_1", false, false);
            tID targetID = Map_GetEntityID("PathNode_362");
            //tID targetID = Map_GetEntityID("player");
            tID emergeHoleStart = Map_GetEntityID("GhoulHole_Boss_1");
            
            //Rat_EmergeToWander("enemy_rat_king_1", emergeHoleStart, targetID);
            //Rat_EmergeToFood()
            
        }
        
        bool OnCollide_EnableHunt(const tString &in asParent, const tString &in asChild, int alState)
        {
            if(alState == 1){
                cLux_AddDebugMessage("ENABLE HUNT");
                Rat_Threatened("enemy_rat_king_1");
                Map_AddTimer(asParent, 0.5f, "OnTimer_DisableCollideArea");
            }
            return true;
        }
        
        // --Cutscene control start--
        
        bool OnPassedCameraNode_RatKCutscene2(const tString &in asEntity, int alDirection)
        {
            Map_GetEntity("enemy_rat_king_1").PlayAnimation("idle_attack");
            Sound_Play("Sound_RatKCutscene", 0.0f);
            return true;
        }
        
        bool OnPassedCameraNode_RatKCutscene3(const tString &in asEntity, int alDirection)
        {
            cLux_AddDebugMessage("RATS EMERGE");
            Agent_SetSensesActive("enemy_rat_king_1", true);
            //RatHandler_DoRatAttack();
            //Rat_Threatened("enemy_rat_king_1");
            ActivateRatMinions();
            return true;
        }
        
        bool OnPassedCameraNode_RatKCutscene4(const tString &in asEntity, int alDirection)
        {
            ActivateRatKing();
            
            return true;
        }
        
        bool OnPassedCameraNode_RatKCutscene5(const tString &in asEntity, int alDirection)
        {
            //Entity_SetActive("GhoulHole_RatKStart");
            
            // Disable rat king initial movement from throne ghoulhole
            Map_GetEntity("GhoulHole_RatKStart").SetPosition(cVector3f(-215.5f, -81.375f, 3.0f));
            
            return true;
        }
        
        bool OnPassedCameraNode_RatKCutscene6(const tString &in asEntity, int alDirection)
        {
            cLux_AddDebugMessage("ENABLE HUNT");
            Map_AddTimer("cutsceneEnd", 1.0f, "OnTimer_RatKGivePlayerPosition");
            //Agent_RevealPlayerPosition("enemy_rat_king_1");
            Agent_SetSensesActive("enemy_rat_king_1", false);
            //Rat_Threatened("enemy_rat_king_1");
            
            Player_SetActive(true);
            cLux_SetGodModeActivated(false);
            //Map_AddTimer("shotgun_ammo_recover", 0.5f, "OnTimer_ShotgunAmmoRecover");
            return true;
        }
        
        void OnTimer_ShotgunAmmoRecover(const tString &in asTimer){
            // Get Item Handler
            iScrItemHandler_Interface@ pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
            pHandler.CopyItemEntityInfo("shotgun_temp", Item_GetItemEntity(ItemType_GetFirstInInventory("Shotgun")));
            
            
        }
        
        void OnTimer_RatKGivePlayerPosition(const tString &in asTimer){
            
            //cLux_ID_Agent(ratKID).GetHealth();
            
            Agent_RevealPlayerPosition("enemy_rat_king_1");
            Map_AddTimer("ratkthreat", 0.5f, "OnTimer_RatKThreaten");
            //Rat_Threatened("enemy_rat_king_1");
        }
        
        void OnTimer_RatKThreaten(const tString &in asTimer){
            
        }
        
        // Activate second phase sequence
        cSequenceStatesData mSeqDataRatKingSecondPhase;
        void Seq_RatKingSecondPhase(const tString &in asTimer){
            Sequence_Begin("Seq_RatKingSecondPhase", mSeqDataRatKingSecondPhase);
            if(Sequence_DoStepAndWait(0.3f)){
                Rat_Retreat("enemy_rat_king_1", true, false, false);
                
            }
            else if(Sequence_DoStepAndWait(10.0f)){
                // TO DO: make aggressive rats emerge from the 4 holes 
                //RatHandler_AddAttackingRat( Map_GetEntityID("second_phase_rat_1"));
                
                // Hole 2
                iLuxEntity@ pFeed2 = Map_GetEntity("RatFeed_Boss_2");
                iLuxEntity@ pHole2 = Map_GetEntity("GhoulHole_Boss_2");
                for(int t=5; t<= 8; t++){
                    Rat_EmergeToFood("enemy_rat_grey_boss_"+t, pHole2.GetID(), pFeed2.GetID());
                }
                
                // Hole 3
                iLuxEntity@ pFeed3 = Map_GetEntity("RatFeed_Boss_3");
                iLuxEntity@ pHole3 = Map_GetEntity("GhoulHole_Boss_3");
                for(int t=9; t<= 12; t++){
                    Rat_EmergeToFood("enemy_rat_grey_boss_"+t, pHole3.GetID(), pFeed3.GetID());
                }
                
                // Hole 4
                iLuxEntity@ pFeed4 = Map_GetEntity("RatFeed_Boss_4");
                iLuxEntity@ pHole4 = Map_GetEntity("GhoulHole_Boss_4");
                for(int t=13; t<= 16; t++){
                    Rat_EmergeToFood("enemy_rat_grey_boss_"+t, pHole4.GetID(), pFeed4.GetID());
                }
                
                Rat_EmergeToFood("enemy_rat_flesh_boss_1", pHole3.GetID(), pFeed3.GetID());
                Rat_EmergeToFood("enemy_rat_flesh_boss_2", pHole4.GetID(), pFeed4.GetID());
                Rat_EmergeToFood("enemy_rat_flesh_boss_3", pHole2.GetID(), pFeed2.GetID());
            }
            else if(Sequence_DoStepAndWait(2.0f)){
                //RatFeed_7
                iLuxEntity@ pFeed = Map_GetEntity("RatFeed_Boss_Extra_1");
                iLuxEntity@ pHole = Map_GetEntity("GhoulHole_Boss_1");
                
                Entity_SetActive("Trigger_RatAggro", true);
                Agent_SetSensesActive("enemy_rat_king_1", true);
                Rat_EmergeToFood("enemy_rat_king_1", pHole.GetID(), pFeed.GetID());
            }
            
            Sequence_End();
        }
        
        bool OnCollide_RatKingRetreat(const tString &in asParent, const tString &in asChild, int alState)
        {
            
            Rat_Retreat("enemy_rat_king_1", true, false, false);
            return true;
        }
		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		/*Put any functions that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE X 
	
	void SetupColorgrading_EntranceAlt() {
		float afKey;
        float afGammaCorrection;
        float afFilmGrainIntensity;
        float afBrightPass;
        float afBloomWidth;
        cColor avBloomTint;
        float afBloomFalloff;

        if(cScript_GetGlobalVarBool("entrance_alt_unlocked")){ 
            // Set ToneMapping values to match entrance_alt
            float afKey = 0.1f;
            float afGammaCorrection = 0.5f;
            float afFilmGrainIntensity = 1.0f;
            float afBrightPass = 0.75f;
            float afBloomWidth = 128.0;
            cColor avBloomTint;
            avBloomTint.a = 1.0f;
            avBloomTint.r = 1.0f;
            avBloomTint.g = 1.0f;
            avBloomTint.b = 1.0f;
            float afBloomFalloff = 0.5f;
            cLux_GetViewport().GetToneMappingEffect().SetParams(afKey, afGammaCorrection, afFilmGrainIntensity, afBrightPass, afBloomWidth, avBloomTint, afBloomFalloff);
            cLux_GetViewport().GetToneMappingEffect().SetGradingTexture(1, "bunker_prototype_01.dds", 1.0f);
            
            cLux_GetViewport().GetToneMappingEffect().SetActive(true);
            cLux_GetViewport().GetToneMappingEffect().SetColorGradingActive(true);
            cLux_GetViewport().GetToneMappingEffect().FadeWindowExposure(0.f, 3.25f);
            cLux_GetViewport().GetToneMappingEffect().SetBloomActive(true);
            
            cLux_AddDebugMessage("CHANGED TONEMAPPING");
            
            //Fog change
        cColor fogColor;
        fogColor.a = 1.0f;
        fogColor.r = 0.193f;
        fogColor.b = 0.263f;
        fogColor.g = 0.179f;
        
        cColor secondaryFogColor;
        secondaryFogColor.a = 1.0f;
        secondaryFogColor.r = 0.204f;
        secondaryFogColor.g = 0.081f;
        secondaryFogColor.b = 0.051f;
        
        Map_SetFogProperties(0.f, 100.0f, 2.0f, fogColor, false);
        Map_SetSecondaryFogProperties(10.0f, 50.0f, 1.5f, secondaryFogColor);
        
        }
        
        
        cLux_GetViewport().GetToneMappingEffect().GetParams(afKey, afGammaCorrection, afFilmGrainIntensity, afBrightPass, afBloomWidth, avBloomTint, afBloomFalloff);
        
        cLux_AddDebugMessage("afKey: "+ afKey);
        cLux_AddDebugMessage("afBloomFalloff: "+ afBloomFalloff);
        cLux_AddDebugMessage("afFilmGrainIntensity: "+ afFilmGrainIntensity);
        cLux_AddDebugMessage("afBrightPass: "+ afBrightPass);
        cLux_AddDebugMessage("afBloomWidth: "+ afBloomWidth);
        cLux_AddDebugMessage("avBloomTint A: "+ avBloomTint.a);
        cLux_AddDebugMessage("avBloomTint R: "+ avBloomTint.r);
        cLux_AddDebugMessage("avBloomTint G: "+ avBloomTint.g);
        cLux_AddDebugMessage("avBloomTint B: "+ avBloomTint.b);
        cLux_AddDebugMessage("afBloomFalloff: "+ afBloomFalloff);
        
        cLux_AddDebugMessage("EXPOSURE: "+ cLux_GetViewport().GetToneMappingEffect().GetExposure());
        
        //--ColorGrading end--
	}
}