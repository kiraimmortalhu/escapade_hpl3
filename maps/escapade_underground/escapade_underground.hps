#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"
#include "custom/helpers/helper_agent.hps"
#include "custom/helpers/helper_modules_custom.hps"
#include "custom/modules/EnvironmentalDamageHandler.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("xx-xx-dummy-level");
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		PlayerBody_PreloadModel("player_rebirth_ghoul.ent");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		{
            Map_Preload("escapade_library.hpm");
        }
		//PlayerBody_SetModel("player_rebirth_ghoul.ent");
		//PlayerBody_SetActive(true);
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
		Entity_SetActive("debugitem_*", true);
		Item_SetCurrentSlotsCount(15);
		Item_AddToInventory("DynamoLantern");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
        ///////////////////////
		// Setup player body
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_rebirth_ghoul.ent");
		}
        
        // Fart room
		cParticleSystem@ pPS = mBaseObj.GetWorld().GetParticleSystem("PoisonC_Test");
		cBoundingVolume@ pAreaBounds = Map_GetEntity("Area_GasRoom").GetMainBody().GetBoundingVolume();
		EnvironmentalDamage_AddGasArea(pPS.GetID(), pAreaBounds.GetMin(), pAreaBounds.GetMax(), false);
		
        //cLux_AddDebugMessage("PS ID: "+pPS.GetID());
		cLux_AddDebugMessage("MIN X: "+pAreaBounds.GetMin().x);
		cLux_AddDebugMessage("MIN Y: "+pAreaBounds.GetMin().y);
		cLux_AddDebugMessage("MIN Z: "+pAreaBounds.GetMin().z);
        cLux_AddDebugMessage("MAX X: "+pAreaBounds.GetMax().x);
        cLux_AddDebugMessage("MAX Y: "+pAreaBounds.GetMax().y);
        cLux_AddDebugMessage("MAX Z: "+pAreaBounds.GetMax().z);
        cLux_AddDebugMessage("PREVIOUS IGNORE GAS DAMAGE: "+Player_GetIgnoreGasDamage()); 
		Player_SetIgnoreGasDamage(false); 
        cLux_AddDebugMessage("CURRENT IGNORE GAS DAMAGE: "+Player_GetIgnoreGasDamage()); 
        //Music_Play("Bunker_Arsenal.ogg", 1.0f, eMusicPrio_BgAmb);
		Music_PlayExt("underground_wip_loop", true, 0.5f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
        
        //Collide callbacks
        Entity_AddCollideCallback("Death_Pit_*", "Player", "DeathFall");
        
        
        
        //Debug
        //Map_AddTimer("checkc", 0.0f, "DebugCheck");
     }

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}
	
	bool OnTrigger_Player_Transfer_Storage(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_storage.hpm", "MapTransfer_StorageUnderground");
		return true;
	}
    
    bool OnTrigger_Player_Transfer_UndergroundDining(const tString &in asParent, const tString &in asChild, int alState)
	{
		Game_DoMapChange("escapade_library.hpm", "MapTransfer_DiningWellUnderground");
		return true;
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
		if (alAction == eAction_Test1)
		{
		}
	}
	
	//-------------------------------------------------------
	
	void OnGasMaskStartEquip()
	{
		Entity_SetActive("block_box_gas_*", false);
	}
	
	void OnGasMaskStartUnequip()
	{
		Entity_SetActive("block_box_gas_*", true);
	}
	
	bool CanUse_Orb(const tString& in asItemType, const tString& in asItemID, const tString& in asPickedEntity) {
		return asPickedEntity == "Trigger_OrbActivation";
	}
	
	bool OnUse_Orb(const tString& in asItemType, const tString& in asItemID, const tString& in asTargetEntity, const tString& in asItemEntity, float afTimeElapsed, float afTimeStep) {
		Lamp_SetLit("lq_elevator_1_panel", false, true);
		Sound_CreateAtEntity("", "DW_tunnel/portal/portal_open", asTargetEntity);
		//Item_RemoveFromInventory(ItemType_GetFirstInInventory(asItemType));
		return false;
	}
	
	//-------------------------------------------------------
	
	void OnLookAt_SaveLamp(const tString &in asEntity, int alState)
	{
		tString sHint = GameDifficulty_GetSaveHint();
		if(alState == 1)
		{
			if (Hint_GetCurrentEntry() != sHint)
			{
				Hint_StopHint();
				if (GameDifficulty_GetSettingValueByID_Int(eGameDifficultySetting_SaveSystem) == eDifficultySettingValue_SaveSystem_SavingCostsFuel)
					Hint_RemoveFromGiven("Hints", sHint);
				Hint_ShowHint_Hold("Hints", sHint, true, 1.5f, true, 15.f, true, true);
			}
		}
		else
		{
			if (Hint_GetCurrentEntry() == sHint)
				Hint_StopHint();
		}
	}
	
	void OnInteract_SaveLamp(const tString &in asEntity)
	{
		////////////////
		// About to get lit!
		if (Lamp_GetLit(asEntity) == false)
			SaveGameProgress();
		else
			Map_AddTimer(asEntity, 1.f, "OnTimer_SaveGameProgress");
	}
	
	void OnTimer_SaveGameProgress(const tString&in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
		SaveGameProgress();
	}
	
	void SaveGameProgress()
	{
		/////////////////
		// Save game
		SaveRoom_SaveGame(true, true);
		
		////////////////
		// Hints
		if (Hint_GetCurrentEntry() == GameDifficulty_GetSaveHint())
			Hint_StopHint();
		
		GameStats_IncreaseEntryAmount(eHeroStats_TimesSaved);
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
    void DebugCheck(const tString &in asTimer){
        /*
        cLux_AddDebugMessage("AREA X: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_Halls").x, true);
        cLux_AddDebugMessage("AREA Y: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_Halls").y, true);
        cLux_AddDebugMessage("AREA Z: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_Halls").z, true);
        
        
        
        
        cLux_AddDebugMessage("AREA X: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_LadderExit").x, true);
        cLux_AddDebugMessage("AREA Y: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_LadderExit").y, true);
        cLux_AddDebugMessage("AREA Z: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_LadderExit").z, true);
        
        
        cLux_AddDebugMessage("AREA X: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_GasChamber").x, true);
        cLux_AddDebugMessage("AREA Y: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_GasChamber").y, true);
        cLux_AddDebugMessage("AREA Z: " + Entity_GetPosition("Trigger_Leave_ThreatCorridors_GasChamber").z, true);
        */
        
        Map_RestartCurrentTimer(0.1f);
    }
    
    void DeaggroCheck(const tString &in asTimer){
        //cLux_AddDebugMessage("Checking. Stalker mode: "+ Stalker_GetMode("stalker_test"), true);
        //cLux_AddDebugMessage("Checking. Stalker presence: "+ Stalker_GetPresence("stalker_test"));
        //cLux_AddDebugMessage("Checking. Stalker HUNTING: "+ Terror_GetPlayerIsBeingHunted(), true);
        cLux_AddDebugMessage("Checking. Stalker STATE: "+ StateMachine_GetCurrentStateName("stalker_test"), true);
        
        if(StateMachine_GetCurrentStateName("stalker_test") == "Alert"){
            Terror_SetEnemyMusicActive(true);
            
            cLux_AddDebugMessage("TIMER RESTARTED");
            Map_RemoveTimer("deaggro");
        } else{
            if(!Map_TimerExists("deaggro") && (StateMachine_GetCurrentStateName("stalker_test") == "Retreat" || StateMachine_GetCurrentStateName("stalker_test") == "Stalk")){
                cLux_AddDebugMessage("TIMER ADDED");
                Map_AddTimer("deaggro", 10.0f, "Stalker_Deaggro");
            }
        }
        //Map_GetEntity("stalker_test").
        
        Map_RestartCurrentTimer(0.1f);
        
    }
    
    void Stalker_Deaggro(const tString &in asTimer){
        //Actions to execute when he's aggroed for a time
        cLux_AddDebugMessage("STALKER DEAGGRO");
        if(!Music_IsSongPlaying("underground_wip_loop")){
            cLux_AddDebugMessage("SONG CHANGE");
            Terror_SetEnemyMusicActive(false);
            
            Music_PlayExt("underground_wip_loop", true, 0.5f, 1, 5.0f, 5.0f, eMusicPrio_BgAmb, true);
        }
    }
    
	bool ThreatCorridors_Enable(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1) {
            //cLux_AddDebugMessage("PARENT: "+asParent);
            //cLux_AddDebugMessage("CHILD: "+asChild);
			
            DebugStalkerThreatEnable();
            
            return true;
        }
        if (alState == -1) {
			DebugStalkerThreatDisable();
            
            return true;
        }
		return true;
	}
	
	void DebugStalkerThreatEnable() {
		Entity_SetActive("stalker_test", true);
        //Map_AddTimer("deaggro", 10.0f, "Stalker_Deaggro");
        Map_AddTimer("deaggrocheck", 0.0f, "DeaggroCheck");
        Stalker_SetEmergeAllowed("stalker_test", true);
        //Terror_SetEnemyMusicStage(eTerrorMusicAgentType_Stalker, eTerrorMusicStage_Searching);
		cLux_AddDebugMessage("Stalker is now ENABLED");
	}
	
	void DebugStalkerThreatDisable() {
		//Entity_SetActive("stalker_test", false);
        Map_RemoveTimer("deaggrocheck");
        Map_RemoveTimer("deaggro");
        
        Terror_SetEnemyMusicActive(false);
        Stalker_Retreat("stalker_test");
        //Terror_RemoveEnemy(Map_GetEntityID("stalker_test"));
        //Terror_RemoveHuntingEnemy(Map_GetEntityID("stalker_test"));
        Stalker_SetEmergeAllowed("stalker_test", false);
        if(!Music_IsSongPlaying("underground_wip_loop")){
            Music_PlayExt("underground_wip_loop", true, 0.5f, 1, 5.0f, 5.0f, eMusicPrio_BgAmb, true);
        }
		cLux_AddDebugMessage("Stalker is now DISABLED");
	}
	
    
    bool DeathFall(const tString &in asParent, const tString &in asChild, int alState){
        if(alState == 1){
            cLux_AddDebugMessage("PARENT: "+ asParent);
            Seq_FallToDeath(asParent);
            
            //PlayerBody_PlayAnimation("fall_and_get_up_quickly", ePlayerBodyAnimationLayer_FullBody, false, false, false);
            //PlayerBody_PlayCutsceneAnimation("player_end_tumble_intro_trench", false, 0.1f);
            //PlayerBody_PlayCutsceneAnimation("jump_fall", false, 0.1f);
            //PlayerBody_PlayCutsceneAtEntity("fall_and_get_up_quickly", "Player", false, 0.1f);
            
            
        }
        
        return true;
    }
    
    cSequenceStatesData mSeqDataFallInPit;
    void Seq_FallToDeath(const tString &in asTimer){
        Sequence_Begin("Seq_FallToDeath", mSeqDataFallInPit);
        if(Sequence_DoStepAndWait(cString_Sub(asTimer, "Death_Pit_".length(), -1) == "2" ? 4.0f : 0.2f)){
            /*
            cLux_GetPlayer().ChangeState(ePlayerState_Null);
            Player_SetActive(false);
            cLux_GetPlayer().GetCharacterBody().SetTestCollision(false);
            */
            
            Player_SetActive(false);
            cLux_AddDebugMessage("YOU DIED");
            Music_StopAll(0.2f);
            Effect_Fade_Out(0.2f);
        }        
        else if(Sequence_DoStepAndWait(0.5f)){
            Sound_PlayGui("player_falldamage_max.snt", 1.0f, eSoundEntryType_Gui);
        }
        else if(Sequence_DoStepAndContinue()){
            Death_Start("Fall");
        }
        Sequence_End();
    }
    
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		/*Put any functions that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE X 
}