#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"
#include "custom/helpers/helper_agent.hps"
#include "custom/helpers/helper_modules_custom.hps"
#include "custom/modules/EnvironmentalDamageHandler.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("xx-xx-dummy-level");
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		/////////////////
		// Preload gui
		//ImGui_PreloadImage("some_image");

		///////////////
		// Preload particles
		//ParticleSystem_Preload("some_particle.ps");

		//////////////
		// Preload screen effects
		//Material_Preload("some_material.mat");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		
		PlayerBody_SetActive(true);
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
		Entity_SetActive("debugitem_*", true);
		Item_AddToInventory("DynamoLantern");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		Game_AutoSave();
		cParticleSystem@ pPS = mBaseObj.GetWorld().GetParticleSystem("PoisonC_Test");
		cBoundingVolume@ pAreaBounds = Map_GetEntity("Area_GasRoom").GetMainBody().GetBoundingVolume();
		EnvironmentalDamage_AddGasArea(pPS.GetID(), pAreaBounds.GetMin(), pAreaBounds.GetMax(), false);
		
        //cLux_AddDebugMessage("PS ID: "+pPS.GetID());
		cLux_AddDebugMessage("MIN X: "+pAreaBounds.GetMin().x);
		cLux_AddDebugMessage("MIN Y: "+pAreaBounds.GetMin().y);
		cLux_AddDebugMessage("MIN Z: "+pAreaBounds.GetMin().z);
        cLux_AddDebugMessage("MAX X: "+pAreaBounds.GetMax().x);
        cLux_AddDebugMessage("MAX Y: "+pAreaBounds.GetMax().y);
        cLux_AddDebugMessage("MAX Z: "+pAreaBounds.GetMax().z);
        cLux_AddDebugMessage("PREVIOUS IGNORE GAS DAMAGE: "+Player_GetIgnoreGasDamage()); 
		Player_SetIgnoreGasDamage(false); 
        cLux_AddDebugMessage("CURRENT IGNORE GAS DAMAGE: "+Player_GetIgnoreGasDamage()); 
        //Music_Play("Bunker_Arsenal.ogg", 1.0f, eMusicPrio_BgAmb);
		Music_PlayExt("underground_wip_loop", true, 0.5f, 1, 5.0f, 0, eMusicPrio_BgAmb, true);
        
    }

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
		if (alAction == eAction_Test1)
		{
		}
	}
	
	void OnGasMaskStartEquip()
	{
		Entity_SetActive("block_box_gas_*", false);
	}
	
	void OnGasMaskStartUnequip()
	{
		Entity_SetActive("block_box_gas_*", true);
	}
    

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
    
    void DeaggroCheck(const tString &in asTimer){
        //cLux_AddDebugMessage("Checking. Stalker mode: "+ Stalker_GetMode("stalker_test"), true);
        //cLux_AddDebugMessage("Checking. Stalker presence: "+ Stalker_GetPresence("stalker_test"));
        //cLux_AddDebugMessage("Checking. Stalker HUNTING: "+ Terror_GetPlayerIsBeingHunted(), true);
        cLux_AddDebugMessage("Checking. Stalker STATE: "+ StateMachine_GetCurrentStateName("stalker_test"), true);
        
        if(StateMachine_GetCurrentStateName("stalker_test") == "Alert"){
            Terror_SetEnemyMusicActive(true);
            
            cLux_AddDebugMessage("TIMER RESTARTED");
            Map_RemoveTimer("deaggro");
        } else{
            if(!Map_TimerExists("deaggro") && (StateMachine_GetCurrentStateName("stalker_test") == "Retreat" || StateMachine_GetCurrentStateName("stalker_test") == "Stalk")){
                cLux_AddDebugMessage("TIMER ADDED");
                Map_AddTimer("deaggro", 10.0f, "Stalker_Deaggro");
            }
        }
        //Map_GetEntity("stalker_test").
        
        Map_RestartCurrentTimer(0.1f);
        
    }
    
    void Stalker_Deaggro(const tString &in asTimer){
        //Actions to execute when he's aggroed for a time
        cLux_AddDebugMessage("STALKER DEAGGRO");
        if(!Music_IsSongPlaying("underground_wip_loop")){
            cLux_AddDebugMessage("SONG CHANGE");
            Terror_SetEnemyMusicActive(false);
            
            Music_PlayExt("underground_wip_loop", true, 0.5f, 1, 5.0f, 5.0f, eMusicPrio_BgAmb, true);
        }
    }
    
	bool ThreatCorridors_Enable(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1) {
			DebugStalkerThreatEnable();
		
			Entity_SetActive("Trigger_ThreatCorridors", false);
			Entity_SetActive("Trigger_Leave_ThreatCorridors_GasChamber", true);
			Entity_SetActive("Trigger_Leave_ThreatCorridors_Halls", true);
		}
		return true;
	}
	
	
	bool ThreatCorridors_Disable(const tString &in asParent, const tString &in asChild, int alState)
	{	
		if (alState == 1) {
			DebugStalkerThreatDisable();
            
			Entity_SetActive("Trigger_ThreatCorridors", true);
			Entity_SetActive("Trigger_Leave_ThreatCorridors_GasChamber", false);
			Entity_SetActive("Trigger_Leave_ThreatCorridors_Halls", false);
		}
	
		return true;
	}
	
	void DebugStalkerThreatEnable() {
		Entity_SetActive("stalker_test", true);
        //Map_AddTimer("deaggro", 10.0f, "Stalker_Deaggro");
        Map_AddTimer("deaggrocheck", 0.0f, "DeaggroCheck");
        //Terror_SetEnemyMusicStage(eTerrorMusicAgentType_Stalker, eTerrorMusicStage_Searching);
		cLux_AddDebugMessage("Stalker is now active: " + Entity_IsActive("stalker_test"));
	}
	
	void DebugStalkerThreatDisable() {
		//Entity_SetActive("stalker_test", false);
        Map_RemoveTimer("deaggrocheck");
        Map_RemoveTimer("deaggro");
        
        Terror_SetEnemyMusicActive(false);
        Stalker_Retreat("stalker_test");
        //Terror_RemoveEnemy(Map_GetEntityID("stalker_test"));
        //Terror_RemoveHuntingEnemy(Map_GetEntityID("stalker_test"));
        Stalker_SetEmergeAllowed("stalker_test", false);
        if(!Music_IsSongPlaying("underground_wip_loop")){
            Music_PlayExt("underground_wip_loop", true, 0.5f, 1, 5.0f, 5.0f, eMusicPrio_BgAmb, true);
        }
		cLux_AddDebugMessage("Stalker is now RETREATED");
	}
	

 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		/*Put any functions that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE X 
}