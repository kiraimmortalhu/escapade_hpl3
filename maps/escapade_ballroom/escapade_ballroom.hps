#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

#include "helpers/helper_agent.hps"
#include "helpers/helper_gun.hps"
#include "helpers/helper_props_custom.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("escapade-intro");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		/////////////////
		// Preload gui
		//ImGui_PreloadImage("some_image");

		///////////////
		// Preload particles
		//ParticleSystem_Preload("some_particle.ps");

		//////////////
		// Preload screen effects
		//Material_Preload("some_material.mat");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		Music_StopAll(0.0f);
        // Any general setup of script / entities
		PlayerBody_SetModel("player_rebirth_ghoul.ent");
		PlayerBody_SetActive(false);
		
		/////////////////////////
		// Debug
		if (cLux_ScriptDebugOn())
		{
		Item_AddToInventory("DynamoLantern");
		}
        Effect_Fade_Out(0.0f);
        Effect_Fade_In(5.0f);
        
        Player_SetActive(false);
        
        // Disable crosshair
        Player_ShowCrossHairIcons(false);
        
        Sound_Play("Sound_1", 5.0f);
        Sound_Play("Sound_3", 5.0f);
        
        CameraAnimation_Begin("Intro", "", false);
        Music_PlayExt("strakkvartett_intro", false, 0.4f, 1.0f, 2.0f, 0.0f, eMusicPrio_BgAmb, true);
        
        //Sound_
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		Game_AutoSave();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
        PlayerBody_SetActive(true);
        Player_SetActive(true);
        PlayerBody_SetModel("player_rebirth_ghoul.ent");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed == false) return;
		
		if (alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------
    void PerformBlink(){
        Effect_Fade_Out(0.25f);
        Map_AddTimer("blink_end", 0.05f, "OnTimer_PerformBlinkEnd");
    }
    
    void OnTimer_PerformBlinkEnd(const tString &in asTimer){
        Effect_Fade_In(0.25f);
    }
    
    void PerformBlink_Slower(){
        Effect_Fade_Out(0.25f);
        Map_AddTimer("blink_end", 0.25f, "OnTimer_PerformBlinkSlowerEnd");
    }
    
    void OnTimer_PerformBlinkSlowerEnd(const tString &in asTimer){
        cLux_AddDebugMessage("FADE LONGER");
        Effect_Fade_In(3.0f);
    }
    
    bool OnPassedCameraNode_Intro3(const tString &in asEntity, int alDirection)
    {
        PerformBlink();
        return true;
    }
    
    int blurID;
    bool OnPassedCameraNode_Intro6(const tString &in asEntity, int alDirection)
    {
        PerformBlink_Slower();
        blurID = Effect_Blur_Start(0.1f, 5.0f);
        
        return false;
    }
    
    int imageTrailID;
    bool OnPassedCameraNode_Intro7(const tString &in asEntity, int alDirection)
    {
        PerformBlink_Slower();
        imageTrailID = Effect_ImageTrail_Start(2.0f, 10.0f, -1.0f, 80.0f);
        
        return true;
    }
    
    bool OnPassedCameraNode_Intro8(const tString &in asEntity, int alDirection)
    {
        Sound_Stop("Sound_1", 1.0f);
        Sound_Play("Sound_2", 1.0f);
        Sound_Fade("Sound_3", 1.0f, 2.0f);
        Sound_FadeGlobalSpeed(0.8f, 5.0f);
        return true;
    }
    
    bool OnPassedCameraNode_Intro10(const tString &in asEntity, int alDirection)
    {
        Sound_FadeGlobalSpeed(0.2f, 4.0f);
        Sound_FadeGlobalVolume(0.0f, 4.0f);
        
        Effect_Fade_Out(5.0f);
        return true;
    }
    
    bool OnPassedCameraNode_Intro14(const tString &in asEntity, int alDirection)
    {
        
        
        
        return true;
    }
    
    bool OnPassedCameraNode_Intro15(const tString &in asEntity, int alDirection)
    {   
        //cLux_ChangeMap("escapade_entrance.hpm", "IntroEnd", "MapTransfer_BallroomIntro", "", "", true, 6.0f);
        //Game_DoMapChange("escapade_entrance.hpm", "MapTransfer_BallroomIntro");
        //cScript_SetGlobalVarBool("intro_active", true);
        
        
        cLux_AddDebugMessage("MAP CHANGE");
        PlayerBody_SetActive(true);
        Player_SetActive(true);
        PlayerBody_SetModel("player_rebirth_ghoul.ent");
        
        CameraAnimation_End();
        cLux_ChangeMap("escapade_entrance.hpm", "IntroEnd", "", "", "", false, 6.0f);
        return true;
    }
	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	/*Put any functions that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		/*Put any functions that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE X 
}