#include "custom/agents/agent_types_custom.hps"

//-------------------------------------------------

//////////////////////////////////
// STALKER
//////////////////////////////////

//-------------------------------------------------

void Stalker_GoToHole(const tString &in asStalker, const tString &in asHole, bool abForce = false, bool abInstant = false, 
					  eStalkerSpeed aSpeed = eStalkerSpeed_Walk)
{
	cScript_SetGlobalArgString(0, asHole);
	cScript_SetGlobalArgBool(1, abForce);
	cScript_SetGlobalArgBool(2, abInstant);
	cScript_SetGlobalArgInt(3, int(aSpeed));
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_GoToHole") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_GoToHole()");
	}
}

//-------------------------------------------------

void Stalker_EmergeFromHole(const tString &in asStalker, const tString &in asHole, bool abInstant)
{
	cScript_SetGlobalArgString(0, asHole);
	cScript_SetGlobalArgBool(1, abInstant);
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_EmergeFromHole") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_EmergeFromHole()");
	}
}

//-------------------------------------------------

void Stalker_GetMapTransferData(const tString &in asStalker, 
								int &out alState,
								int &out alMode,
								float &out afPresence,
								float &out afTenacity,
								bool &out abEmergeAllowed,
								bool &out abRecentlyHurt,
								bool &out abRetreatActive,
								int &out alAlertState,
								bool &out abInterestAlert, 
								float &out afInterestAreaRadius, 
								float &out afInterestIncreaseCount, 
								float &out afInterestPauseEmergeCount, 
								float &out afInterestEmergeCount, 
								float &out afInterestEmergeTime, 
								cVector3f &out avInterestAreaPos,
								bool &out abEmerging,
								float &out afPathDistToPlayer)
{
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_GetMapTransferData") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_GetMapTransferData()");
		return;
	}
	
	alState = cScript_GetGlobalVarInt("Stalker_State");
	alMode = cScript_GetGlobalVarInt("Stalker_Mode");
	afPresence = cScript_GetGlobalVarFloat("Stalker_Presence");
	afTenacity = cScript_GetGlobalVarFloat("Stalker_Tenacity");
	abEmergeAllowed = cScript_GetGlobalVarBool("Stalker_EmergeAllowed");
	abRecentlyHurt = cScript_GetGlobalVarBool("Stalker_RecentlyHurt");
	abRetreatActive = cScript_GetGlobalVarBool("Stalker_RetreatActive");		
	alAlertState = cScript_GetGlobalVarInt("Stalker_AlertState");
	abInterestAlert = cScript_GetGlobalVarBool("Stalker_InterestAlert");
	afInterestAreaRadius = cScript_GetGlobalVarFloat("Stalker_InterestAreaRadius");
	afInterestIncreaseCount = cScript_GetGlobalVarFloat("Stalker_InterestIncreaseCount");
	afInterestPauseEmergeCount = cScript_GetGlobalVarFloat("Stalker_InterestPauseEmergeCount");
	afInterestEmergeCount = cScript_GetGlobalVarFloat("Stalker_InterestEmergeCount");
	afInterestEmergeTime = cScript_GetGlobalVarFloat("Stalker_InterestEmergeTime");
	avInterestAreaPos = cScript_GetGlobalVarVector3f("Stalker_InterestAreaPos");
	abEmerging = cScript_GetGlobalVarBool("Stalker_Emerging");
	afPathDistToPlayer = cScript_GetGlobalVarFloat("Stalker_PathDistToPlayer");
}

//-------------------------------------------------

void Stalker_ApplyMapTransferData(const tString &in asStalker, 
								  bool abInsideTransferArea,
								  int alState, 
								  int alMode, 
								  float afPresence, 
								  float afTenacity, 
								  bool abEmergeAllowed, 
								  bool abRecentlyHurt,
								  bool abRetreatActive,
								  int alAlertState,
								  bool abInterestAlert, 
								  float afInterestAreaRadius, 
								  float afInterestIncreaseCount, 
								  float afInterestPauseEmergeCount, 
								  float afInterestEmergeCount, 
								  float afInterestEmergeTime, 
								  const cVector3f &in avInterestAreaPos,
								  bool abEmerging,
								  float afPathDistToPlayer)
										  
{	
	cScript_SetGlobalArgBool(0, abInsideTransferArea);
	cScript_SetGlobalArgInt(1, alState);
	cScript_SetGlobalArgInt(2, alMode);
	cScript_SetGlobalArgFloat(3, afPresence);
	cScript_SetGlobalArgFloat(4, afTenacity);
	cScript_SetGlobalArgBool(5, abEmergeAllowed);
	cScript_SetGlobalArgBool(6, abRecentlyHurt);
	cScript_SetGlobalArgBool(7, abRetreatActive);
	cScript_SetGlobalArgInt(8, alAlertState);
	cScript_SetGlobalArgBool(9, abInterestAlert);
	cScript_SetGlobalArgFloat(10, afInterestAreaRadius);
	cScript_SetGlobalArgFloat(11, afInterestIncreaseCount);
	cScript_SetGlobalArgFloat(12, afInterestPauseEmergeCount);
	cScript_SetGlobalArgFloat(13, afInterestEmergeCount);
	cScript_SetGlobalArgFloat(14, afInterestEmergeTime);
	cScript_SetGlobalArgVector3f(15, avInterestAreaPos);
	cScript_SetGlobalArgBool(16, abEmerging);
	cScript_SetGlobalArgFloat(17, afPathDistToPlayer);
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_ApplyMapTransferData") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_ApplyMapTransferData()");
	}
}

//-------------------------------------------------

int Stalker_GetMode(const tString &in asStalker)
{
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_GetMode") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_GetMode()");
		return -1;
	}
	
	return cScript_GetGlobalReturnInt();
}

//-------------------------------------------------

void Stalker_SetMode(const tString &in asStalker, eStalkerMode aMode, bool abResetPresence = false)
{
	cScript_SetGlobalArgInt(0, int(aMode));
	cScript_SetGlobalArgBool(1, abResetPresence);
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_SetMode") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_SetMode()");
		return;
	}
}

//-------------------------------------------------

void Stalker_Retreat(const tString &in asStalker)
{
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_Retreat") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_Retreat()");
		return;
	}
}

//-------------------------------------------------

tID Stalker_GetInterestAlertHoleID(const tString &in asStalker)
{
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_GetInterestAlertHoleID") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_GetInterestAlertHoleID()");
		return tID_Invalid;
	}
	return cScript_GetGlobalReturnID();
}

//-------------------------------------------------

bool Stalker_GetIsInsideWalls(const tString &in asStalker)
{
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_GetIsInsideWalls") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_GetIsInsideWalls()");
		return false;
	}
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

void Stalker_SetTenacity(const tString &in asStalker, float afTenacity)
{
	cScript_SetGlobalArgFloat(0, afTenacity);
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_SetTenacity") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_SetTenacity()");
		return;
	}
}

//-------------------------------------------------

float Stalker_GetTenacity(const tString &in asStalker)
{
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_GetTenacity") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_GetTenacity()");
		return -1.f;
	}
	
	return cScript_GetGlobalReturnFloat();
}

//-------------------------------------------------

bool Stalker_GetSaveRoomBehaviorActive(const tString &in asStalker)
{
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_GetSaveRoomBehaviorActive") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_GetSaveRoomBehaviorActive()");
		return false;
	}
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

float Stalker_GetPresence(const tString &in asStalker)
{
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_GetPresence") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_GetPresence()");
		return -1.f;
	}
	
	return cScript_GetGlobalReturnFloat();
}

//-------------------------------------------------

int Stalker_GetGhoulHoleNetworkId(const tString &in asStalker)
{
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_GetGhoulHoleNetworkId") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_GetGhoulHoleNetworkId()");
		return -1;
	}
	return cScript_GetGlobalReturnInt();
}

//-------------------------------------------------

void Stalker_SetEmergeAllowed(const tString &in asStalker, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_SetEmergeAllowed") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_SetEmergeAllowed()");
		return;
	}
}

//-------------------------------------------------

bool Stalker_GetEmergeAllowed(const tString &in asStalker)
{
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_GetEmergeAllowed") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_GetEmergeAllowed()");
		return false;
	}
	
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

bool Stalker_GetRecentlyHurt(const tString &in asStalker)
{
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_GetRecentlyHurt") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_GetRecentlyHurt()");
		return false;
	}
	
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

void Stalker_AddIgnoredPathBlockerBody(const tString &in asStalker, tID a_idBlocker)
{
	cScript_SetGlobalArgID(0, a_idBlocker);
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_AddIgnoredPathBlockerBody") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_AddIgnoredPathBlockerBody()");
		return;
	}
}

//-------------------------------------------------

void Stalker_RemoveIgnoredPathBlockerBody(const tString &in asStalker, tID a_idBlocker)
{
	cScript_SetGlobalArgID(0, a_idBlocker);
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_RemoveIgnoredPathBlockerBody") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_RemoveIgnoredPathBlockerBody()");
		return;
	}
}

//-------------------------------------------------

void Stalker_AddPathBlockerBody(const tString &in asStalker, tID a_idBlocker, bool abManualRemovalOnly = false)
{
	cScript_SetGlobalArgID(0, a_idBlocker);
	cScript_SetGlobalArgBool(1, abManualRemovalOnly);
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_AddPathBlockerBody") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_AddPathBlocker()");
		return;
	}
}

//-------------------------------------------------

void Stalker_RemovePathBlockerBody(const tString &in asStalker, tID a_idBlocker)
{
	cScript_SetGlobalArgID(0, a_idBlocker);
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_RemovePathBlockerBody") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_RemovePathBlocker()");
		return;
	}
}

//-------------------------------------------------

void Stalker_RemoveIgnoredSoundSourceBody(const tString &in asStalker, tID a_idBody)
{
	cScript_SetGlobalArgID(0, a_idBody);
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_RemoveIgnoredSoundSourceBody") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_RemoveIgnoredSoundSourceBody()");
		return;
	}
}

//-------------------------------------------------

void Stalker_PlayCutsceneAtEntity(const tString &in asStalker, const tString &in asAnim, const tString &in asEnt, 
								  float afFadeTime, const tString &in asStartCallback = "")
{
	cScript_SetGlobalArgString(0, asAnim);
	cScript_SetGlobalArgString(1, asEnt);
	cScript_SetGlobalArgFloat(2, afFadeTime);
	cScript_SetGlobalArgString(3, asStartCallback);
	if (cScript_RunGlobalFunc(asStalker, "cScrAgentStalker", "_Global_PlayCutsceneAtEntity") == false)
	{
		Error("Could not run '"+asStalker+"' / _Global_PlayCutsceneAtEntity()");
		return;
	}
}

//-------------------------------------------------

//////////////////////////////////
// RAT
//////////////////////////////////

//-------------------------------------------------

bool Rat_GetSpawnAtPos(const tString &in asRat)
{
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_GetSpawnAtPos") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_GetSpawnAtPos()");
		return false;
	}
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

bool Rat_EmergeToFood(const tString &in asRat, tID a_idEmergeHole, tID a_idTarget)
{
	cScript_SetGlobalArgID(0, a_idEmergeHole);
	cScript_SetGlobalArgID(1, a_idTarget);
		
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_EmergeToFood") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_EmergeToFood()");
		return false;
	}
	return cScript_GetGlobalReturnBool();
}

bool Rat_EmergeToWander(const tString &in asRat, tID a_idEmergeHole, tID a_idTarget)
{
	cScript_SetGlobalArgID(0, a_idEmergeHole);
	cScript_SetGlobalArgID(1, a_idTarget);
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_EmergeToWander") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_EmergeToWander()");
		return false;
	}
	return cScript_GetGlobalReturnBool();
}

bool Rat_EmergeToBloodTrail(const tString &in asRat, tID a_idEmergeHole, tID a_idTarget)
{
	cScript_SetGlobalArgID(0, a_idEmergeHole);
	cScript_SetGlobalArgID(1, a_idTarget);
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_EmergeToBloodTrail") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_EmergeToBloodTrail()");
		return false;
	}
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

bool Rat_Retreat(const tString &in asRat, bool abRun, bool abScared, bool abSensesActive, const tString &in asTargetHole = "", bool abFlame = false)
{
	iLuxEntity@ pHole = null;
	if (asTargetHole != "")
	{
		cLuxMap@ pMap = cLux_GetCurrentMap();
		if (pMap is null) return false;
		
		@pHole = pMap.GetEntityByName(asTargetHole);
	}
	
	cScript_SetGlobalArgBool(0, abRun);
	cScript_SetGlobalArgBool(1, abScared);
	cScript_SetGlobalArgBool(2, abSensesActive);
	cScript_SetGlobalArgID(3, pHole is null ? tID_Invalid : pHole.GetID());
	cScript_SetGlobalArgBool(4, abFlame);
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_Retreat") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_Retreat()");
		return false;
	}
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

void Rat_DelayedFoodRetreat(const tString &in asRat, float afDelay)
{
	cScript_SetGlobalArgFloat(0, afDelay);
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_DelayedFoodRetreat") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_DelayedFoodRetreat()");
		return;
	}
}

//-------------------------------------------------

void Rat_Eat(const tString &in asRat, tID a_idFood)
{
	cScript_SetGlobalArgID(0, a_idFood);
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_Eat") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_Eat()");
	}
}

//-------------------------------------------------

void Rat_SetEatTimeoutActive(const tString &in asRat, bool abActive)
{
	cScript_SetGlobalArgBool(0, abActive);
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_SetEatTimeoutActive") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_SetEatTimeoutActive()");
	}
}

//-------------------------------------------------

void Rat_Attack(const tString &in asRat, bool abQuickAttack, bool abWarningAttack)
{
	cScript_SetGlobalArgBool(0, abQuickAttack);
	cScript_SetGlobalArgBool(1, abWarningAttack);
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_Attack") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_Attack()");
	}
}

//-------------------------------------------------

bool Rat_TrackBloodTrail(const tString &in asRat, tID a_idTrailEntity)
{
	cScript_SetGlobalArgID(0, a_idTrailEntity);
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_TrackBloodTrail") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_TrackBloodTrail()");
		return false;
	}
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

bool Rat_Threatened(const tString&in asRat)
{
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_Threatened") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_Threatened()");
		return false;
	}
	
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

bool Rat_GetInThreatReactionRange(const tString&in asRat)
{
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_InThreatReactionRange") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_InThreatReactionRange()");
		return false;
	}
	
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------

tID Rat_GetPrevClosestBloodTrail(const tString&in asRat)
{
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_GetPrevClosestBloodTrail") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_GetPrevClosestBloodTrail()");
		return tID_Invalid;
	}
	
	return cScript_GetGlobalReturnID();
}

//-------------------------------------------------

void Rat_SetPrevClosestBloodTrail(const tString&in asRat, tID a_idBloodTrail)
{
	cScript_SetGlobalArgID(0, a_idBloodTrail);
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_SetPrevClosestBloodTrail") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_SetPrevClosestBloodTrail()");
	}
}

//-------------------------------------------------

void Rat_ResetHungerTimer(const tString&in asRat)
{
	if (cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_ResetHungerTimer") == false)
	{
		Error("Could not run '"+asRat+"' / _Global_ResetHungerTimer()");
	}
}

//-------------------------------------------------

// DoctorD edit
void RatKing_SetCanAggro(const tString&in asRat, bool canAggro){
    cScript_SetGlobalArgBool(0, canAggro);
    
    if(cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_SetCanAggro") == false){
        Error("Could not run '"+asRat+"' / _Global_SetCanAggro()");
    }
}

//-------------------------------------------------

// DoctorD edit
bool RatKing_GetCanAggro(const tString&in asRat){
    if(cScript_RunGlobalFunc(asRat, "cScrAgentRat", "_Global_GetCanAggro") == false){
        Error("Could not run '"+asRat+"' / _Global_SetCanAggro()");
    }
    
    return cScript_GetGlobalReturnBool();
}


//-------------------------------------------------

//////////////////////////////////
// SHOTGUN MAN
//////////////////////////////////

//-------------------------------------------------

void Shotgunner_AddPatrolNode(const tString &in asAgent, const tString &in asNode)
{
	cLuxPathfinder@ pPathfinder = cast<cLuxPathfinder@>(cLux_GetCurrentMap().GetEntityComponent(eLuxEntityComponentType_Pathfinder, asAgent));
	if (pPathfinder is null)
	{
		Error("Could not find pathfinder in entity '" + asAgent + "' for Shotgunner_AddPatrolNode");
		return;
	}
	
	if (pPathfinder.GetNodeFromName(asNode) is null)
	{
		Error("Could not find node with name '" + asNode + "' for Shotgunner_AddPatrolNode");
		return;
	}
	
	cScript_SetGlobalArgString(0, asNode);
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_AddPatrolNode") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_AddPatrolNode()");
	}
}

//-------------------------------------------------

void Shotgunner_SetWaitInIdle(const tString &in asAgent, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_SetWaitInIdle") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_SetWaitInIdle()");
	}
}

//-------------------------------------------------

void Shotgunner_StartPatrol(const tString &in asAgent)
{
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_StartPatrol") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_StartPatrol()");
	}
}

//-------------------------------------------------

void Shotgunner_SetShootMapLight(const tString &in asAgent, const tString &in asMapLight)
{
	iLight@ pLight = cLux_GetCurrentMap().GetWorld().GetLight(asMapLight);
	if (pLight is null) return;
	
	cScript_SetGlobalArgID(0, pLight.GetID());
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_SetShootMapLight") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_SetShootMapLight()");
	}
}

//-------------------------------------------------

void Shotgunner_Shoot(const tString &in asAgent, const tString &in asEntity, bool abReload, bool abWaitInIdleAfterShoot = false)
{
	cScript_SetGlobalArgString(0, asEntity);
	cScript_SetGlobalArgBool(1, abReload);
	cScript_SetGlobalArgBool(2, abWaitInIdleAfterShoot);
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_Shoot") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_Shoot()");
	}
}

//-------------------------------------------------

void Shotgunner_ResetWaitInIdleAfterShoot(const tString &in asAgent)
{
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_ResetWaitInIdleAfterShoot") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_ResetWaitInIdleAfterShoot()");
	}
}

//-------------------------------------------------

void Shotgunner_AddShootIgnoreEnt(const tString &in asAgent, const tString &in asEntity)
{
	cScript_SetGlobalArgString(0, asEntity);
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_AddShootIgnoreEnt") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_AddShootIgnoreEnt()");
	}
}

//-------------------------------------------------

void Shotgunner_RemoveShootIgnoreEnt(const tString &in asAgent, const tString &in asEntity)
{
	cScript_SetGlobalArgString(0, asEntity);
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_RemoveShootIgnoreEnt") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_RemoveShootIgnoreEnt()");
	}
}

//-------------------------------------------------

void Shotgunner_AddRouteBlockerSet(const tString &in asAgent, const tString &in asBlockerA, const tString &in asBlockerB)
{
	cLuxMap@ pMap = cLux_GetCurrentMap();
	if (pMap is null) return;
	
	iLuxEntity@ pEntA = pMap.GetEntityByName(asBlockerA);
	iLuxEntity@ pEntB = pMap.GetEntityByName(asBlockerB);
	
	if (pEntA is null) return;
	if (pEntB is null) return;
	
	cScript_SetGlobalArgID(0, pEntA.GetID());
	cScript_SetGlobalArgID(1, pEntB.GetID());
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_AddRouteBlockerSet") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_AddRouteBlockerSet()");
	}
}

//-------------------------------------------------

void Shotgunner_SetRouteBlockerActive(const tString &in asAgent, const tString &in asBlocker, bool abActive)
{	
	iLuxEntity@ pEnt = cLux_GetCurrentMap().GetEntityByName(asBlocker);
	if (pEnt is null) return;
	
	cScript_SetGlobalArgID(0, pEnt.GetID());
	cScript_SetGlobalArgBool(1, abActive);
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_SetRouteBlockerActive") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_SetRouteBlockerActive()");
	}
}

//-------------------------------------------------

void Shotgunner_Retreat(const tString &in asAgent)
{
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_Retreat") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_Retreat()");
	}
}

//-------------------------------------------------

void Shotgunner_SetEncounterBarksActive(const tString &in asAgent, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_SetEncounterBarksActive") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_SetEncounterBarksActive()");
	}
}

//-------------------------------------------------

void Shotgunner_SetChantPoem(const tString &in asAgent, bool abX)
{
	cScript_SetGlobalArgBool(0, abX);
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_SetChantPoem") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_SetChantPoem()");
	}
}

//-------------------------------------------------

void Shotgunner_ResetPoemCount(const tString &in asAgent)
{
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_ResetPoemCount") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_ResetPoemCount()");
	}
}

//-------------------------------------------------

void Shotgunner_AddDoor(const tString &in asAgent, tID a_idDoor)
{
	cScript_SetGlobalArgID(0, a_idDoor);
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentShotgunner", "_Global_AddDoor") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_AddDoor()");
	}
}

//-------------------------------------------------

//////////////////////////////////
// FOG SILHOUETTE
//////////////////////////////////

//-------------------------------------------------

void FogSilhouette_SetActive(const tString &in asAgent, bool abX)
{
	array<iLuxEntity@> vAgents;
	cLux_GetCurrentMap().GetEntityArray(asAgent, eLuxEntityType_Agent, "cScrAgentFogSilhouette", vAgents);
	
	for (int i = 0; i < vAgents.size(); ++i)
	{
		iLuxEntity@ pAgent = vAgents[i];
		if (pAgent is null) continue;
		
		tString sName = pAgent.GetName();
		
		cScript_SetGlobalArgBool(0, abX);
		if (cScript_RunGlobalFunc(sName, "cScrAgentFogSilhouette", "_Global_SetActive") == false)
		{
			Error("Could not run '" + sName + "' / _Global_SetActive()");
		}
	}	
}

//-------------------------------------------------

void FogSilhouette_AddPatrolNode(const tString &in asAgent, const tString &in asNode)
{
	cLuxPathfinder@ pPathfinder = cast<cLuxPathfinder@>(cLux_GetCurrentMap().GetEntityComponent(eLuxEntityComponentType_Pathfinder, asAgent));
	if (pPathfinder is null)
	{
		Error("Could not find pathfinder in entity '" + asAgent + "' for FogSilhouette_AddPatrolNode");
		return;
	}
	
	if (pPathfinder.GetNodeFromName(asNode) is null)
	{
		Error("Could not find node with name '" + asNode + "' for FogSilhouette_AddPatrolNode");
		return;
	}
	
	cScript_SetGlobalArgString(0, asNode);
	if (cScript_RunGlobalFunc(asAgent, "cScrAgentFogSilhouette", "_Global_AddPatrolNode") == false)
	{
		Error("Could not run '" + asAgent + "' / _Global_AddPatrolNode()");
	}
}

//-------------------------------------------------

void FogSilhouette_SetFadeDistMul(const tString &in asAgent, float afX)
{
	array<iLuxEntity@> vAgents;
	cLux_GetCurrentMap().GetEntityArray(asAgent, eLuxEntityType_Agent, "cScrAgentFogSilhouette", vAgents);
	
	for (int i = 0; i < vAgents.size(); ++i)
	{
		iLuxEntity@ pAgent = vAgents[i];
		if (pAgent is null) continue;
		
		tString sName = pAgent.GetName();
		
		cScript_SetGlobalArgFloat(0, afX);
		if (cScript_RunGlobalFunc(sName, "cScrAgentFogSilhouette", "_Global_SetFadeDistMul") == false)
		{
			Error("Could not run '" + sName + "' / _Global_SetFadeDistMul()");
		}
	}	
}

//-------------------------------------------------

void FogSilhouette_SpawnAtShotgunner(const tString &in asAgent)
{
	array<iLuxEntity@> vAgents;
	cLux_GetCurrentMap().GetEntityArray(asAgent, eLuxEntityType_Agent, "cScrAgentFogSilhouette", vAgents);
	
	for (int i = 0; i < vAgents.size(); ++i)
	{
		iLuxEntity@ pAgent = vAgents[i];
		if (pAgent is null) continue;
		
		tString sName = pAgent.GetName();		
		if (cScript_RunGlobalFunc(sName, "cScrAgentFogSilhouette", "_Global_SpawnAtShotgunner") == false)
		{
			Error("Could not run '" + sName + "' / _Global_SpawnAtShotgunner()");
		}
	}	
}


//-------------------------------------------------