#include "interfaces/PlayerState_Interface.hps"
#include "custom/player/PlayerState_UsingItem_Base.hps"
#include "base/InputHandler_Types.hps"
#include "player/Player_Types.hps"
#include "helpers/helper_props.hps"
#include "custom/helpers/helper_modules_custom.hps"
#include "helpers/helper_modules.hps"
#include "custom/helpers/helper_items.hps"
#include "custom/helpers/helper_props_custom.hps"

//------------------------------------------------------------

const float gfUsingKey_MinPitch = cMath_ToRad(-55.f);
const float gfUsingKey_MaxPitch = cMath_ToRad(30.f);
const float gfUsingKey_PitchFadeTime = 0.25f;


///////////////
// Player anims
//const tString gsKeyUseAnim_Player = "tool_cutter_cut_chain";

//------------------------------------------------------------

class cScrPlayerState_UsingLever : iScrPlayerState_UsingItem_Base, iScrPlayerState_Interface
{
	//------------------------------------------------------------
		
	/////////////////////////////////////////
	// INIT
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void Init()
	{
		iScrPlayerState_UsingItem_Base::Init();
		
		msFocusIntroAnim_R = "tool_torch_aim_start_rarm";
		msFocusLoopAnim_R = "tool_torch_aim_rarm";
		msFocusOutroAnim_R = "tool_torch_aim_end_rarm";
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GENERAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnEnterState(int alPrevStateId)
	{
		////////////////
		// Enter base
		iScrPlayerState_UsingItem_Base::OnEnterState(alPrevStateId);
		cLux_AddDebugMessage("LEVER USE");
		////////////////
		// Setup vars
		
		////////////////
		// Setup body
		////////////////
		// Setup state
		mbLeaveState = false;
		mlAnimState = -1;
		mlPrevAnimState = -1;
		mlUseAction = eAction_UseItem;
		mbCanInteractWithWorld = false;
		mbEquipLighterInLeftHand = false;
		mbWaitForUnequip = false;
		mWaitForUnequipHand = eItemHandlerHand_Right;
		msWaitForUnequipItem = "";
		m_setInteractableEntityClasses.Clear();
		mfIntroTimer = 0;
		mfIntroRelTime = 0;
		mfAlignYawCount = 0.f;
		
		////////////////
		// Setup item entity
		msItemEntity = Item_GetHeldEntity(mItemHand);
		msItemType = Item_GetEntityItemType(msItemEntity);
		iLuxEntity@ pItemEntity = cLux_GetCurrentMap().GetEntityByName(msItemEntity, eLuxEntityType_Prop);
		m_idItemEntity = pItemEntity !is null ? pItemEntity.GetID() : tID_Invalid;

		////////////////
		// Setup player
		Player_SetIsUsingItem(true);
		Player_SetCanRun(false);
		
        
		////////////////////////
		// Set relative time pos of the intro animations to make them less jarring
		mfIntroRelTime = GetAnimStateRelTime(eUsingItemAnimState_Intro, eUsingItemAnimState_Outro);
		
		ChangeAnimState(eUsingItemAnimState_Intro);
		if (mbUsesOtherHandAnims)
		{
			WaitForUnequip(mItemHand == eItemHandlerHand_Left ? eItemHandlerHand_Right : eItemHandlerHand_Left, msOnEnterUnequipException);
			PlayerBody_SetShoulderBobActive(false);
		}
		
		////////////////
		// Zoom
		if (mbDoZoom)
		{
			mBaseObj.mpPlayer.FadeCameraFOVMulTo(ePlayerFOVMul_UseItem, gfUsingItemBase_ZoomAmount, gfUsingItemBase_ZoomSpeed);
		}
        cLux_AddDebugMessage("" + alPrevStateId);
        
	}
	
    void OnLeaveState(int alNextStateId)
	{
        iScrPlayerState_UsingItem_Base::OnEnterState(alNextStateId);
        cLux_AddDebugMessage("LEVER STOP USE");
        
        ///////////////
		// Reset vars
		mfMinPitch = 0.f;
		mfMaxPitch = 0.f;
		mfGoalPitch = 0.f;
		mfStartPitch = 0.f;
		mfPitchFadeTime = 0.f;
		mfPitchFadeCount = 0.f;
		
		mbCustomBonePosActiveL = false;
		mbCustomBonePosActiveR = false;
		
		////////////////
		// Reset player
		Player_SetIsUsingItem(false);		
		Player_ShowCrossHairIcons(true, true);
		Player_SetCanRun(true);
		
		////////////////
		// Reset player body
		PlayerBody_SetRightArmYawOffset(0.f);
		PlayerBody_SetRightArmPitchOffset(0.f);
		PlayerBody_SetCrouchArmRotationOffsetActive(true);
		PlayerBody_SetShoulderBobActive(true);
				
		/////////////////////////
		// Autoequip the next item of the same type?
		if (mbAutoEquipNextItem && ItemType_GetCountInInventory(msItemType) > 0)
		{
			Item_Equip(ItemType_GetFirstInInventory(msItemType));
		}
        
        
		////////////////
		// Equip item that was unequipped when entering state?
		if (msWaitForUnequipItem != "")
		{
			if (mfEquipLastItemOnLeaveDelay > 0.f)
			{
				cLuxMap@ pMap = cLux_GetCurrentMap();
				if (pMap !is null)
					pMap.AddTimer(msWaitForUnequipItem, mfEquipLastItemOnLeaveDelay, "$_UsingItem_OnTimer_EquipLastItem");
			}
			else
			{
				Item_TakeOut(msWaitForUnequipItem);
			}
		}
		
		/////////////////
		// Reset zoom
		if (mbDoZoom && mBaseObj.mpPlayer.GetCameraFOVMul() != 1.f)
		{
			mBaseObj.mpPlayer.FadeCameraFOVMulTo(ePlayerFOVMul_UseItem, 1.f, gfUsingItemBase_ZoomSpeed * 0.75f);
		}
        
        cLux_AddDebugMessage("" + alNextStateId);
    }
    
	//------------------------------------------------------------
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// ACTIONS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// HELPERS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// DEBUG
	/////////////////////////////////////////
	
	//------------------------------------------------------------
		
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afStartY)
	{
		return afStartY;
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// PROPERTIES
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	//------------------------------------------------------------
}