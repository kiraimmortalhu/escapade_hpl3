#include "interfaces/PlayerState_Interface.hps"
#include "custom/player/PlayerState_UsingItem_Base.hps"
#include "base/InputHandler_Types.hps"
#include "player/Player_Types.hps"
#include "helpers/helper_props.hps"
#include "custom/helpers/helper_modules_custom.hps"
#include "helpers/helper_modules.hps"
#include "custom/helpers/helper_items.hps"
#include "custom/helpers/helper_props_custom.hps"

//------------------------------------------------------------

const float gfUsingPuzzleItem_MinPitch = cMath_ToRad(-55.f);
const float gfUsingPuzzleItem_MaxPitch = cMath_ToRad(30.f);
const float gfUsingPuzzleItem_PitchFadeTime = 0.25f;

///////////////
// Player anims
//const tString gsPuzzleItemPlacementAnim_Player = "tool_wrench_rtu_noaction_larm";

//------------------------------------------------------------

class cScrPlayerState_UsingPuzzleItem : iScrPlayerState_UsingItem_Base, iScrPlayerState_Interface
{
	//------------------------------------------------------------
		
	/////////////////////////////////////////
	// INIT
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void Init()
	{
		iScrPlayerState_UsingItem_Base::Init();
		msItemPrompt = "UseItem";
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GENERAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnEnterState(int alPrevStateId)
	{
		////////////////
		// Enter base
		iScrPlayerState_UsingItem_Base::OnEnterState(alPrevStateId);
		
		////////////////
		// Setup vars
		
		////////////////
		// Setup body
		SetupPitchFade(gfUsingPuzzleItem_MinPitch, gfUsingPuzzleItem_MaxPitch, gfUsingPuzzleItem_PitchFadeTime, false);
	}
	
	//------------------------------------------------------------
	
	void UpdateAnimationStates(float afTimeStep) override
	{
		iScrPlayerState_UsingItem_Base::UpdateAnimationStates(afTimeStep);
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// ACTIONS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// HELPERS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	bool GetShowItemPrompt() override
	{
		iScrItemHandler_Interface@ pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
		return CheckCanUse() &&
			   pHandler !is null &&
			   (mPickBasics.UpdatePickCheck(mBaseObj.mpPlayer.GetCamera(), false) &&
			    pHandler.CanUseHeldItemOnWorld(eItemHandlerHand_Right, mPickBasics.GetFocusedEntity().GetName()));
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// DEBUG
	/////////////////////////////////////////
	
	//------------------------------------------------------------
		
	float DrawDebugOutput(cGuiSet@ apSet, iFontData@ apFont, float afStartY)
	{
		return afStartY;
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// PROPERTIES
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	//------------------------------------------------------------
}

//------------------------------------------------------------

class cScrPlayerState_UsingDynamite : cScrPlayerState_UsingPuzzleItem
{
	void Init()
	{
		cScrPlayerState_UsingPuzzleItem::Init();
		
		msFocusIntroAnim_R = "tool_dynamite_focus_start";
		msFocusLoopAnim_R = "tool_dynamite_focus_idle";
		msFocusOutroAnim_R = "tool_dynamite_focus_end";
	}
}

//------------------------------------------------------------

class cScrPlayerState_UsingDetonatorHandle : cScrPlayerState_UsingPuzzleItem
{
	void Init()
	{
		cScrPlayerState_UsingPuzzleItem::Init();
		
		msFocusIntroAnim_R = "tool_detonator_handle_focus_start";
		msFocusLoopAnim_R = "tool_detonator_handle_focus_idle";
		msFocusOutroAnim_R = "tool_detonator_handle_focus_end";
	}
}

//------------------------------------------------------------

class cScrPlayerState_UsingWheel : cScrPlayerState_UsingPuzzleItem
{
	void Init()
	{
		cScrPlayerState_UsingPuzzleItem::Init();
		
		msFocusIntroAnim_R = "tool_wheel_focus_start_rarm";
		msFocusIntroAnim_L = "tool_wheel_focus_start_larm";
		msFocusLoopAnim_R = "tool_wheel_focus_idle_rarm";
		msFocusLoopAnim_L = "tool_wheel_focus_idle_larm";
		msFocusOutroAnim_R = "tool_wheel_focus_end_rarm";
		msFocusOutroAnim_L = "tool_wheel_focus_end_larm";
		
		mbUsesOtherHandAnims = true;
		
		mfEquipLastItemOnLeaveDelay = 1.f;
	}
}

//------------------------------------------------------------

class cScrPlayerState_UsingCommunicationsKey : cScrPlayerState_UsingPuzzleItem
{
	void Init()
	{
		cScrPlayerState_UsingPuzzleItem::Init();
		
		msFocusIntroAnim_R = "tool_key_focus_start";
		msFocusLoopAnim_R = "tool_key_focus_idle";
		msFocusOutroAnim_R = "tool_key_focus_end";
	}
}

//------------------------------------------------------------

class cScrPlayerState_UsingPillboxKey : cScrPlayerState_UsingPuzzleItem
{
	void Init()
	{
		cScrPlayerState_UsingPuzzleItem::Init();
		
		msFocusIntroAnim_R = "tool_key_focus_start";
		msFocusLoopAnim_R = "tool_key_focus_idle";
		msFocusOutroAnim_R = "tool_key_focus_end";
	}
}

//------------------------------------------------------------

class cScrPlayerState_UsingFuse : cScrPlayerState_UsingPuzzleItem
{
	void Init()
	{
		cScrPlayerState_UsingPuzzleItem::Init();
		
		msFocusIntroAnim_R = "tool_fuse_focus_start";
		msFocusLoopAnim_R = "tool_fuse_focus_idle";
		msFocusOutroAnim_R = "tool_fuse_focus_end";
	}
}

//------------------------------------------------------------
//DoctorD edit
class cScrPlayerState_UsingOrbRed : cScrPlayerState_UsingPuzzleItem
{
	void Init()
	{
		cScrPlayerState_UsingPuzzleItem::Init();
		
		msFocusIntroAnim_R = "tool_orb_equip";
		msFocusLoopAnim_R = "tool_orb_idle";
		msFocusOutroAnim_R = "tool_orb_idle";
	}
}

//------------------------------------------------------------

class cScrPlayerState_UsingOrb : cScrPlayerState_UsingPuzzleItem
{
	void Init()
	{
		cScrPlayerState_UsingPuzzleItem::Init();
		
		msFocusIntroAnim_R = "tool_orb_equip";
		msFocusLoopAnim_R = "tool_orb_idle";
		msFocusOutroAnim_R = "tool_orb_idle";
	}
}

//------------------------------------------------------------

class cScrPlayerState_UsingLever : cScrPlayerState_UsingPuzzleItem
{
	void Init()
	{
		cScrPlayerState_UsingPuzzleItem::Init();
		
		msFocusIntroAnim_R = "torch_idle";
		msFocusLoopAnim_R = "torch_idle";
		msFocusOutroAnim_R = "torch_idle";
	}
}

//------------------------------------------------------------
