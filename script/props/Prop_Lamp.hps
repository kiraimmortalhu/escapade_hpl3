#include "interfaces/Prop_Interface.hps"
#include "player/Player_Types.hps"
#include "helper_items.hps"
#include "interfaces/UserComponent_Interface.hps"
#include "custom/components/ComponentInterfaces_Custom.hps"
#include "helpers/helper_player.hps"
#include "helpers/helper_modules.hps"
#include "custom/helpers/helper_player_custom.hps"
#include "custom/helpers/helper_modules_custom.hps"
#include "custom/helpers/helper_areas_custom.hps"

//------------------------------------------------------------

class cScrPropLamp : iScrProp, iScrProp_Interface
{
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// INIT
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void Init()
	{
		mbLit = true;
		mbFlickerOnState = false;
		mfFlickerTimer = -1;
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// LOADING
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void SetupAfterLoad(cWorld @apWorld, cResourceVarsObject@ apVars, cResourceVarsObject@ apInstanceVars)
	{
		mbCanBeLitByPlayer = apVars.GetVarBool("CanBeLitByPlayer", true);
		mbCanBeSnuffedOutByPlayer = apVars.GetVarBool("CanBeSnuffedOutByPlayer", false);
		mbRequiresFuel = apVars.GetVarBool("RequiresFuel", false);
		mbLightByDistance = apVars.GetVarBool("LightByDistance", false);
		mfLightDistance = apVars.GetVarFloat("LightDistance", 5.0f);
		msInteractSound = apVars.GetVarString("InteractSound", "");
		mbRequiresGeneratorPower = apVars.GetVarBool("RequiresGeneratorPower", false);
		
		SetLit(apInstanceVars.GetVarBool("Lit", true), false, true);
		mbConnectionDelay = apInstanceVars.GetVarBool("ConnectionDelay", true);
		
		bool bUseCustomFlicker = apInstanceVars.GetVarBool("UseCustomFlickerSettings", false);
		cResourceVarsObject@ pFlickerVars = bUseCustomFlicker ? apInstanceVars : apVars;
		
		msConnectedFogArea = apInstanceVars.GetVarString("FogArea", "");
		
		mfFlickerMinOnTimer = pFlickerVars.GetVarFloat("FlickerMinOnTime", 0.05f);
		mfFlickerMaxOnTimer = pFlickerVars.GetVarFloat("FlickerMaxOnTime", 1.f);
		mfFlickerMinOffTimer = pFlickerVars.GetVarFloat("FlickerMinOffTime", 0.025f);
		mfFlickerMaxOffTimer = pFlickerVars.GetVarFloat("FlickerMaxOffTime", 0.15f);
		mbFade = pFlickerVars.GetVarBool("FlickerFade", false);
		msFlickerOnSound = pFlickerVars.GetVarString("FlickerOnSound", "");
		msFlickerOffSound = pFlickerVars.GetVarString("FlickerOffSound", "");
		msFlickerOnPS = pFlickerVars.GetVarString("FlickerOnPS", "");
		msFlickerOffPS = pFlickerVars.GetVarString("FlickerOffPS", "");
		mfFlickerOffAlpha = pFlickerVars.GetVarFloat("FlickerOffAlpha", 0);
		mfFlickerOffAlphaMax = mfFlickerOffAlpha;
		
		SetFlickerActive(apInstanceVars.GetVarBool("FlickerActive", false));

		//////////////
		// Preload particles
		cLux_PreloadParticleSystem(msFlickerOnPS);
		cLux_PreloadParticleSystem(msFlickerOffPS);
		
		//mBaseObj.SetSaveDataIsUpdated(false);
		
		// Add component (Agents will use this)
		@mpLampComponent = UserComponent_LampComponent_Create(mBaseObj);
		
		if (mbLightByDistance) mBaseObj.SetAutoSleep(false);
		
		mBaseObj.SetFullGameSave(true);

		// Force custom break behaviour
		mBaseObj.SetUseCustomBreakBehaviour(true);
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GENERAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnUpdate(float afTimeStep)
	{
		UpdateFlicker(afTimeStep);
		UpdateDistanceLightUp(afTimeStep);
	}
	
	//------------------------------------------------------------
	
	/*void OnPostUpdate(float afTimeStep)
	{
	
	}*/
	
	//------------------------------------------------------------
	
	void ResetProperties()
	{
	}
	
	//------------------------------------------------------------
	
	void BeforeEntityDestruction()
	{
	}
		
	//------------------------------------------------------------
	
	void OnStartMove()
	{
	}
	
	//------------------------------------------------------------
	
	void ChangeState(int alState, bool abEffects, bool abChangeConnectionState = true)
	{
		mBaseObj.ChangeConnectionState(alState);
	}
	
	//------------------------------------------------------------
	
	void OnConnectionStateChange(iLuxEntity@ apEntity,int alState)
	{
		mlConnectionState = alState;		
		mBaseObj.Timer_Add(0, mbConnectionDelay ? cMath_RandRectf(0.1,0.3f) : 0.f, "Timer_LightUp");
	}
	
	//------------------------------------------------------------
	
	void Timer_LightUp(uint64 alID)
	{
		SetLit(mlConnectionState == 1, true, false);
	}
	
	//------------------------------------------------------------
	
	bool OnUpdateAutoSleep()
	{
		return mfFlickerTimer < 0;
	}
		
	//------------------------------------------------------------
	
	
	/////////////////////////////////////////
	// ACTIONS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnSetActive(bool abX)
	{
	
	}
	
	//------------------------------------------------------------
	
	void GiveDamage(iPhysicsBody@ apBodyHit, const cVector3f&in avOrigin, const cVector3f&in avHitPos, cLuxDamageProperties@ apDamageProps)
	{
		
	}
	
	//------------------------------------------------------------
	
	void OnHealthChange()
	{
	}
	
	//------------------------------------------------------------
	
	//NOTE: This is only useable if SetScriptCollisionCallbackActive is true
	void OnPhysicsCollision(iPhysicsBody @apBody, iPhysicsBody @apCollideBody, cPhysicsContactData&in apContactData)
	{
	
	}
	
	//------------------------------------------------------------

	void OnCustomBreak()
	{
		cLux_AddDebugMessage("BREAK!! :((" + mBaseObj.GetName());
		
		mBaseObj.DestroyConnectedLights();
		mBaseObj.GetMap().DestroyEntity(mBaseObj);
		
		/////////////////
		// Flag as unlit
		mbLit = false;
	}

	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// LAMP SPECIFIC ACTIONS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void _Global_SetLit()
	{
		SetLit(cScript_GetGlobalArgBool(0), cScript_GetGlobalArgBool(1), false);
	}
	
	//------------------------------------------------------------
	
	void SetLit(bool abLit, bool abEffects, bool abIsSetup)
	{
		if(mbLit == abLit) return;
		
		mBaseObj.SetSaveDataIsUpdated(true);
		
		mbLit = abLit;	
		mBaseObj.SetEffectsActive(mbLit, abEffects);
		
		if(msConnectedFogArea != "")
			FogArea_SetVisible(msConnectedFogArea, mbLit);

		if (mbLit)
		{
			ChangeState(1,abEffects,false);
		}
		else
		{
			ChangeState(-1,abEffects,false);
			mBaseObj.SetCustomEffectsOffAlpha(0);
		}
	}
	
	//------------------------------------------------------------
	
	void _Global_GetLit()
	{
		cScript_SetGlobalReturnBool(mbLit);
	}
	
	//------------------------------------------------------------
	
	void _Global_SetFlickerActive()
	{
		SetFlickerActive(cScript_GetGlobalArgBool(0));
	}
	
	//------------------------------------------------------------
	
	void SetFlickerActive(bool abActive)
	{
		mBaseObj.SetSaveDataIsUpdated(true);
		
		if (abActive && mfFlickerTimer < 0)
		{
			mbFlickerOnState = true;
			mfFlickerTimer = cMath_RandRectf(mfFlickerMinOnTimer, mfFlickerMaxOnTimer);
		}
		else if (!abActive && mfFlickerTimer != -1)
		{
			mfFlickerTimer = -1;
			if (mbLit) mBaseObj.SetEffectsActive(true, mbFade);
		}

		mBaseObj.WakeUp();
	}
	
	//------------------------------------------------------------
	
	void _Global_GetFlickerActive()
	{
		cScript_SetGlobalReturnBool(mbFlickerOnState);
	}
	
	//------------------------------------------------------------
	
	void _Global_SetupFlicker()
	{
		SetupFlicker(cScript_GetGlobalArgFloat(0), cScript_GetGlobalArgFloat(1), cScript_GetGlobalArgFloat(2), cScript_GetGlobalArgFloat(3),
					 cScript_GetGlobalArgBool(4), cScript_GetGlobalArgString(5), cScript_GetGlobalArgString(6), cScript_GetGlobalArgString(7), 
					 cScript_GetGlobalArgString(8), cScript_GetGlobalArgFloat(9), cScript_GetGlobalArgFloat(10));
	}
	
	//------------------------------------------------------------
	
	void _Global_GetCanBeHighlighted()
	{			
		bool bRet = ((mbLit == false && mbCanBeLitByPlayer) || (mbLit && mbCanBeSnuffedOutByPlayer));
		cScript_SetGlobalReturnBool(bRet);
	}
	
	//------------------------------------------------------------
	
	void SetupFlicker(float afMinOnTime, float afMaxOnTime, float afMinOffTime, float afMaxOffTime, bool abFade,
					  const tString &in asOnSound, const tString &in asOffSound, const tString &in asOnPS, const tString &in asOffPS, float afFlickerOffAlphaMin, float afFlickerOffAlphaMax)
	{
		mfFlickerMinOnTimer = afMinOnTime;
		mfFlickerMaxOnTimer = afMaxOnTime;
		mfFlickerMinOffTimer = afMinOffTime;
		mfFlickerMaxOffTimer = afMaxOffTime;
		mbFade = abFade;
		msFlickerOnSound = asOnSound;
		msFlickerOffSound = asOffSound;
		msFlickerOnPS = asOnPS;
		msFlickerOffPS = asOffPS;
		mfFlickerOffAlpha = afFlickerOffAlphaMin;
		mfFlickerOffAlphaMax = afFlickerOffAlphaMax;

		mBaseObj.WakeUp();
	}
	
	//------------------------------------------------------------
	
	void UpdateFlicker(float afTimeStep)
	{
		if (mfFlickerTimer < 0 || !mbLit) return;
		
		mfFlickerTimer -= afTimeStep;
		if (mfFlickerTimer <= 0)
		{
			tString sSound;
			tString sParticleSystem;
			
			///////////////////////////////
			// OFF
			if (mbFlickerOnState)
			{
				mfFlickerTimer = cMath_RandRectf(mfFlickerMinOffTimer, mfFlickerMaxOffTimer);
				sSound = msFlickerOffSound;
				sParticleSystem = msFlickerOffPS;
				
				mBaseObj.SetCustomEffectsOffAlpha((mfFlickerOffAlpha == mfFlickerOffAlphaMax) ? mfFlickerOffAlpha : cMath_RandRectf(mfFlickerOffAlpha, mfFlickerOffAlphaMax));
			}
			
			///////////////////////////////
			// ON
			else
			{
				mfFlickerTimer = cMath_RandRectf(mfFlickerMinOnTimer, mfFlickerMaxOnTimer);
				sSound = msFlickerOnSound;
				sParticleSystem = msFlickerOnPS;
				
				mBaseObj.SetCustomEffectsOffAlpha(0);
			}
			
			mBaseObj.SetEffectsActive(!mbFlickerOnState, mbFade, false);
			
			mbFlickerOnState = !mbFlickerOnState;	

			cWorld @pWorld = mBaseObj.GetMap().GetWorld();
			
			///////////////////////
			// Play sound
			if(sSound != "")
			{
				cSoundEntity @pSound = pWorld.CreateSoundEntity(mBaseObj.GetName() + "_FlickerSound", sSound, true);
				if(pSound !is null)
				{
					pSound.SetPosition(mBaseObj.GetPosition());
					if(pSound.IsOneShot()==false) pSound.Stop(false);
				}
			}
			
			///////////////////////
			// Create particles
			if(sParticleSystem != "")
			{	
				cParticleSystem @pPS = pWorld.CreateParticleSystem(mBaseObj.GetName() + "_FlickerPS", sParticleSystem, cVector3f(1), true, false);
				if (pPS !is null) mBaseObj.GetAttachEntity().AddChild(pPS);
			}
		}
	}
	
	//------------------------------------------------------------
	
	void UpdateDistanceLightUp(float afTimeStep)
	{
		if (mbLightByDistance == false) return;
		
		mfDistanceCheckTimer -= afTimeStep;
		if (mfDistanceCheckTimer < 0)
		{
			float fDist = cMath_Vector3Dist(mBaseObj.GetPosition(), Player_GetPosition());
			SetLit(fDist <= mfLightDistance, true, false);			
			mfDistanceCheckTimer = fDist > mfLightDistance + 4.0f || fDist < mfLightDistance - 4.0f ? cMath_RandRectf(1.0f, 2.0f) : cMath_RandRectf(0.1f, 0.2f);
		}
	}

	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GENERAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
		
	bool CanInteract(int alType, iPhysicsBody@ apBody)
	{		
		if (mbLightByDistance)
			return false;
		if (mBaseObj.IsEffectsFading())
			return false;
		if (mBaseObj.Timer_Exists("Timer_InteractedCooldown"))
			return false;
		if (mbLit == false && mbCanBeLitByPlayer == false)
			return false;
		if (mbLit && mbCanBeSnuffedOutByPlayer == false)
			return false;
		
		return true;
	}
	
	//------------------------------------------------------------
		
	bool OnInteract(int alType, iPhysicsBody@ apBody, const cVector3f &in avFocusPos, const tString&in asData)
	{		
		///////////////////////
		// Update state		
		mBaseObj.Timer_Add("Timer_InteractedCooldown", cMath_Max(mBaseObj.GetEffectsOnTime(), 0.3f));
		
		///////////////////////
		// Play sound
		Sound_CreateAtEntity("Sound_Interact_" + mBaseObj.GetName(), msInteractSound, mBaseObj.GetName());
		
		///////////////////////
		// Early out if generator not powered?
		if (mbRequiresGeneratorPower && mbLit == false && Generator_GetState(true) != eGeneratorState_On)
			return false;
			
		///////////////////////
		// Light up
		if (mbLit == false)
		{						
			if (mbRequiresFuel)
			{
				if (ItemType_GetCountInInventory("Fuel") == 0)
				{
					Item_ShowFuelCount(true);
					Item_FlashItemCount(3);
					return false;
				}
			
				ItemType_RemoveFromInventory("Fuel", 1);
				
				mBaseObj.PlaySound("Sound_FuelRefill", "officer_hub/generator/fuel_refill", true, true);
			}
			
			SetLit(true, true, false);
		}
		///////////////////////
		// Snuff out
		else
		{
			SetLit(false, true, false);
		}
		
		return true;
	}
	
	//------------------------------------------------------------
	
	int GetInteractIconId(int alType, iPhysicsBody@ apBody)
	{
		if (mbLit == false)
		{
			if (mbRequiresFuel == false) 	
				return eCrossHairState_PushButton;
				
			if (mbRequiresFuel)
			{
				bool bHasFuelCanister = ItemType_GetCountInInventory("Fuel") > 0;
				bool bHasFuelBottle = ItemType_GetCountInInventory("FuelBottle") > 0;
				
				if (bHasFuelCanister==false && bHasFuelBottle)
					return eCrossHairState_UseFuelBottle;
					
				return eCrossHairState_UseFuel;
			}
		}

		return eCrossHairState_PushButton;
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// DEBUG
	/////////////////////////////////////////
	
	//------------------------------------------------------------
		
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afStartY)
	{
		return afStartY;
		
		/*apSet.DrawFont(tWString("Lamp: "+ mBaseObj.GetName()), apFont, cVector3f(5,afStartY,0), cVector2f(14), cColor(1,1) );
		afStartY += 14;
		
		return afStartY;*/
	}
	
	/////////////////////////////////////////
	// PROPERTIES
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	bool mbConnectionDelay = true;
	bool mbLit = true;
	bool mbCanBeLitByPlayer = false;
	bool mbCanBeSnuffedOutByPlayer = false;
	int mlConnectionState = 0;
	
	bool mbFlickerOnState = false;
	float mfFlickerTimer = 0;
	float mfFlickerMinOnTimer = 0.05f;
	float mfFlickerMaxOnTimer = 1.f;
	float mfFlickerMinOffTimer = 0.05f;
	float mfFlickerMaxOffTimer = 0.3f;
	float mfFlickerOffAlpha = 0.5f;
	float mfFlickerOffAlphaMax = 0.5f;
	bool mbFade = false;
	tString msFlickerOnSound;
	tString msFlickerOffSound;
	tString msFlickerOnPS;
	tString msFlickerOffPS;
	
	bool mbRequiresGeneratorPower;
	//bool mbSwitchedOn = true;
	bool mbRequiresFuel = false;
	tString msInteractSound;
	
	bool mbLightByDistance = false;
	float mfLightDistance = 5.0f;
	float mfDistanceCheckTimer = -1.0f;
	
	[volatile] iScrLampComponent_Interface@ mpLampComponent = null;
	
	tString msConnectedFogArea = "";
	
	//------------------------------------------------------------
}	