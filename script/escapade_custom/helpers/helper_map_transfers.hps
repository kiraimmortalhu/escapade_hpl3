#include "helpers/helper_map.hps"
#include "custom/helpers/helper_items.hps"
#include "helpers/helper_player.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"

///////////////////////////

//-------------------------------------------------
//////////////////////////////////////
// CRASH PREVENTION
//////////////////////////////////////

tString mapToChange = "";
tString transferArea = "";
float afUnequipTime;
float transferDelay;

/**
 * @brief Crash prevention transfer which waits a bit and does certain actions that make it safe until a better fix is found.
 * 
 * @param map, map's name to transfer.
 * @param trArea, transfer area used.
 * @param unequipTime, the time it waits until transfer happens.
 **/
void Game_DoCrashPreventionTransfer(const tString &in map, const tString &in trArea, const float unequipTime = 1.5f, const float asDelay = 0.0f){
    Player_SetCanEquipItems(false);
    Player_SetActive(false);
    
    mapToChange = map;
    transferArea = trArea;
    afUnequipTime = unequipTime;
    transferDelay = asDelay;
    
    //cLux_AddDebugMessage("Item_GetHeldType RESULT: " + Item_GetHeldType());
    //cLux_AddDebugMessage("Item_GetHandHeldState RESULT: " + Item_GetHandHeldState());
    //cLux_AddDebugMessage("LAST WEAPON USED: " + Item_GetLastWeaponUsed());
    //cLux_AddDebugMessage("HELD ENTITY: " + Item_GetHeldEntity());
    //cLux_AddDebugMessage("HELD: " + Item_GetHeld());
    //cLux_AddDebugMessage("GET STRING POS: " + cString_GetFirstStringPos(Item_GetHeldEntity(), "Torch"));
    
    Map_AddTimer("unequipForTransfer", transferDelay, "$_OnTimer_DelayEquipPrevention");
    
    
    //Map_AddTimer("changeMap", afUnequipTime, "$_OnTimer_DoCrashPreventionTransfer");
}

//-------------------------------------------------

/**
 * @brief Part of function Game_DoCrashPreventionTransfer. 
 * 
 */
void _OnTimer_DelayEquipPrevention(const tString &in asTimer){
    if(cString_GetFirstStringPos(Item_GetHeldEntity(), "Torch") != -1){
        // Crash condition found
        Map_AddTimer("unequipForTransfer", 0.0f, "$_OnTimer_UnequipForTransfer");
    }else{
        // If crash conditions are not present, do instant transfer
        Player_SetActive(true);
        Player_SetCanEquipItems(true);
        
        Game_DoMapChange(mapToChange, transferArea);
    }
    
}
    
    //-------------------------------------------------

/**
 * @brief Part of function Game_DoCrashPreventionTransfer. 
 * 
 */
void _OnTimer_UnequipForTransfer(const tString &in asTimer){
    if(cString_GetFirstStringPos(Item_GetHeldEntity(), "Torch") != -1){
        Item_PutAway();
        //Item_GetLastWeaponUsed();
    
        Map_AddTimer("changeMap", afUnequipTime, "$_OnTimer_DoCrashPreventionTransfer");
    }else{
        // If crash conditions are not present, do instant transfer
        Player_SetActive(true);
        Player_SetCanEquipItems(true);
        
        Game_DoMapChange(mapToChange, transferArea);
    }
    
}

//-------------------------------------------------

/**
 * @brief Part of function Game_DoCrashPreventionTransfer. 
 * 
 */
void _OnTimer_DoCrashPreventionTransfer(const tString &in asTimer){
    if(!PlayerHands_GetAnimationPlaying()){
        Player_SetActive(true);
        Player_SetCanEquipItems(true);
        
        Game_DoMapChange(mapToChange, transferArea);
    }
    else{
        // If hand still not down, perform the timer again to unequip
        Item_PutAway();
        Map_AddTimer("unequipForTransfer", 0.1f, "$_OnTimer_UnequipForTransfer");
    }
}
